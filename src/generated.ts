// Generated by @wagmi/cli@1.3.0 on 8/17/2023 at 12:09:40 AM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
  useNetwork,
  Address,
} from "wagmi";
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from "wagmi/actions";

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AttestationStation
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const attestationStationABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "creator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "about",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "key", internalType: "bytes32", type: "bytes32", indexed: true },
      { name: "val", internalType: "bytes", type: "bytes", indexed: false },
    ],
    name: "AttestationCreated",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "_attestations",
        internalType: "struct AttestationStation.AttestationData[]",
        type: "tuple[]",
        components: [
          { name: "about", internalType: "address", type: "address" },
          { name: "key", internalType: "bytes32", type: "bytes32" },
          { name: "val", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    name: "attest",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_about", internalType: "address", type: "address" },
      { name: "_key", internalType: "bytes32", type: "bytes32" },
      { name: "_val", internalType: "bytes", type: "bytes" },
    ],
    name: "attest",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "bytes32", type: "bytes32" },
    ],
    name: "attestations",
    outputs: [{ name: "", internalType: "bytes", type: "bytes" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Counter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const counterABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "increment",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "number",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newNumber", internalType: "uint256", type: "uint256" }],
    name: "setNumber",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BaseModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const baseModuleABI = [
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "metadataHash",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "metadataProvider",
    outputs: [
      { name: "providerType", internalType: "uint256", type: "uint256" },
      { name: "location", internalType: "bytes", type: "bytes" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "requiresRootAccess",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_metadataHash", internalType: "bytes32", type: "bytes32" },
    ],
    name: "retrieveMetadata",
    outputs: [{ name: "metadata", internalType: "bytes", type: "bytes" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MetadataProvider
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const metadataProviderABI = [
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "metadataHash", internalType: "bytes32", type: "bytes32" },
    ],
    name: "retrieveMetadata",
    outputs: [{ name: "metadata", internalType: "bytes", type: "bytes" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISafe
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSafeABI = [
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address payable", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
      { name: "operation", internalType: "uint8", type: "uint8" },
    ],
    name: "execTransactionFromModule",
    outputs: [{ name: "success", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
      { name: "operation", internalType: "uint8", type: "uint8" },
    ],
    name: "execTransactionFromModuleReturnData",
    outputs: [
      { name: "success", internalType: "bool", type: "bool" },
      { name: "returnData", internalType: "bytes", type: "bytes" },
    ],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DummyModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const dummyModuleABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_manager", internalType: "address", type: "address" },
      { name: "_relayer", internalType: "address", type: "address" },
      {
        name: "_data",
        internalType: "struct PluginMetadata",
        type: "tuple",
        components: [
          { name: "name", internalType: "string", type: "string" },
          { name: "version", internalType: "string", type: "string" },
          { name: "requiresRootAccess", internalType: "bool", type: "bool" },
          { name: "iconUrl", internalType: "string", type: "string" },
          { name: "appUrl", internalType: "string", type: "string" },
        ],
      },
    ],
  },
  {
    type: "error",
    inputs: [
      { name: "currentTime", internalType: "uint256", type: "uint256" },
      { name: "updateTime", internalType: "uint256", type: "uint256" },
      { name: "minDuration", internalType: "uint256", type: "uint256" },
    ],
    name: "TooSoon",
  },
  {
    type: "error",
    inputs: [{ name: "origin", internalType: "address", type: "address" }],
    name: "UntrustedRelayer",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "safe",
        internalType: "address",
        type: "address",
        indexed: false,
      },
      {
        name: "gauge",
        internalType: "address",
        type: "address",
        indexed: false,
      },
      {
        name: "timestamp",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "PluginTransactionExec",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_safe", internalType: "contract ISafe", type: "address" },
    ],
    name: "executeFromPlugin",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "metadataHash",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "metadataProvider",
    outputs: [
      { name: "providerType", internalType: "uint256", type: "uint256" },
      { name: "location", internalType: "bytes", type: "bytes" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "relayer",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "requiresRootAccess",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_metadataHash", internalType: "bytes32", type: "bytes32" },
    ],
    name: "retrieveMetadata",
    outputs: [{ name: "metadata", internalType: "bytes", type: "bytes" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "safeConfigs",
    outputs: [
      { name: "vault", internalType: "address", type: "address" },
      { name: "cadenceSec", internalType: "uint64", type: "uint64" },
      { name: "lastCall", internalType: "uint64", type: "uint64" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_safe", internalType: "address", type: "address" },
      {
        name: "_config",
        internalType: "struct DummyModule.DummyConfig",
        type: "tuple",
        components: [
          { name: "vault", internalType: "address", type: "address" },
          { name: "cadenceSec", internalType: "uint64", type: "uint64" },
          { name: "lastCall", internalType: "uint64", type: "uint64" },
        ],
      },
    ],
    name: "setSafeConfig",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "name_", internalType: "string", type: "string" },
      { name: "symbol_", internalType: "string", type: "string" },
    ],
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "subtractedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "addedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20Burnable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20BurnableABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "amount", internalType: "uint256", type: "uint256" }],
    name: "burn",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "burnFrom",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "subtractedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "addedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20PresetFixedSupply
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20PresetFixedSupplyABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "name", internalType: "string", type: "string" },
      { name: "symbol", internalType: "string", type: "string" },
      { name: "initialSupply", internalType: "uint256", type: "uint256" },
      { name: "owner", internalType: "address", type: "address" },
    ],
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "amount", internalType: "uint256", type: "uint256" }],
    name: "burn",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "burnFrom",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "subtractedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "addedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FallbackManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const fallbackManagerABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "handler",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "ChangedFallbackHandler",
  },
  { stateMutability: "nonpayable", type: "fallback" },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "handler", internalType: "address", type: "address" }],
    name: "setFallbackHandler",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BaseGuard
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const baseGuardABI = [
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "hash", internalType: "bytes32", type: "bytes32" },
      { name: "success", internalType: "bool", type: "bool" },
    ],
    name: "checkAfterExecution",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
      { name: "operation", internalType: "enum Enum.Operation", type: "uint8" },
      { name: "module", internalType: "address", type: "address" },
    ],
    name: "checkModuleTransaction",
    outputs: [
      { name: "moduleTxHash", internalType: "bytes32", type: "bytes32" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
      { name: "operation", internalType: "enum Enum.Operation", type: "uint8" },
      { name: "safeTxGas", internalType: "uint256", type: "uint256" },
      { name: "baseGas", internalType: "uint256", type: "uint256" },
      { name: "gasPrice", internalType: "uint256", type: "uint256" },
      { name: "gasToken", internalType: "address", type: "address" },
      {
        name: "refundReceiver",
        internalType: "address payable",
        type: "address",
      },
      { name: "signatures", internalType: "bytes", type: "bytes" },
      { name: "msgSender", internalType: "address", type: "address" },
    ],
    name: "checkTransaction",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Guard
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const guardABI = [
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "hash", internalType: "bytes32", type: "bytes32" },
      { name: "success", internalType: "bool", type: "bool" },
    ],
    name: "checkAfterExecution",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
      { name: "operation", internalType: "enum Enum.Operation", type: "uint8" },
      { name: "module", internalType: "address", type: "address" },
    ],
    name: "checkModuleTransaction",
    outputs: [
      { name: "moduleTxHash", internalType: "bytes32", type: "bytes32" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
      { name: "operation", internalType: "enum Enum.Operation", type: "uint8" },
      { name: "safeTxGas", internalType: "uint256", type: "uint256" },
      { name: "baseGas", internalType: "uint256", type: "uint256" },
      { name: "gasPrice", internalType: "uint256", type: "uint256" },
      { name: "gasToken", internalType: "address", type: "address" },
      {
        name: "refundReceiver",
        internalType: "address payable",
        type: "address",
      },
      { name: "signatures", internalType: "bytes", type: "bytes" },
      { name: "msgSender", internalType: "address", type: "address" },
    ],
    name: "checkTransaction",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GuardManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const guardManagerABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "guard",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "ChangedGuard",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "guard", internalType: "address", type: "address" }],
    name: "setGuard",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// HarvesterPlugin
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const harvesterPluginABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_manager", internalType: "address", type: "address" },
      { name: "_relayer", internalType: "address", type: "address" },
      { name: "_governance", internalType: "address", type: "address" },
      {
        name: "_data",
        internalType: "struct PluginMetadata",
        type: "tuple",
        components: [
          { name: "name", internalType: "string", type: "string" },
          { name: "version", internalType: "string", type: "string" },
          { name: "requiresRootAccess", internalType: "bool", type: "bool" },
          { name: "iconUrl", internalType: "string", type: "string" },
          { name: "appUrl", internalType: "string", type: "string" },
        ],
      },
    ],
  },
  {
    type: "error",
    inputs: [{ name: "origin", internalType: "address", type: "address" }],
    name: "NotGovernance",
  },
  {
    type: "error",
    inputs: [{ name: "origin", internalType: "address", type: "address" }],
    name: "NotManager",
  },
  {
    type: "error",
    inputs: [
      { name: "currentTime", internalType: "uint256", type: "uint256" },
      { name: "updateTime", internalType: "uint256", type: "uint256" },
      { name: "minDuration", internalType: "uint256", type: "uint256" },
    ],
    name: "TooSoon",
  },
  {
    type: "error",
    inputs: [{ name: "origin", internalType: "address", type: "address" }],
    name: "UntrustedRelayer",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "safe",
        internalType: "address",
        type: "address",
        indexed: false,
      },
      {
        name: "gauge",
        internalType: "address",
        type: "address",
        indexed: false,
      },
      {
        name: "timestamp",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "PluginTransactionExec",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "relayer",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "timestamp",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "RelayerAdded",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "relayer",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "timestamp",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "RelayerRemoved",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_relayer", internalType: "address", type: "address" }],
    name: "addRelayer",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes", type: "bytes" }],
    name: "checkUpkeep",
    outputs: [
      { name: "upkeepNeeded_", internalType: "bool", type: "bool" },
      { name: "performData_", internalType: "bytes", type: "bytes" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getSafes",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "metadataHash",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "metadataProvider",
    outputs: [
      { name: "providerType", internalType: "uint256", type: "uint256" },
      { name: "location", internalType: "bytes", type: "bytes" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_performData", internalType: "bytes", type: "bytes" }],
    name: "performUpkeep",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_relayer", internalType: "address", type: "address" }],
    name: "removeRelayer",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "requiresRootAccess",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_metadataHash", internalType: "bytes32", type: "bytes32" },
    ],
    name: "retrieveMetadata",
    outputs: [{ name: "metadata", internalType: "bytes", type: "bytes" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "safeConfigs",
    outputs: [
      { name: "vault", internalType: "address", type: "address" },
      { name: "cadenceSec", internalType: "uint64", type: "uint64" },
      { name: "lastCall", internalType: "uint64", type: "uint64" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_safe", internalType: "address", type: "address" },
      {
        name: "_config",
        internalType: "struct HarvesterPlugin.DummyConfig",
        type: "tuple",
        components: [
          { name: "vault", internalType: "address", type: "address" },
          { name: "cadenceSec", internalType: "uint64", type: "uint64" },
          { name: "lastCall", internalType: "uint64", type: "uint64" },
        ],
      },
    ],
    name: "setSafeConfig",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// HooksManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const hooksManagerABI = [
  {
    type: "error",
    inputs: [
      { name: "hooksAddress", internalType: "address", type: "address" },
    ],
    name: "AddressDoesNotImplementHooksInterface",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "safe", internalType: "address", type: "address", indexed: true },
      {
        name: "hooksAddress",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "HooksChanged",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "enabledHooks",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "safe", internalType: "address", type: "address" }],
    name: "getEnabledHooks",
    outputs: [
      { name: "hooksAddress", internalType: "address", type: "address" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "hooks", internalType: "address", type: "address" }],
    name: "setHooks",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165ABI = [
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20ABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MetadataABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IModule
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iModuleABI = [
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "safe", internalType: "address", type: "address" },
      {
        name: "config",
        internalType: "struct IModule.DummyConfig",
        type: "tuple",
        components: [
          { name: "vault", internalType: "address", type: "address" },
          { name: "cadenceSec", internalType: "uint64", type: "uint64" },
          { name: "lastCall", internalType: "uint64", type: "uint64" },
        ],
      },
    ],
    name: "setSafeConfig",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPlugin
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPluginABI = [
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "safe", internalType: "address", type: "address" },
      {
        name: "config",
        internalType: "struct IPlugin.DummyConfig",
        type: "tuple",
        components: [
          { name: "vault", internalType: "address", type: "address" },
          { name: "cadenceSec", internalType: "uint64", type: "uint64" },
          { name: "lastCall", internalType: "uint64", type: "uint64" },
        ],
      },
    ],
    name: "setSafeConfig",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISignatureValidator
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSignatureValidatorABI = [
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "_hash", internalType: "bytes32", type: "bytes32" },
      { name: "_signature", internalType: "bytes", type: "bytes" },
    ],
    name: "isValidSignature",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISafeProtocolFunctionHandler
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSafeProtocolFunctionHandlerABI = [
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "safe", internalType: "contract ISafe", type: "address" },
      { name: "sender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "handle",
    outputs: [{ name: "result", internalType: "bytes", type: "bytes" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISafeProtocolHooks
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSafeProtocolHooksABI = [
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "safe", internalType: "contract ISafe", type: "address" },
      { name: "success", internalType: "bool", type: "bool" },
      { name: "preCheckData", internalType: "bytes", type: "bytes" },
    ],
    name: "postCheck",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "safe", internalType: "contract ISafe", type: "address" },
      {
        name: "tx",
        internalType: "struct SafeTransaction",
        type: "tuple",
        components: [
          {
            name: "actions",
            internalType: "struct SafeProtocolAction[]",
            type: "tuple[]",
            components: [
              { name: "to", internalType: "address payable", type: "address" },
              { name: "value", internalType: "uint256", type: "uint256" },
              { name: "data", internalType: "bytes", type: "bytes" },
            ],
          },
          { name: "nonce", internalType: "uint256", type: "uint256" },
          { name: "metadataHash", internalType: "bytes32", type: "bytes32" },
        ],
      },
      { name: "executionType", internalType: "uint256", type: "uint256" },
      { name: "executionMeta", internalType: "bytes", type: "bytes" },
    ],
    name: "preCheck",
    outputs: [{ name: "preCheckData", internalType: "bytes", type: "bytes" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "safe", internalType: "contract ISafe", type: "address" },
      {
        name: "rootAccess",
        internalType: "struct SafeRootAccess",
        type: "tuple",
        components: [
          {
            name: "action",
            internalType: "struct SafeProtocolAction",
            type: "tuple",
            components: [
              { name: "to", internalType: "address payable", type: "address" },
              { name: "value", internalType: "uint256", type: "uint256" },
              { name: "data", internalType: "bytes", type: "bytes" },
            ],
          },
          { name: "nonce", internalType: "uint256", type: "uint256" },
          { name: "metadataHash", internalType: "bytes32", type: "bytes32" },
        ],
      },
      { name: "executionType", internalType: "uint256", type: "uint256" },
      { name: "executionMeta", internalType: "bytes", type: "bytes" },
    ],
    name: "preCheckRootAccess",
    outputs: [{ name: "preCheckData", internalType: "bytes", type: "bytes" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISafeProtocolPlugin
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSafeProtocolPluginABI = [
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "metadataProvider",
    outputs: [
      { name: "providerType", internalType: "uint256", type: "uint256" },
      { name: "location", internalType: "bytes", type: "bytes" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "name", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "requiresRootAccess",
    outputs: [
      { name: "requiresRootAccess", internalType: "bool", type: "bool" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "version", internalType: "string", type: "string" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISafeProtocolStaticFunctionHandler
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSafeProtocolStaticFunctionHandlerABI = [
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "safe", internalType: "contract ISafe", type: "address" },
      { name: "sender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "handle",
    outputs: [{ name: "result", internalType: "bytes", type: "bytes" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// KeeperCompatibleInterface
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const keeperCompatibleInterfaceABI = [
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "checkData", internalType: "bytes", type: "bytes" }],
    name: "checkUpkeep",
    outputs: [
      { name: "upkeepNeeded", internalType: "bool", type: "bool" },
      { name: "performData", internalType: "bytes", type: "bytes" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "performData", internalType: "bytes", type: "bytes" }],
    name: "performUpkeep",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISafeProtocolManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSafeProtocolManagerABI = [
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "safe", internalType: "contract ISafe", type: "address" },
      {
        name: "rootAccess",
        internalType: "struct SafeRootAccess",
        type: "tuple",
        components: [
          {
            name: "action",
            internalType: "struct SafeProtocolAction",
            type: "tuple",
            components: [
              { name: "to", internalType: "address payable", type: "address" },
              { name: "value", internalType: "uint256", type: "uint256" },
              { name: "data", internalType: "bytes", type: "bytes" },
            ],
          },
          { name: "nonce", internalType: "uint256", type: "uint256" },
          { name: "metadataHash", internalType: "bytes32", type: "bytes32" },
        ],
      },
    ],
    name: "executeRootAccess",
    outputs: [{ name: "data", internalType: "bytes", type: "bytes" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "safe", internalType: "contract ISafe", type: "address" },
      {
        name: "transaction",
        internalType: "struct SafeTransaction",
        type: "tuple",
        components: [
          {
            name: "actions",
            internalType: "struct SafeProtocolAction[]",
            type: "tuple[]",
            components: [
              { name: "to", internalType: "address payable", type: "address" },
              { name: "value", internalType: "uint256", type: "uint256" },
              { name: "data", internalType: "bytes", type: "bytes" },
            ],
          },
          { name: "nonce", internalType: "uint256", type: "uint256" },
          { name: "metadataHash", internalType: "bytes32", type: "bytes32" },
        ],
      },
    ],
    name: "executeTransaction",
    outputs: [{ name: "data", internalType: "bytes[]", type: "bytes[]" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MockGauge
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mockGaugeABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_name", internalType: "string", type: "string" },
      { name: "_symbol", internalType: "string", type: "string" },
      { name: "_lpToken", internalType: "address", type: "address" },
      { name: "_rewardTokens", internalType: "address[]", type: "address[]" },
    ],
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "acccount",
        internalType: "address",
        type: "address",
        indexed: false,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "timestamp",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "RewardClaimed",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "subtractedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "amount", internalType: "uint256", type: "uint256" }],
    name: "deposit",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_account", internalType: "address", type: "address" }],
    name: "getReward",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "addedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "lpToken",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "rewardTokens",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "amount", internalType: "uint256", type: "uint256" }],
    name: "withdraw",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBasicRewards
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBasicRewardsABI = [
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "earned",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "exit",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "extraRewards",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "getReward",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "stake",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    name: "stake",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    name: "stakeFor",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "bool", type: "bool" },
    ],
    name: "withdraw",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
    ],
    name: "withdraw",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "", internalType: "bool", type: "bool" }],
    name: "withdrawAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "claim", internalType: "bool", type: "bool" },
    ],
    name: "withdrawAndUnwrap",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IGauge
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iGaugeABI = [
  { type: "error", inputs: [], name: "NotAlive" },
  { type: "error", inputs: [], name: "NotAuthorized" },
  { type: "error", inputs: [], name: "NotVoter" },
  { type: "error", inputs: [], name: "RewardRateTooHigh" },
  { type: "error", inputs: [], name: "ZeroAmount" },
  { type: "error", inputs: [], name: "ZeroRewardRate" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      {
        name: "claimed0",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "claimed1",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "ClaimFees",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "ClaimRewards",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Deposit",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "NotifyReward",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Withdraw",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_amount", internalType: "uint256", type: "uint256" },
      { name: "_recipient", internalType: "address", type: "address" },
    ],
    name: "deposit",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_amount", internalType: "uint256", type: "uint256" }],
    name: "deposit",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "_account", internalType: "address", type: "address" }],
    name: "earned",
    outputs: [{ name: "_earned", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "fees0",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "fees1",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "feesVotingReward",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_account", internalType: "address", type: "address" }],
    name: "getReward",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "isPool",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "lastTimeRewardApplicable",
    outputs: [{ name: "_time", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "lastUpdateTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "left",
    outputs: [{ name: "_left", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "amount", internalType: "uint256", type: "uint256" }],
    name: "notifyRewardAmount",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "periodFinish",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "rewardPerToken",
    outputs: [
      { name: "_rewardPerToken", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "rewardPerTokenStored",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "rewardRate",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "rewardRateByEpoch",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "rewardToken",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "rewards",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "stakingToken",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "userRewardPerTokenPaid",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "voter",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_amount", internalType: "uint256", type: "uint256" }],
    name: "withdraw",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ModuleFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const moduleFactoryABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "module",
        internalType: "address",
        type: "address",
        indexed: false,
      },
      {
        name: "vault",
        internalType: "address",
        type: "address",
        indexed: false,
      },
      {
        name: "timestamp",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "ModuleDeployed",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_vault", internalType: "address", type: "address" },
      { name: "_timestamp", internalType: "uint256", type: "uint256" },
    ],
    name: "createModule",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "deployedModules",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IProxyCreationCallback
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iProxyCreationCallbackABI = [
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "proxy", internalType: "contract SafeProxy", type: "address" },
      { name: "_singleton", internalType: "address", type: "address" },
      { name: "initializer", internalType: "bytes", type: "bytes" },
      { name: "saltNonce", internalType: "uint256", type: "uint256" },
    ],
    name: "proxyCreated",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ModuleManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const moduleManagerABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "guard",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "ChangedGuard",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "module",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "DisabledModule",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "module",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "EnabledModule",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "module",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "ExecutionFromModuleFailure",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "module",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "ExecutionFromModuleSuccess",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "prevModule", internalType: "address", type: "address" },
      { name: "module", internalType: "address", type: "address" },
    ],
    name: "disableModule",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "module", internalType: "address", type: "address" }],
    name: "enableModule",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
      { name: "operation", internalType: "enum Enum.Operation", type: "uint8" },
    ],
    name: "execTransactionFromModule",
    outputs: [{ name: "success", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
      { name: "operation", internalType: "enum Enum.Operation", type: "uint8" },
    ],
    name: "execTransactionFromModuleReturnData",
    outputs: [
      { name: "success", internalType: "bool", type: "bool" },
      { name: "returnData", internalType: "bytes", type: "bytes" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "start", internalType: "address", type: "address" },
      { name: "pageSize", internalType: "uint256", type: "uint256" },
    ],
    name: "getModulesPaginated",
    outputs: [
      { name: "array", internalType: "address[]", type: "address[]" },
      { name: "next", internalType: "address", type: "address" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "module", internalType: "address", type: "address" }],
    name: "isModuleEnabled",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "guard", internalType: "address", type: "address" }],
    name: "setGuard",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// NativeCurrencyPaymentFallback
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const nativeCurrencyPaymentFallbackABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "SafeReceived",
  },
  { stateMutability: "payable", type: "receive" },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable2Step
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownable2StepABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferStarted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pendingOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OwnerManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownerManagerABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "AddedOwner",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "threshold",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "ChangedThreshold",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RemovedOwner",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "_threshold", internalType: "uint256", type: "uint256" },
    ],
    name: "addOwnerWithThreshold",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_threshold", internalType: "uint256", type: "uint256" }],
    name: "changeThreshold",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getOwners",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getThreshold",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "isOwner",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "prevOwner", internalType: "address", type: "address" },
      { name: "owner", internalType: "address", type: "address" },
      { name: "_threshold", internalType: "uint256", type: "uint256" },
    ],
    name: "removeOwner",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "prevOwner", internalType: "address", type: "address" },
      { name: "oldOwner", internalType: "address", type: "address" },
      { name: "newOwner", internalType: "address", type: "address" },
    ],
    name: "swapOwner",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISafeProtocolRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSafeProtocolRegistryABI = [
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "integration", internalType: "address", type: "address" }],
    name: "check",
    outputs: [
      { name: "listedAt", internalType: "uint64", type: "uint64" },
      { name: "flaggedAt", internalType: "uint64", type: "uint64" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RegistryManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const registryManagerABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_registry", internalType: "address", type: "address" },
      { name: "intitalOwner", internalType: "address", type: "address" },
    ],
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "AccountDoesNotImplementValidInterfaceId",
  },
  {
    type: "error",
    inputs: [
      { name: "plugin", internalType: "address", type: "address" },
      { name: "listedAt", internalType: "uint64", type: "uint64" },
      { name: "flaggedAt", internalType: "uint64", type: "uint64" },
    ],
    name: "PluginNotPermitted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferStarted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferred",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldRegistry",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newRegistry",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RegistryChanged",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pendingOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "registry",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newRegistry", internalType: "address", type: "address" }],
    name: "setRegistry",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Safe
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const safeABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "AddedOwner",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "approvedHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "ApproveHash",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "handler",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "ChangedFallbackHandler",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "guard",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "ChangedGuard",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "threshold",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "ChangedThreshold",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "module",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "DisabledModule",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "module",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "EnabledModule",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "txHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "payment",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "ExecutionFailure",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "module",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "ExecutionFromModuleFailure",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "module",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "ExecutionFromModuleSuccess",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "txHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
      {
        name: "payment",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "ExecutionSuccess",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RemovedOwner",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "SafeReceived",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "initiator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "owners",
        internalType: "address[]",
        type: "address[]",
        indexed: false,
      },
      {
        name: "threshold",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "initializer",
        internalType: "address",
        type: "address",
        indexed: false,
      },
      {
        name: "fallbackHandler",
        internalType: "address",
        type: "address",
        indexed: false,
      },
    ],
    name: "SafeSetup",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "msgHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true,
      },
    ],
    name: "SignMsg",
  },
  { stateMutability: "nonpayable", type: "fallback" },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "VERSION",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "_threshold", internalType: "uint256", type: "uint256" },
    ],
    name: "addOwnerWithThreshold",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "hashToApprove", internalType: "bytes32", type: "bytes32" },
    ],
    name: "approveHash",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "bytes32", type: "bytes32" },
    ],
    name: "approvedHashes",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "_threshold", internalType: "uint256", type: "uint256" }],
    name: "changeThreshold",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "executor", internalType: "address", type: "address" },
      { name: "dataHash", internalType: "bytes32", type: "bytes32" },
      { name: "", internalType: "bytes", type: "bytes" },
      { name: "signatures", internalType: "bytes", type: "bytes" },
      { name: "requiredSignatures", internalType: "uint256", type: "uint256" },
    ],
    name: "checkNSignatures",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "dataHash", internalType: "bytes32", type: "bytes32" },
      { name: "data", internalType: "bytes", type: "bytes" },
      { name: "signatures", internalType: "bytes", type: "bytes" },
    ],
    name: "checkSignatures",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "prevModule", internalType: "address", type: "address" },
      { name: "module", internalType: "address", type: "address" },
    ],
    name: "disableModule",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "domainSeparator",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "module", internalType: "address", type: "address" }],
    name: "enableModule",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
      { name: "operation", internalType: "enum Enum.Operation", type: "uint8" },
      { name: "safeTxGas", internalType: "uint256", type: "uint256" },
      { name: "baseGas", internalType: "uint256", type: "uint256" },
      { name: "gasPrice", internalType: "uint256", type: "uint256" },
      { name: "gasToken", internalType: "address", type: "address" },
      {
        name: "refundReceiver",
        internalType: "address payable",
        type: "address",
      },
      { name: "signatures", internalType: "bytes", type: "bytes" },
    ],
    name: "execTransaction",
    outputs: [{ name: "success", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
      { name: "operation", internalType: "enum Enum.Operation", type: "uint8" },
    ],
    name: "execTransactionFromModule",
    outputs: [{ name: "success", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
      { name: "operation", internalType: "enum Enum.Operation", type: "uint8" },
    ],
    name: "execTransactionFromModuleReturnData",
    outputs: [
      { name: "success", internalType: "bool", type: "bool" },
      { name: "returnData", internalType: "bytes", type: "bytes" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "start", internalType: "address", type: "address" },
      { name: "pageSize", internalType: "uint256", type: "uint256" },
    ],
    name: "getModulesPaginated",
    outputs: [
      { name: "array", internalType: "address[]", type: "address[]" },
      { name: "next", internalType: "address", type: "address" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getOwners",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "offset", internalType: "uint256", type: "uint256" },
      { name: "length", internalType: "uint256", type: "uint256" },
    ],
    name: "getStorageAt",
    outputs: [{ name: "", internalType: "bytes", type: "bytes" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getThreshold",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
      { name: "operation", internalType: "enum Enum.Operation", type: "uint8" },
      { name: "safeTxGas", internalType: "uint256", type: "uint256" },
      { name: "baseGas", internalType: "uint256", type: "uint256" },
      { name: "gasPrice", internalType: "uint256", type: "uint256" },
      { name: "gasToken", internalType: "address", type: "address" },
      { name: "refundReceiver", internalType: "address", type: "address" },
      { name: "_nonce", internalType: "uint256", type: "uint256" },
    ],
    name: "getTransactionHash",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "module", internalType: "address", type: "address" }],
    name: "isModuleEnabled",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "isOwner",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "nonce",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "prevOwner", internalType: "address", type: "address" },
      { name: "owner", internalType: "address", type: "address" },
      { name: "_threshold", internalType: "uint256", type: "uint256" },
    ],
    name: "removeOwner",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "handler", internalType: "address", type: "address" }],
    name: "setFallbackHandler",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "guard", internalType: "address", type: "address" }],
    name: "setGuard",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_owners", internalType: "address[]", type: "address[]" },
      { name: "_threshold", internalType: "uint256", type: "uint256" },
      { name: "to", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" },
      { name: "fallbackHandler", internalType: "address", type: "address" },
      { name: "paymentToken", internalType: "address", type: "address" },
      { name: "payment", internalType: "uint256", type: "uint256" },
      {
        name: "paymentReceiver",
        internalType: "address payable",
        type: "address",
      },
    ],
    name: "setup",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    name: "signedMessages",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "targetContract", internalType: "address", type: "address" },
      { name: "calldataPayload", internalType: "bytes", type: "bytes" },
    ],
    name: "simulateAndRevert",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "prevOwner", internalType: "address", type: "address" },
      { name: "oldOwner", internalType: "address", type: "address" },
      { name: "newOwner", internalType: "address", type: "address" },
    ],
    name: "swapOwner",
    outputs: [],
  },
  { stateMutability: "payable", type: "receive" },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SafeProtocolManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const safeProtocolManagerABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "initialOwner", internalType: "address", type: "address" },
      { name: "_registry", internalType: "address", type: "address" },
    ],
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "AccountDoesNotImplementValidInterfaceId",
  },
  {
    type: "error",
    inputs: [
      { name: "safe", internalType: "address", type: "address" },
      { name: "metadataHash", internalType: "bytes32", type: "bytes32" },
      { name: "index", internalType: "uint256", type: "uint256" },
    ],
    name: "ActionExecutionFailed",
  },
  {
    type: "error",
    inputs: [
      { name: "hooksAddress", internalType: "address", type: "address" },
    ],
    name: "AddressDoesNotImplementHooksInterface",
  },
  {
    type: "error",
    inputs: [{ name: "plugin", internalType: "address", type: "address" }],
    name: "InvalidPluginAddress",
  },
  {
    type: "error",
    inputs: [{ name: "plugin", internalType: "address", type: "address" }],
    name: "InvalidPrevPluginAddress",
  },
  {
    type: "error",
    inputs: [
      { name: "safe", internalType: "address", type: "address" },
      { name: "metadataHash", internalType: "bytes32", type: "bytes32" },
      { name: "index", internalType: "uint256", type: "uint256" },
    ],
    name: "InvalidToFieldInSafeProtocolAction",
  },
  {
    type: "error",
    inputs: [
      { name: "plugin", internalType: "address", type: "address" },
      { name: "requiresRootAccess", internalType: "bool", type: "bool" },
      { name: "providedValue", internalType: "bool", type: "bool" },
    ],
    name: "PluginAccessMismatch",
  },
  {
    type: "error",
    inputs: [
      { name: "safe", internalType: "address", type: "address" },
      { name: "plugin", internalType: "address", type: "address" },
    ],
    name: "PluginAlreadyEnabled",
  },
  {
    type: "error",
    inputs: [{ name: "plugin", internalType: "address", type: "address" }],
    name: "PluginEnabledOnlyForRootAccess",
  },
  {
    type: "error",
    inputs: [{ name: "plugin", internalType: "address", type: "address" }],
    name: "PluginNotEnabled",
  },
  {
    type: "error",
    inputs: [
      { name: "plugin", internalType: "address", type: "address" },
      { name: "listedAt", internalType: "uint64", type: "uint64" },
      { name: "flaggedAt", internalType: "uint64", type: "uint64" },
    ],
    name: "PluginNotPermitted",
  },
  {
    type: "error",
    inputs: [{ name: "sender", internalType: "address", type: "address" }],
    name: "PluginRequiresRootAccess",
  },
  {
    type: "error",
    inputs: [
      { name: "safe", internalType: "address", type: "address" },
      { name: "metadataHash", internalType: "bytes32", type: "bytes32" },
    ],
    name: "RootAccessActionExecutionFailed",
  },
  { type: "error", inputs: [], name: "ZeroPageSizeNotAllowed" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "safe", internalType: "address", type: "address", indexed: true },
      {
        name: "metadataHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: false,
      },
      {
        name: "nonce",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "ActionsExecuted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "safe", internalType: "address", type: "address", indexed: true },
      {
        name: "hooksAddress",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "HooksChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferStarted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferred",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "safe", internalType: "address", type: "address", indexed: true },
      {
        name: "plugin",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "PluginDisabled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "safe", internalType: "address", type: "address", indexed: true },
      {
        name: "plugin",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "allowRootAccess",
        internalType: "bool",
        type: "bool",
        indexed: false,
      },
    ],
    name: "PluginEnabled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldRegistry",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newRegistry",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RegistryChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "safe", internalType: "address", type: "address", indexed: true },
      {
        name: "metadataHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: false,
      },
    ],
    name: "RootAccessActionExecuted",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "prevPlugin", internalType: "address", type: "address" },
      { name: "plugin", internalType: "address", type: "address" },
    ],
    name: "disablePlugin",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "plugin", internalType: "address", type: "address" },
      { name: "allowRootAccess", internalType: "bool", type: "bool" },
    ],
    name: "enablePlugin",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "enabledHooks",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "enabledPlugins",
    outputs: [
      { name: "rootAddressGranted", internalType: "bool", type: "bool" },
      { name: "nextPluginPointer", internalType: "address", type: "address" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "safe", internalType: "contract ISafe", type: "address" },
      {
        name: "rootAccess",
        internalType: "struct SafeRootAccess",
        type: "tuple",
        components: [
          {
            name: "action",
            internalType: "struct SafeProtocolAction",
            type: "tuple",
            components: [
              { name: "to", internalType: "address payable", type: "address" },
              { name: "value", internalType: "uint256", type: "uint256" },
              { name: "data", internalType: "bytes", type: "bytes" },
            ],
          },
          { name: "nonce", internalType: "uint256", type: "uint256" },
          { name: "metadataHash", internalType: "bytes32", type: "bytes32" },
        ],
      },
    ],
    name: "executeRootAccess",
    outputs: [{ name: "data", internalType: "bytes", type: "bytes" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "safe", internalType: "contract ISafe", type: "address" },
      {
        name: "transaction",
        internalType: "struct SafeTransaction",
        type: "tuple",
        components: [
          {
            name: "actions",
            internalType: "struct SafeProtocolAction[]",
            type: "tuple[]",
            components: [
              { name: "to", internalType: "address payable", type: "address" },
              { name: "value", internalType: "uint256", type: "uint256" },
              { name: "data", internalType: "bytes", type: "bytes" },
            ],
          },
          { name: "nonce", internalType: "uint256", type: "uint256" },
          { name: "metadataHash", internalType: "bytes32", type: "bytes32" },
        ],
      },
    ],
    name: "executeTransaction",
    outputs: [{ name: "data", internalType: "bytes[]", type: "bytes[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "safe", internalType: "address", type: "address" }],
    name: "getEnabledHooks",
    outputs: [
      { name: "hooksAddress", internalType: "address", type: "address" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "safe", internalType: "address", type: "address" },
      { name: "plugin", internalType: "address", type: "address" },
    ],
    name: "getPluginInfo",
    outputs: [
      {
        name: "enabled",
        internalType: "struct SafeProtocolManager.PluginAccessInfo",
        type: "tuple",
        components: [
          { name: "rootAddressGranted", internalType: "bool", type: "bool" },
          {
            name: "nextPluginPointer",
            internalType: "address",
            type: "address",
          },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "start", internalType: "address", type: "address" },
      { name: "pageSize", internalType: "uint256", type: "uint256" },
      { name: "safe", internalType: "address", type: "address" },
    ],
    name: "getPluginsPaginated",
    outputs: [
      { name: "array", internalType: "address[]", type: "address[]" },
      { name: "next", internalType: "address", type: "address" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "safe", internalType: "address", type: "address" },
      { name: "plugin", internalType: "address", type: "address" },
    ],
    name: "isPluginEnabled",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pendingOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "registry",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "hooks", internalType: "address", type: "address" }],
    name: "setHooks",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newRegistry", internalType: "address", type: "address" }],
    name: "setRegistry",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SafeProtocolRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const safeProtocolRegistryABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "initialOwner", internalType: "address", type: "address" },
    ],
  },
  {
    type: "error",
    inputs: [{ name: "integration", internalType: "address", type: "address" }],
    name: "CannotAddIntegration",
  },
  {
    type: "error",
    inputs: [{ name: "integration", internalType: "address", type: "address" }],
    name: "CannotFlagIntegration",
  },
  {
    type: "error",
    inputs: [
      { name: "integration", internalType: "address", type: "address" },
      { name: "expectedInterfaceId", internalType: "bytes4", type: "bytes4" },
    ],
    name: "IntegrationDoesNotSupportExpectedInterfaceId",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "integration",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "IntegrationAdded",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "integration",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "IntegrationFlagged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferStarted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferred",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "integration", internalType: "address", type: "address" },
      {
        name: "integrationType",
        internalType: "enum Enum.IntegrationType",
        type: "uint8",
      },
    ],
    name: "addIntegration",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "integration", internalType: "address", type: "address" }],
    name: "check",
    outputs: [
      { name: "listedAt", internalType: "uint64", type: "uint64" },
      { name: "flaggedAt", internalType: "uint64", type: "uint64" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "integration", internalType: "address", type: "address" }],
    name: "flagIntegration",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "listedIntegrations",
    outputs: [
      { name: "listedAt", internalType: "uint64", type: "uint64" },
      { name: "flaggedAt", internalType: "uint64", type: "uint64" },
      {
        name: "integrationType",
        internalType: "enum Enum.IntegrationType",
        type: "uint8",
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pendingOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iProxyABI = [
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "masterCopy",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SafeProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const safeProxyABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [{ name: "_singleton", internalType: "address", type: "address" }],
  },
  { stateMutability: "payable", type: "fallback" },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SafeProxyFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const safeProxyFactoryABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "proxy",
        internalType: "contract SafeProxy",
        type: "address",
        indexed: true,
      },
      {
        name: "singleton",
        internalType: "address",
        type: "address",
        indexed: false,
      },
    ],
    name: "ProxyCreation",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_singleton", internalType: "address", type: "address" },
      { name: "initializer", internalType: "bytes", type: "bytes" },
      { name: "saltNonce", internalType: "uint256", type: "uint256" },
    ],
    name: "createChainSpecificProxyWithNonce",
    outputs: [
      { name: "proxy", internalType: "contract SafeProxy", type: "address" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_singleton", internalType: "address", type: "address" },
      { name: "initializer", internalType: "bytes", type: "bytes" },
      { name: "saltNonce", internalType: "uint256", type: "uint256" },
      {
        name: "callback",
        internalType: "contract IProxyCreationCallback",
        type: "address",
      },
    ],
    name: "createProxyWithCallback",
    outputs: [
      { name: "proxy", internalType: "contract SafeProxy", type: "address" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "_singleton", internalType: "address", type: "address" },
      { name: "initializer", internalType: "bytes", type: "bytes" },
      { name: "saltNonce", internalType: "uint256", type: "uint256" },
    ],
    name: "createProxyWithNonce",
    outputs: [
      { name: "proxy", internalType: "contract SafeProxy", type: "address" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getChainId",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "pure",
    type: "function",
    inputs: [],
    name: "proxyCreationCode",
    outputs: [{ name: "", internalType: "bytes", type: "bytes" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Semver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const semverABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_major", internalType: "uint256", type: "uint256" },
      { name: "_minor", internalType: "uint256", type: "uint256" },
      { name: "_patch", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "version",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SmartGardenManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export const smartGardenManagerABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_initialOwner", internalType: "address", type: "address" },
      { name: "_registry", internalType: "address", type: "address" },
    ],
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "AccountDoesNotImplementValidInterfaceId",
  },
  {
    type: "error",
    inputs: [
      { name: "safe", internalType: "address", type: "address" },
      { name: "metadataHash", internalType: "bytes32", type: "bytes32" },
      { name: "index", internalType: "uint256", type: "uint256" },
    ],
    name: "ActionExecutionFailed",
  },
  {
    type: "error",
    inputs: [
      { name: "hooksAddress", internalType: "address", type: "address" },
    ],
    name: "AddressDoesNotImplementHooksInterface",
  },
  {
    type: "error",
    inputs: [{ name: "plugin", internalType: "address", type: "address" }],
    name: "InvalidPluginAddress",
  },
  {
    type: "error",
    inputs: [{ name: "plugin", internalType: "address", type: "address" }],
    name: "InvalidPrevPluginAddress",
  },
  {
    type: "error",
    inputs: [
      { name: "safe", internalType: "address", type: "address" },
      { name: "metadataHash", internalType: "bytes32", type: "bytes32" },
      { name: "index", internalType: "uint256", type: "uint256" },
    ],
    name: "InvalidToFieldInSafeProtocolAction",
  },
  {
    type: "error",
    inputs: [
      { name: "plugin", internalType: "address", type: "address" },
      { name: "requiresRootAccess", internalType: "bool", type: "bool" },
      { name: "providedValue", internalType: "bool", type: "bool" },
    ],
    name: "PluginAccessMismatch",
  },
  {
    type: "error",
    inputs: [
      { name: "safe", internalType: "address", type: "address" },
      { name: "plugin", internalType: "address", type: "address" },
    ],
    name: "PluginAlreadyEnabled",
  },
  {
    type: "error",
    inputs: [{ name: "plugin", internalType: "address", type: "address" }],
    name: "PluginEnabledOnlyForRootAccess",
  },
  {
    type: "error",
    inputs: [{ name: "plugin", internalType: "address", type: "address" }],
    name: "PluginNotEnabled",
  },
  {
    type: "error",
    inputs: [
      { name: "plugin", internalType: "address", type: "address" },
      { name: "listedAt", internalType: "uint64", type: "uint64" },
      { name: "flaggedAt", internalType: "uint64", type: "uint64" },
    ],
    name: "PluginNotPermitted",
  },
  {
    type: "error",
    inputs: [{ name: "sender", internalType: "address", type: "address" }],
    name: "PluginRequiresRootAccess",
  },
  {
    type: "error",
    inputs: [
      { name: "safe", internalType: "address", type: "address" },
      { name: "metadataHash", internalType: "bytes32", type: "bytes32" },
    ],
    name: "RootAccessActionExecutionFailed",
  },
  { type: "error", inputs: [], name: "ZeroPageSizeNotAllowed" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "safe", internalType: "address", type: "address", indexed: true },
      {
        name: "metadataHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: false,
      },
      {
        name: "nonce",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "ActionsExecuted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "safe", internalType: "address", type: "address", indexed: true },
      {
        name: "hooksAddress",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "HooksChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferStarted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferred",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "safe", internalType: "address", type: "address", indexed: true },
      {
        name: "plugin",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "PluginDisabled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "safe", internalType: "address", type: "address", indexed: true },
      {
        name: "plugin",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "allowRootAccess",
        internalType: "bool",
        type: "bool",
        indexed: false,
      },
    ],
    name: "PluginEnabled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldRegistry",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newRegistry",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RegistryChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "safe", internalType: "address", type: "address", indexed: true },
      {
        name: "metadataHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: false,
      },
    ],
    name: "RootAccessActionExecuted",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "prevPlugin", internalType: "address", type: "address" },
      { name: "plugin", internalType: "address", type: "address" },
    ],
    name: "disablePlugin",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "plugin", internalType: "address", type: "address" },
      { name: "allowRootAccess", internalType: "bool", type: "bool" },
    ],
    name: "enablePlugin",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "plugin", internalType: "address", type: "address" },
      { name: "allowRootAccess", internalType: "bool", type: "bool" },
      {
        name: "config",
        internalType: "struct IPlugin.DummyConfig",
        type: "tuple",
        components: [
          { name: "vault", internalType: "address", type: "address" },
          { name: "cadenceSec", internalType: "uint64", type: "uint64" },
          { name: "lastCall", internalType: "uint64", type: "uint64" },
        ],
      },
    ],
    name: "enablePluginWithConfig",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "enabledHooks",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "enabledPlugins",
    outputs: [
      { name: "rootAddressGranted", internalType: "bool", type: "bool" },
      { name: "nextPluginPointer", internalType: "address", type: "address" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "safe", internalType: "contract ISafe", type: "address" },
      {
        name: "rootAccess",
        internalType: "struct SafeRootAccess",
        type: "tuple",
        components: [
          {
            name: "action",
            internalType: "struct SafeProtocolAction",
            type: "tuple",
            components: [
              { name: "to", internalType: "address payable", type: "address" },
              { name: "value", internalType: "uint256", type: "uint256" },
              { name: "data", internalType: "bytes", type: "bytes" },
            ],
          },
          { name: "nonce", internalType: "uint256", type: "uint256" },
          { name: "metadataHash", internalType: "bytes32", type: "bytes32" },
        ],
      },
    ],
    name: "executeRootAccess",
    outputs: [{ name: "data", internalType: "bytes", type: "bytes" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "safe", internalType: "contract ISafe", type: "address" },
      {
        name: "transaction",
        internalType: "struct SafeTransaction",
        type: "tuple",
        components: [
          {
            name: "actions",
            internalType: "struct SafeProtocolAction[]",
            type: "tuple[]",
            components: [
              { name: "to", internalType: "address payable", type: "address" },
              { name: "value", internalType: "uint256", type: "uint256" },
              { name: "data", internalType: "bytes", type: "bytes" },
            ],
          },
          { name: "nonce", internalType: "uint256", type: "uint256" },
          { name: "metadataHash", internalType: "bytes32", type: "bytes32" },
        ],
      },
    ],
    name: "executeTransaction",
    outputs: [{ name: "data", internalType: "bytes[]", type: "bytes[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "safe", internalType: "address", type: "address" }],
    name: "getEnabledHooks",
    outputs: [
      { name: "hooksAddress", internalType: "address", type: "address" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "safe", internalType: "address", type: "address" },
      { name: "plugin", internalType: "address", type: "address" },
    ],
    name: "getPluginInfo",
    outputs: [
      {
        name: "enabled",
        internalType: "struct SafeProtocolManager.PluginAccessInfo",
        type: "tuple",
        components: [
          { name: "rootAddressGranted", internalType: "bool", type: "bool" },
          {
            name: "nextPluginPointer",
            internalType: "address",
            type: "address",
          },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "start", internalType: "address", type: "address" },
      { name: "pageSize", internalType: "uint256", type: "uint256" },
      { name: "safe", internalType: "address", type: "address" },
    ],
    name: "getPluginsPaginated",
    outputs: [
      { name: "array", internalType: "address[]", type: "address[]" },
      { name: "next", internalType: "address", type: "address" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "safe", internalType: "address", type: "address" },
      { name: "plugin", internalType: "address", type: "address" },
    ],
    name: "isPluginEnabled",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pendingOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "registry",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "hooks", internalType: "address", type: "address" }],
    name: "setHooks",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newRegistry", internalType: "address", type: "address" }],
    name: "setRegistry",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
] as const;

/**
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export const smartGardenManagerAddress = {
  10: "0xfD20C63554A9916816dC5e5Df596A0333185F263",
  420: "0xfD20C63554A9916816dC5e5Df596A0333185F263",
  31337: "0xfD20C63554A9916816dC5e5Df596A0333185F263",
} as const;

/**
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export const smartGardenManagerConfig = {
  address: smartGardenManagerAddress,
  abi: smartGardenManagerABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SmartGardenProtocolManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const smartGardenProtocolManagerABI = [
  {
    stateMutability: "nonpayable",
    type: "constructor",
    inputs: [
      { name: "_initialOwner", internalType: "address", type: "address" },
      { name: "_registry", internalType: "address", type: "address" },
    ],
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "AccountDoesNotImplementValidInterfaceId",
  },
  {
    type: "error",
    inputs: [
      { name: "safe", internalType: "address", type: "address" },
      { name: "metadataHash", internalType: "bytes32", type: "bytes32" },
      { name: "index", internalType: "uint256", type: "uint256" },
    ],
    name: "ActionExecutionFailed",
  },
  {
    type: "error",
    inputs: [
      { name: "hooksAddress", internalType: "address", type: "address" },
    ],
    name: "AddressDoesNotImplementHooksInterface",
  },
  {
    type: "error",
    inputs: [{ name: "plugin", internalType: "address", type: "address" }],
    name: "InvalidPluginAddress",
  },
  {
    type: "error",
    inputs: [{ name: "plugin", internalType: "address", type: "address" }],
    name: "InvalidPrevPluginAddress",
  },
  {
    type: "error",
    inputs: [
      { name: "safe", internalType: "address", type: "address" },
      { name: "metadataHash", internalType: "bytes32", type: "bytes32" },
      { name: "index", internalType: "uint256", type: "uint256" },
    ],
    name: "InvalidToFieldInSafeProtocolAction",
  },
  {
    type: "error",
    inputs: [
      { name: "plugin", internalType: "address", type: "address" },
      { name: "requiresRootAccess", internalType: "bool", type: "bool" },
      { name: "providedValue", internalType: "bool", type: "bool" },
    ],
    name: "PluginAccessMismatch",
  },
  {
    type: "error",
    inputs: [
      { name: "safe", internalType: "address", type: "address" },
      { name: "plugin", internalType: "address", type: "address" },
    ],
    name: "PluginAlreadyEnabled",
  },
  {
    type: "error",
    inputs: [{ name: "plugin", internalType: "address", type: "address" }],
    name: "PluginEnabledOnlyForRootAccess",
  },
  {
    type: "error",
    inputs: [{ name: "plugin", internalType: "address", type: "address" }],
    name: "PluginNotEnabled",
  },
  {
    type: "error",
    inputs: [
      { name: "plugin", internalType: "address", type: "address" },
      { name: "listedAt", internalType: "uint64", type: "uint64" },
      { name: "flaggedAt", internalType: "uint64", type: "uint64" },
    ],
    name: "PluginNotPermitted",
  },
  {
    type: "error",
    inputs: [{ name: "sender", internalType: "address", type: "address" }],
    name: "PluginRequiresRootAccess",
  },
  {
    type: "error",
    inputs: [
      { name: "safe", internalType: "address", type: "address" },
      { name: "metadataHash", internalType: "bytes32", type: "bytes32" },
    ],
    name: "RootAccessActionExecutionFailed",
  },
  { type: "error", inputs: [], name: "ZeroPageSizeNotAllowed" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "safe", internalType: "address", type: "address", indexed: true },
      {
        name: "metadataHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: false,
      },
      {
        name: "nonce",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "ActionsExecuted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "safe", internalType: "address", type: "address", indexed: true },
      {
        name: "hooksAddress",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "HooksChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferStarted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "OwnershipTransferred",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "safe", internalType: "address", type: "address", indexed: true },
      {
        name: "plugin",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "PluginDisabled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "safe", internalType: "address", type: "address", indexed: true },
      {
        name: "plugin",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "allowRootAccess",
        internalType: "bool",
        type: "bool",
        indexed: false,
      },
    ],
    name: "PluginEnabled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "oldRegistry",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newRegistry",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "RegistryChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "safe", internalType: "address", type: "address", indexed: true },
      {
        name: "metadataHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: false,
      },
    ],
    name: "RootAccessActionExecuted",
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "prevPlugin", internalType: "address", type: "address" },
      { name: "plugin", internalType: "address", type: "address" },
    ],
    name: "disablePlugin",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "plugin", internalType: "address", type: "address" },
      { name: "allowRootAccess", internalType: "bool", type: "bool" },
    ],
    name: "enablePlugin",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "plugin", internalType: "address", type: "address" },
      { name: "allowRootAccess", internalType: "bool", type: "bool" },
      {
        name: "config",
        internalType: "struct IModule.DummyConfig",
        type: "tuple",
        components: [
          { name: "vault", internalType: "address", type: "address" },
          { name: "cadenceSec", internalType: "uint64", type: "uint64" },
          { name: "lastCall", internalType: "uint64", type: "uint64" },
        ],
      },
    ],
    name: "enablePluginWithConfig",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "enabledHooks",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "enabledPlugins",
    outputs: [
      { name: "rootAddressGranted", internalType: "bool", type: "bool" },
      { name: "nextPluginPointer", internalType: "address", type: "address" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "safe", internalType: "contract ISafe", type: "address" },
      {
        name: "rootAccess",
        internalType: "struct SafeRootAccess",
        type: "tuple",
        components: [
          {
            name: "action",
            internalType: "struct SafeProtocolAction",
            type: "tuple",
            components: [
              { name: "to", internalType: "address payable", type: "address" },
              { name: "value", internalType: "uint256", type: "uint256" },
              { name: "data", internalType: "bytes", type: "bytes" },
            ],
          },
          { name: "nonce", internalType: "uint256", type: "uint256" },
          { name: "metadataHash", internalType: "bytes32", type: "bytes32" },
        ],
      },
    ],
    name: "executeRootAccess",
    outputs: [{ name: "data", internalType: "bytes", type: "bytes" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "safe", internalType: "contract ISafe", type: "address" },
      {
        name: "transaction",
        internalType: "struct SafeTransaction",
        type: "tuple",
        components: [
          {
            name: "actions",
            internalType: "struct SafeProtocolAction[]",
            type: "tuple[]",
            components: [
              { name: "to", internalType: "address payable", type: "address" },
              { name: "value", internalType: "uint256", type: "uint256" },
              { name: "data", internalType: "bytes", type: "bytes" },
            ],
          },
          { name: "nonce", internalType: "uint256", type: "uint256" },
          { name: "metadataHash", internalType: "bytes32", type: "bytes32" },
        ],
      },
    ],
    name: "executeTransaction",
    outputs: [{ name: "data", internalType: "bytes[]", type: "bytes[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "safe", internalType: "address", type: "address" }],
    name: "getEnabledHooks",
    outputs: [
      { name: "hooksAddress", internalType: "address", type: "address" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "safe", internalType: "address", type: "address" },
      { name: "plugin", internalType: "address", type: "address" },
    ],
    name: "getPluginInfo",
    outputs: [
      {
        name: "enabled",
        internalType: "struct SafeProtocolManager.PluginAccessInfo",
        type: "tuple",
        components: [
          { name: "rootAddressGranted", internalType: "bool", type: "bool" },
          {
            name: "nextPluginPointer",
            internalType: "address",
            type: "address",
          },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "start", internalType: "address", type: "address" },
      { name: "pageSize", internalType: "uint256", type: "uint256" },
      { name: "safe", internalType: "address", type: "address" },
    ],
    name: "getPluginsPaginated",
    outputs: [
      { name: "array", internalType: "address[]", type: "address[]" },
      { name: "next", internalType: "address", type: "address" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "safe", internalType: "address", type: "address" },
      { name: "plugin", internalType: "address", type: "address" },
    ],
    name: "isPluginEnabled",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pendingOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "registry",
    outputs: [{ name: "", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "hooks", internalType: "address", type: "address" }],
    name: "setHooks",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newRegistry", internalType: "address", type: "address" }],
    name: "setRegistry",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StorageAccessible
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const storageAccessibleABI = [
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "offset", internalType: "uint256", type: "uint256" },
      { name: "length", internalType: "uint256", type: "uint256" },
    ],
    name: "getStorageAt",
    outputs: [{ name: "", internalType: "bytes", type: "bytes" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "targetContract", internalType: "address", type: "address" },
      { name: "calldataPayload", internalType: "bytes", type: "bytes" },
    ],
    name: "simulateAndRevert",
    outputs: [],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationStationABI}__.
 */
export function useAttestationStationRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof attestationStationABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof attestationStationABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: attestationStationABI,
    ...config,
  } as UseContractReadConfig<typeof attestationStationABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationStationABI}__ and `functionName` set to `"attestations"`.
 */
export function useAttestationStationAttestations<
  TFunctionName extends "attestations",
  TSelectData = ReadContractResult<typeof attestationStationABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof attestationStationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: attestationStationABI,
    functionName: "attestations",
    ...config,
  } as UseContractReadConfig<typeof attestationStationABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationStationABI}__ and `functionName` set to `"version"`.
 */
export function useAttestationStationVersion<
  TFunctionName extends "version",
  TSelectData = ReadContractResult<typeof attestationStationABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof attestationStationABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: attestationStationABI,
    functionName: "version",
    ...config,
  } as UseContractReadConfig<typeof attestationStationABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link attestationStationABI}__.
 */
export function useAttestationStationWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof attestationStationABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof attestationStationABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof attestationStationABI, TFunctionName, TMode>({
    abi: attestationStationABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link attestationStationABI}__ and `functionName` set to `"attest"`.
 */
export function useAttestationStationAttest<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof attestationStationABI,
          "attest"
        >["request"]["abi"],
        "attest",
        TMode
      > & { functionName?: "attest" }
    : UseContractWriteConfig<typeof attestationStationABI, "attest", TMode> & {
        abi?: never;
        functionName?: "attest";
      } = {} as any,
) {
  return useContractWrite<typeof attestationStationABI, "attest", TMode>({
    abi: attestationStationABI,
    functionName: "attest",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link attestationStationABI}__.
 */
export function usePrepareAttestationStationWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof attestationStationABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: attestationStationABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof attestationStationABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link attestationStationABI}__ and `functionName` set to `"attest"`.
 */
export function usePrepareAttestationStationAttest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof attestationStationABI, "attest">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: attestationStationABI,
    functionName: "attest",
    ...config,
  } as UsePrepareContractWriteConfig<typeof attestationStationABI, "attest">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link attestationStationABI}__.
 */
export function useAttestationStationEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof attestationStationABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: attestationStationABI,
    ...config,
  } as UseContractEventConfig<typeof attestationStationABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link attestationStationABI}__ and `eventName` set to `"AttestationCreated"`.
 */
export function useAttestationStationAttestationCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof attestationStationABI, "AttestationCreated">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: attestationStationABI,
    eventName: "AttestationCreated",
    ...config,
  } as UseContractEventConfig<typeof attestationStationABI, "AttestationCreated">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof counterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: counterABI,
    ...config,
  } as UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"number"`.
 */
export function useCounterNumber<
  TFunctionName extends "number",
  TSelectData = ReadContractResult<typeof counterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: counterABI,
    functionName: "number",
    ...config,
  } as UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounterWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof counterABI, string>["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof counterABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof counterABI, TFunctionName, TMode>({
    abi: counterABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"increment"`.
 */
export function useCounterIncrement<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof counterABI,
          "increment"
        >["request"]["abi"],
        "increment",
        TMode
      > & { functionName?: "increment" }
    : UseContractWriteConfig<typeof counterABI, "increment", TMode> & {
        abi?: never;
        functionName?: "increment";
      } = {} as any,
) {
  return useContractWrite<typeof counterABI, "increment", TMode>({
    abi: counterABI,
    functionName: "increment",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"setNumber"`.
 */
export function useCounterSetNumber<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof counterABI,
          "setNumber"
        >["request"]["abi"],
        "setNumber",
        TMode
      > & { functionName?: "setNumber" }
    : UseContractWriteConfig<typeof counterABI, "setNumber", TMode> & {
        abi?: never;
        functionName?: "setNumber";
      } = {} as any,
) {
  return useContractWrite<typeof counterABI, "setNumber", TMode>({
    abi: counterABI,
    functionName: "setNumber",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__.
 */
export function usePrepareCounterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof counterABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"increment"`.
 */
export function usePrepareCounterIncrement(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterABI, "increment">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterABI,
    functionName: "increment",
    ...config,
  } as UsePrepareContractWriteConfig<typeof counterABI, "increment">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"setNumber"`.
 */
export function usePrepareCounterSetNumber(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterABI, "setNumber">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterABI,
    functionName: "setNumber",
    ...config,
  } as UsePrepareContractWriteConfig<typeof counterABI, "setNumber">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounterEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof counterABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: counterABI,
    ...config,
  } as UseContractEventConfig<typeof counterABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterABI}__ and `eventName` set to `"Transfer"`.
 */
export function useCounterTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof counterABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: counterABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof counterABI, "Transfer">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseModuleABI}__.
 */
export function useBaseModuleRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof baseModuleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof baseModuleABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: baseModuleABI,
    ...config,
  } as UseContractReadConfig<typeof baseModuleABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseModuleABI}__ and `functionName` set to `"metadataHash"`.
 */
export function useBaseModuleMetadataHash<
  TFunctionName extends "metadataHash",
  TSelectData = ReadContractResult<typeof baseModuleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof baseModuleABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: baseModuleABI,
    functionName: "metadataHash",
    ...config,
  } as UseContractReadConfig<typeof baseModuleABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseModuleABI}__ and `functionName` set to `"metadataProvider"`.
 */
export function useBaseModuleMetadataProvider<
  TFunctionName extends "metadataProvider",
  TSelectData = ReadContractResult<typeof baseModuleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof baseModuleABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: baseModuleABI,
    functionName: "metadataProvider",
    ...config,
  } as UseContractReadConfig<typeof baseModuleABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseModuleABI}__ and `functionName` set to `"name"`.
 */
export function useBaseModuleName<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof baseModuleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof baseModuleABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: baseModuleABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof baseModuleABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseModuleABI}__ and `functionName` set to `"requiresRootAccess"`.
 */
export function useBaseModuleRequiresRootAccess<
  TFunctionName extends "requiresRootAccess",
  TSelectData = ReadContractResult<typeof baseModuleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof baseModuleABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: baseModuleABI,
    functionName: "requiresRootAccess",
    ...config,
  } as UseContractReadConfig<typeof baseModuleABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseModuleABI}__ and `functionName` set to `"retrieveMetadata"`.
 */
export function useBaseModuleRetrieveMetadata<
  TFunctionName extends "retrieveMetadata",
  TSelectData = ReadContractResult<typeof baseModuleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof baseModuleABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: baseModuleABI,
    functionName: "retrieveMetadata",
    ...config,
  } as UseContractReadConfig<typeof baseModuleABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseModuleABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useBaseModuleSupportsInterface<
  TFunctionName extends "supportsInterface",
  TSelectData = ReadContractResult<typeof baseModuleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof baseModuleABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: baseModuleABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<typeof baseModuleABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseModuleABI}__ and `functionName` set to `"version"`.
 */
export function useBaseModuleVersion<
  TFunctionName extends "version",
  TSelectData = ReadContractResult<typeof baseModuleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof baseModuleABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: baseModuleABI,
    functionName: "version",
    ...config,
  } as UseContractReadConfig<typeof baseModuleABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link metadataProviderABI}__.
 */
export function useMetadataProviderRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof metadataProviderABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof metadataProviderABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: metadataProviderABI,
    ...config,
  } as UseContractReadConfig<typeof metadataProviderABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link metadataProviderABI}__ and `functionName` set to `"retrieveMetadata"`.
 */
export function useMetadataProviderRetrieveMetadata<
  TFunctionName extends "retrieveMetadata",
  TSelectData = ReadContractResult<typeof metadataProviderABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof metadataProviderABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: metadataProviderABI,
    functionName: "retrieveMetadata",
    ...config,
  } as UseContractReadConfig<typeof metadataProviderABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSafeABI}__.
 */
export function useISafeWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iSafeABI, string>["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iSafeABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof iSafeABI, TFunctionName, TMode>({
    abi: iSafeABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSafeABI}__ and `functionName` set to `"execTransactionFromModule"`.
 */
export function useISafeExecTransactionFromModule<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSafeABI,
          "execTransactionFromModule"
        >["request"]["abi"],
        "execTransactionFromModule",
        TMode
      > & { functionName?: "execTransactionFromModule" }
    : UseContractWriteConfig<
        typeof iSafeABI,
        "execTransactionFromModule",
        TMode
      > & {
        abi?: never;
        functionName?: "execTransactionFromModule";
      } = {} as any,
) {
  return useContractWrite<typeof iSafeABI, "execTransactionFromModule", TMode>({
    abi: iSafeABI,
    functionName: "execTransactionFromModule",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSafeABI}__ and `functionName` set to `"execTransactionFromModuleReturnData"`.
 */
export function useISafeExecTransactionFromModuleReturnData<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSafeABI,
          "execTransactionFromModuleReturnData"
        >["request"]["abi"],
        "execTransactionFromModuleReturnData",
        TMode
      > & { functionName?: "execTransactionFromModuleReturnData" }
    : UseContractWriteConfig<
        typeof iSafeABI,
        "execTransactionFromModuleReturnData",
        TMode
      > & {
        abi?: never;
        functionName?: "execTransactionFromModuleReturnData";
      } = {} as any,
) {
  return useContractWrite<
    typeof iSafeABI,
    "execTransactionFromModuleReturnData",
    TMode
  >({
    abi: iSafeABI,
    functionName: "execTransactionFromModuleReturnData",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSafeABI}__.
 */
export function usePrepareISafeWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSafeABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSafeABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSafeABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSafeABI}__ and `functionName` set to `"execTransactionFromModule"`.
 */
export function usePrepareISafeExecTransactionFromModule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSafeABI, "execTransactionFromModule">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSafeABI,
    functionName: "execTransactionFromModule",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSafeABI, "execTransactionFromModule">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSafeABI}__ and `functionName` set to `"execTransactionFromModuleReturnData"`.
 */
export function usePrepareISafeExecTransactionFromModuleReturnData(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSafeABI,
      "execTransactionFromModuleReturnData"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSafeABI,
    functionName: "execTransactionFromModuleReturnData",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSafeABI, "execTransactionFromModuleReturnData">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyModuleABI}__.
 */
export function useDummyModuleRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof dummyModuleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof dummyModuleABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyModuleABI,
    ...config,
  } as UseContractReadConfig<typeof dummyModuleABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyModuleABI}__ and `functionName` set to `"metadataHash"`.
 */
export function useDummyModuleMetadataHash<
  TFunctionName extends "metadataHash",
  TSelectData = ReadContractResult<typeof dummyModuleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof dummyModuleABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyModuleABI,
    functionName: "metadataHash",
    ...config,
  } as UseContractReadConfig<typeof dummyModuleABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyModuleABI}__ and `functionName` set to `"metadataProvider"`.
 */
export function useDummyModuleMetadataProvider<
  TFunctionName extends "metadataProvider",
  TSelectData = ReadContractResult<typeof dummyModuleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof dummyModuleABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyModuleABI,
    functionName: "metadataProvider",
    ...config,
  } as UseContractReadConfig<typeof dummyModuleABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyModuleABI}__ and `functionName` set to `"name"`.
 */
export function useDummyModuleName<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof dummyModuleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof dummyModuleABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyModuleABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof dummyModuleABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyModuleABI}__ and `functionName` set to `"relayer"`.
 */
export function useDummyModuleRelayer<
  TFunctionName extends "relayer",
  TSelectData = ReadContractResult<typeof dummyModuleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof dummyModuleABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyModuleABI,
    functionName: "relayer",
    ...config,
  } as UseContractReadConfig<typeof dummyModuleABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyModuleABI}__ and `functionName` set to `"requiresRootAccess"`.
 */
export function useDummyModuleRequiresRootAccess<
  TFunctionName extends "requiresRootAccess",
  TSelectData = ReadContractResult<typeof dummyModuleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof dummyModuleABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyModuleABI,
    functionName: "requiresRootAccess",
    ...config,
  } as UseContractReadConfig<typeof dummyModuleABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyModuleABI}__ and `functionName` set to `"retrieveMetadata"`.
 */
export function useDummyModuleRetrieveMetadata<
  TFunctionName extends "retrieveMetadata",
  TSelectData = ReadContractResult<typeof dummyModuleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof dummyModuleABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyModuleABI,
    functionName: "retrieveMetadata",
    ...config,
  } as UseContractReadConfig<typeof dummyModuleABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyModuleABI}__ and `functionName` set to `"safeConfigs"`.
 */
export function useDummyModuleSafeConfigs<
  TFunctionName extends "safeConfigs",
  TSelectData = ReadContractResult<typeof dummyModuleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof dummyModuleABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyModuleABI,
    functionName: "safeConfigs",
    ...config,
  } as UseContractReadConfig<typeof dummyModuleABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyModuleABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useDummyModuleSupportsInterface<
  TFunctionName extends "supportsInterface",
  TSelectData = ReadContractResult<typeof dummyModuleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof dummyModuleABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyModuleABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<typeof dummyModuleABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dummyModuleABI}__ and `functionName` set to `"version"`.
 */
export function useDummyModuleVersion<
  TFunctionName extends "version",
  TSelectData = ReadContractResult<typeof dummyModuleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof dummyModuleABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: dummyModuleABI,
    functionName: "version",
    ...config,
  } as UseContractReadConfig<typeof dummyModuleABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyModuleABI}__.
 */
export function useDummyModuleWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyModuleABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof dummyModuleABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof dummyModuleABI, TFunctionName, TMode>({
    abi: dummyModuleABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyModuleABI}__ and `functionName` set to `"executeFromPlugin"`.
 */
export function useDummyModuleExecuteFromPlugin<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyModuleABI,
          "executeFromPlugin"
        >["request"]["abi"],
        "executeFromPlugin",
        TMode
      > & { functionName?: "executeFromPlugin" }
    : UseContractWriteConfig<
        typeof dummyModuleABI,
        "executeFromPlugin",
        TMode
      > & {
        abi?: never;
        functionName?: "executeFromPlugin";
      } = {} as any,
) {
  return useContractWrite<typeof dummyModuleABI, "executeFromPlugin", TMode>({
    abi: dummyModuleABI,
    functionName: "executeFromPlugin",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dummyModuleABI}__ and `functionName` set to `"setSafeConfig"`.
 */
export function useDummyModuleSetSafeConfig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof dummyModuleABI,
          "setSafeConfig"
        >["request"]["abi"],
        "setSafeConfig",
        TMode
      > & { functionName?: "setSafeConfig" }
    : UseContractWriteConfig<typeof dummyModuleABI, "setSafeConfig", TMode> & {
        abi?: never;
        functionName?: "setSafeConfig";
      } = {} as any,
) {
  return useContractWrite<typeof dummyModuleABI, "setSafeConfig", TMode>({
    abi: dummyModuleABI,
    functionName: "setSafeConfig",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyModuleABI}__.
 */
export function usePrepareDummyModuleWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dummyModuleABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyModuleABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof dummyModuleABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyModuleABI}__ and `functionName` set to `"executeFromPlugin"`.
 */
export function usePrepareDummyModuleExecuteFromPlugin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dummyModuleABI, "executeFromPlugin">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyModuleABI,
    functionName: "executeFromPlugin",
    ...config,
  } as UsePrepareContractWriteConfig<typeof dummyModuleABI, "executeFromPlugin">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dummyModuleABI}__ and `functionName` set to `"setSafeConfig"`.
 */
export function usePrepareDummyModuleSetSafeConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dummyModuleABI, "setSafeConfig">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dummyModuleABI,
    functionName: "setSafeConfig",
    ...config,
  } as UsePrepareContractWriteConfig<typeof dummyModuleABI, "setSafeConfig">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyModuleABI}__.
 */
export function useDummyModuleEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof dummyModuleABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyModuleABI,
    ...config,
  } as UseContractEventConfig<typeof dummyModuleABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dummyModuleABI}__ and `eventName` set to `"PluginTransactionExec"`.
 */
export function useDummyModulePluginTransactionExecEvent(
  config: Omit<
    UseContractEventConfig<typeof dummyModuleABI, "PluginTransactionExec">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: dummyModuleABI,
    eventName: "PluginTransactionExec",
    ...config,
  } as UseContractEventConfig<typeof dummyModuleABI, "PluginTransactionExec">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<
  TFunctionName extends "allowance",
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<
  TFunctionName extends "decimals",
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<
  TFunctionName extends "symbol",
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc20ABI, string>["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20ABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, TFunctionName, TMode>({
    abi: erc20ABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          "approve"
        >["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<typeof erc20ABI, "approve", TMode> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, "approve", TMode>({
    abi: erc20ABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20DecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          "decreaseAllowance"
        >["request"]["abi"],
        "decreaseAllowance",
        TMode
      > & { functionName?: "decreaseAllowance" }
    : UseContractWriteConfig<typeof erc20ABI, "decreaseAllowance", TMode> & {
        abi?: never;
        functionName?: "decreaseAllowance";
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, "decreaseAllowance", TMode>({
    abi: erc20ABI,
    functionName: "decreaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20IncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          "increaseAllowance"
        >["request"]["abi"],
        "increaseAllowance",
        TMode
      > & { functionName?: "increaseAllowance" }
    : UseContractWriteConfig<typeof erc20ABI, "increaseAllowance", TMode> & {
        abi?: never;
        functionName?: "increaseAllowance";
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, "increaseAllowance", TMode>({
    abi: erc20ABI,
    functionName: "increaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          "transfer"
        >["request"]["abi"],
        "transfer",
        TMode
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<typeof erc20ABI, "transfer", TMode> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, "transfer", TMode>({
    abi: erc20ABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20ABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<typeof erc20ABI, "transferFrom", TMode> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<typeof erc20ABI, "transferFrom", TMode>({
    abi: erc20ABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20DecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "decreaseAllowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "decreaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "decreaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20IncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "increaseAllowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "increaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "increaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "transfer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, "Transfer">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function useErc20BurnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableABI,
    ...config,
  } as UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20BurnableAllowance<
  TFunctionName extends "allowance",
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BurnableBalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20BurnableDecimals<
  TFunctionName extends "decimals",
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"name"`.
 */
export function useErc20BurnableName<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20BurnableSymbol<
  TFunctionName extends "symbol",
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20BurnableTotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof erc20BurnableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20BurnableABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof erc20BurnableABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function useErc20BurnableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc20BurnableABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof erc20BurnableABI, TFunctionName, TMode>({
    abi: erc20BurnableABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20BurnableApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableABI,
          "approve"
        >["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<typeof erc20BurnableABI, "approve", TMode> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<typeof erc20BurnableABI, "approve", TMode>({
    abi: erc20BurnableABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burn"`.
 */
export function useErc20BurnableBurn<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableABI,
          "burn"
        >["request"]["abi"],
        "burn",
        TMode
      > & { functionName?: "burn" }
    : UseContractWriteConfig<typeof erc20BurnableABI, "burn", TMode> & {
        abi?: never;
        functionName?: "burn";
      } = {} as any,
) {
  return useContractWrite<typeof erc20BurnableABI, "burn", TMode>({
    abi: erc20BurnableABI,
    functionName: "burn",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burnFrom"`.
 */
export function useErc20BurnableBurnFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableABI,
          "burnFrom"
        >["request"]["abi"],
        "burnFrom",
        TMode
      > & { functionName?: "burnFrom" }
    : UseContractWriteConfig<typeof erc20BurnableABI, "burnFrom", TMode> & {
        abi?: never;
        functionName?: "burnFrom";
      } = {} as any,
) {
  return useContractWrite<typeof erc20BurnableABI, "burnFrom", TMode>({
    abi: erc20BurnableABI,
    functionName: "burnFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20BurnableDecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableABI,
          "decreaseAllowance"
        >["request"]["abi"],
        "decreaseAllowance",
        TMode
      > & { functionName?: "decreaseAllowance" }
    : UseContractWriteConfig<
        typeof erc20BurnableABI,
        "decreaseAllowance",
        TMode
      > & {
        abi?: never;
        functionName?: "decreaseAllowance";
      } = {} as any,
) {
  return useContractWrite<typeof erc20BurnableABI, "decreaseAllowance", TMode>({
    abi: erc20BurnableABI,
    functionName: "decreaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20BurnableIncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableABI,
          "increaseAllowance"
        >["request"]["abi"],
        "increaseAllowance",
        TMode
      > & { functionName?: "increaseAllowance" }
    : UseContractWriteConfig<
        typeof erc20BurnableABI,
        "increaseAllowance",
        TMode
      > & {
        abi?: never;
        functionName?: "increaseAllowance";
      } = {} as any,
) {
  return useContractWrite<typeof erc20BurnableABI, "increaseAllowance", TMode>({
    abi: erc20BurnableABI,
    functionName: "increaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20BurnableTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableABI,
          "transfer"
        >["request"]["abi"],
        "transfer",
        TMode
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<typeof erc20BurnableABI, "transfer", TMode> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any,
) {
  return useContractWrite<typeof erc20BurnableABI, "transfer", TMode>({
    abi: erc20BurnableABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20BurnableTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20BurnableABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<typeof erc20BurnableABI, "transferFrom", TMode> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<typeof erc20BurnableABI, "transferFrom", TMode>({
    abi: erc20BurnableABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function usePrepareErc20BurnableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20BurnableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareErc20BurnableBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, "burn">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: "burn",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, "burn">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"burnFrom"`.
 */
export function usePrepareErc20BurnableBurnFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, "burnFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: "burnFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, "burnFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20BurnableDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, "decreaseAllowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: "decreaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, "decreaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20BurnableIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, "increaseAllowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: "increaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, "increaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20BurnableTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, "transfer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20BurnableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20BurnableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20BurnableABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20BurnableABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20BurnableABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableABI}__.
 */
export function useErc20BurnableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20BurnableABI,
    ...config,
  } as UseContractEventConfig<typeof erc20BurnableABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20BurnableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20BurnableABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof erc20BurnableABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20BurnableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20BurnableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20BurnableABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20BurnableABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof erc20BurnableABI, "Transfer">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__.
 */
export function useErc20PresetFixedSupplyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof erc20PresetFixedSupplyABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PresetFixedSupplyABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetFixedSupplyABI,
    ...config,
  } as UseContractReadConfig<typeof erc20PresetFixedSupplyABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20PresetFixedSupplyAllowance<
  TFunctionName extends "allowance",
  TSelectData = ReadContractResult<
    typeof erc20PresetFixedSupplyABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PresetFixedSupplyABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetFixedSupplyABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof erc20PresetFixedSupplyABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20PresetFixedSupplyBalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<
    typeof erc20PresetFixedSupplyABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PresetFixedSupplyABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetFixedSupplyABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof erc20PresetFixedSupplyABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20PresetFixedSupplyDecimals<
  TFunctionName extends "decimals",
  TSelectData = ReadContractResult<
    typeof erc20PresetFixedSupplyABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PresetFixedSupplyABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetFixedSupplyABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof erc20PresetFixedSupplyABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"name"`.
 */
export function useErc20PresetFixedSupplyName<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<
    typeof erc20PresetFixedSupplyABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PresetFixedSupplyABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetFixedSupplyABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof erc20PresetFixedSupplyABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20PresetFixedSupplySymbol<
  TFunctionName extends "symbol",
  TSelectData = ReadContractResult<
    typeof erc20PresetFixedSupplyABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PresetFixedSupplyABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetFixedSupplyABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof erc20PresetFixedSupplyABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20PresetFixedSupplyTotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<
    typeof erc20PresetFixedSupplyABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc20PresetFixedSupplyABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: erc20PresetFixedSupplyABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof erc20PresetFixedSupplyABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__.
 */
export function useErc20PresetFixedSupplyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20PresetFixedSupplyABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof erc20PresetFixedSupplyABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20PresetFixedSupplyABI,
    TFunctionName,
    TMode
  >({ abi: erc20PresetFixedSupplyABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20PresetFixedSupplyApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20PresetFixedSupplyABI,
          "approve"
        >["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<
        typeof erc20PresetFixedSupplyABI,
        "approve",
        TMode
      > & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<typeof erc20PresetFixedSupplyABI, "approve", TMode>({
    abi: erc20PresetFixedSupplyABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"burn"`.
 */
export function useErc20PresetFixedSupplyBurn<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20PresetFixedSupplyABI,
          "burn"
        >["request"]["abi"],
        "burn",
        TMode
      > & { functionName?: "burn" }
    : UseContractWriteConfig<
        typeof erc20PresetFixedSupplyABI,
        "burn",
        TMode
      > & {
        abi?: never;
        functionName?: "burn";
      } = {} as any,
) {
  return useContractWrite<typeof erc20PresetFixedSupplyABI, "burn", TMode>({
    abi: erc20PresetFixedSupplyABI,
    functionName: "burn",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"burnFrom"`.
 */
export function useErc20PresetFixedSupplyBurnFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20PresetFixedSupplyABI,
          "burnFrom"
        >["request"]["abi"],
        "burnFrom",
        TMode
      > & { functionName?: "burnFrom" }
    : UseContractWriteConfig<
        typeof erc20PresetFixedSupplyABI,
        "burnFrom",
        TMode
      > & {
        abi?: never;
        functionName?: "burnFrom";
      } = {} as any,
) {
  return useContractWrite<typeof erc20PresetFixedSupplyABI, "burnFrom", TMode>({
    abi: erc20PresetFixedSupplyABI,
    functionName: "burnFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20PresetFixedSupplyDecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20PresetFixedSupplyABI,
          "decreaseAllowance"
        >["request"]["abi"],
        "decreaseAllowance",
        TMode
      > & { functionName?: "decreaseAllowance" }
    : UseContractWriteConfig<
        typeof erc20PresetFixedSupplyABI,
        "decreaseAllowance",
        TMode
      > & {
        abi?: never;
        functionName?: "decreaseAllowance";
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20PresetFixedSupplyABI,
    "decreaseAllowance",
    TMode
  >({
    abi: erc20PresetFixedSupplyABI,
    functionName: "decreaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20PresetFixedSupplyIncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20PresetFixedSupplyABI,
          "increaseAllowance"
        >["request"]["abi"],
        "increaseAllowance",
        TMode
      > & { functionName?: "increaseAllowance" }
    : UseContractWriteConfig<
        typeof erc20PresetFixedSupplyABI,
        "increaseAllowance",
        TMode
      > & {
        abi?: never;
        functionName?: "increaseAllowance";
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20PresetFixedSupplyABI,
    "increaseAllowance",
    TMode
  >({
    abi: erc20PresetFixedSupplyABI,
    functionName: "increaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20PresetFixedSupplyTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20PresetFixedSupplyABI,
          "transfer"
        >["request"]["abi"],
        "transfer",
        TMode
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<
        typeof erc20PresetFixedSupplyABI,
        "transfer",
        TMode
      > & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any,
) {
  return useContractWrite<typeof erc20PresetFixedSupplyABI, "transfer", TMode>({
    abi: erc20PresetFixedSupplyABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20PresetFixedSupplyTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc20PresetFixedSupplyABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<
        typeof erc20PresetFixedSupplyABI,
        "transferFrom",
        TMode
      > & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<
    typeof erc20PresetFixedSupplyABI,
    "transferFrom",
    TMode
  >({
    abi: erc20PresetFixedSupplyABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__.
 */
export function usePrepareErc20PresetFixedSupplyWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PresetFixedSupplyABI,
      TFunctionName
    >,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetFixedSupplyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetFixedSupplyABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20PresetFixedSupplyApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PresetFixedSupplyABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetFixedSupplyABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetFixedSupplyABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareErc20PresetFixedSupplyBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PresetFixedSupplyABI, "burn">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetFixedSupplyABI,
    functionName: "burn",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetFixedSupplyABI, "burn">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"burnFrom"`.
 */
export function usePrepareErc20PresetFixedSupplyBurnFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PresetFixedSupplyABI, "burnFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetFixedSupplyABI,
    functionName: "burnFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetFixedSupplyABI, "burnFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20PresetFixedSupplyDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PresetFixedSupplyABI,
      "decreaseAllowance"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetFixedSupplyABI,
    functionName: "decreaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetFixedSupplyABI, "decreaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20PresetFixedSupplyIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PresetFixedSupplyABI,
      "increaseAllowance"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetFixedSupplyABI,
    functionName: "increaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetFixedSupplyABI, "increaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20PresetFixedSupplyTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20PresetFixedSupplyABI, "transfer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetFixedSupplyABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetFixedSupplyABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20PresetFixedSupplyTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc20PresetFixedSupplyABI,
      "transferFrom"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20PresetFixedSupplyABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20PresetFixedSupplyABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__.
 */
export function useErc20PresetFixedSupplyEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20PresetFixedSupplyABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PresetFixedSupplyABI,
    ...config,
  } as UseContractEventConfig<typeof erc20PresetFixedSupplyABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20PresetFixedSupplyApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PresetFixedSupplyABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PresetFixedSupplyABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof erc20PresetFixedSupplyABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20PresetFixedSupplyABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20PresetFixedSupplyTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20PresetFixedSupplyABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20PresetFixedSupplyABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof erc20PresetFixedSupplyABI, "Transfer">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fallbackManagerABI}__.
 */
export function useFallbackManagerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fallbackManagerABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof fallbackManagerABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof fallbackManagerABI, TFunctionName, TMode>({
    abi: fallbackManagerABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link fallbackManagerABI}__ and `functionName` set to `"setFallbackHandler"`.
 */
export function useFallbackManagerSetFallbackHandler<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof fallbackManagerABI,
          "setFallbackHandler"
        >["request"]["abi"],
        "setFallbackHandler",
        TMode
      > & { functionName?: "setFallbackHandler" }
    : UseContractWriteConfig<
        typeof fallbackManagerABI,
        "setFallbackHandler",
        TMode
      > & {
        abi?: never;
        functionName?: "setFallbackHandler";
      } = {} as any,
) {
  return useContractWrite<
    typeof fallbackManagerABI,
    "setFallbackHandler",
    TMode
  >({
    abi: fallbackManagerABI,
    functionName: "setFallbackHandler",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fallbackManagerABI}__.
 */
export function usePrepareFallbackManagerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof fallbackManagerABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: fallbackManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof fallbackManagerABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link fallbackManagerABI}__ and `functionName` set to `"setFallbackHandler"`.
 */
export function usePrepareFallbackManagerSetFallbackHandler(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof fallbackManagerABI,
      "setFallbackHandler"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: fallbackManagerABI,
    functionName: "setFallbackHandler",
    ...config,
  } as UsePrepareContractWriteConfig<typeof fallbackManagerABI, "setFallbackHandler">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link fallbackManagerABI}__.
 */
export function useFallbackManagerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof fallbackManagerABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: fallbackManagerABI,
    ...config,
  } as UseContractEventConfig<typeof fallbackManagerABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link fallbackManagerABI}__ and `eventName` set to `"ChangedFallbackHandler"`.
 */
export function useFallbackManagerChangedFallbackHandlerEvent(
  config: Omit<
    UseContractEventConfig<typeof fallbackManagerABI, "ChangedFallbackHandler">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: fallbackManagerABI,
    eventName: "ChangedFallbackHandler",
    ...config,
  } as UseContractEventConfig<typeof fallbackManagerABI, "ChangedFallbackHandler">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseGuardABI}__.
 */
export function useBaseGuardRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof baseGuardABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof baseGuardABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: baseGuardABI,
    ...config,
  } as UseContractReadConfig<typeof baseGuardABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseGuardABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useBaseGuardSupportsInterface<
  TFunctionName extends "supportsInterface",
  TSelectData = ReadContractResult<typeof baseGuardABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof baseGuardABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: baseGuardABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<typeof baseGuardABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseGuardABI}__.
 */
export function useBaseGuardWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof baseGuardABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof baseGuardABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof baseGuardABI, TFunctionName, TMode>({
    abi: baseGuardABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseGuardABI}__ and `functionName` set to `"checkAfterExecution"`.
 */
export function useBaseGuardCheckAfterExecution<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof baseGuardABI,
          "checkAfterExecution"
        >["request"]["abi"],
        "checkAfterExecution",
        TMode
      > & { functionName?: "checkAfterExecution" }
    : UseContractWriteConfig<
        typeof baseGuardABI,
        "checkAfterExecution",
        TMode
      > & {
        abi?: never;
        functionName?: "checkAfterExecution";
      } = {} as any,
) {
  return useContractWrite<typeof baseGuardABI, "checkAfterExecution", TMode>({
    abi: baseGuardABI,
    functionName: "checkAfterExecution",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseGuardABI}__ and `functionName` set to `"checkModuleTransaction"`.
 */
export function useBaseGuardCheckModuleTransaction<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof baseGuardABI,
          "checkModuleTransaction"
        >["request"]["abi"],
        "checkModuleTransaction",
        TMode
      > & { functionName?: "checkModuleTransaction" }
    : UseContractWriteConfig<
        typeof baseGuardABI,
        "checkModuleTransaction",
        TMode
      > & {
        abi?: never;
        functionName?: "checkModuleTransaction";
      } = {} as any,
) {
  return useContractWrite<typeof baseGuardABI, "checkModuleTransaction", TMode>(
    {
      abi: baseGuardABI,
      functionName: "checkModuleTransaction",
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseGuardABI}__ and `functionName` set to `"checkTransaction"`.
 */
export function useBaseGuardCheckTransaction<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof baseGuardABI,
          "checkTransaction"
        >["request"]["abi"],
        "checkTransaction",
        TMode
      > & { functionName?: "checkTransaction" }
    : UseContractWriteConfig<typeof baseGuardABI, "checkTransaction", TMode> & {
        abi?: never;
        functionName?: "checkTransaction";
      } = {} as any,
) {
  return useContractWrite<typeof baseGuardABI, "checkTransaction", TMode>({
    abi: baseGuardABI,
    functionName: "checkTransaction",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseGuardABI}__.
 */
export function usePrepareBaseGuardWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseGuardABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: baseGuardABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof baseGuardABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseGuardABI}__ and `functionName` set to `"checkAfterExecution"`.
 */
export function usePrepareBaseGuardCheckAfterExecution(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseGuardABI, "checkAfterExecution">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: baseGuardABI,
    functionName: "checkAfterExecution",
    ...config,
  } as UsePrepareContractWriteConfig<typeof baseGuardABI, "checkAfterExecution">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseGuardABI}__ and `functionName` set to `"checkModuleTransaction"`.
 */
export function usePrepareBaseGuardCheckModuleTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof baseGuardABI,
      "checkModuleTransaction"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: baseGuardABI,
    functionName: "checkModuleTransaction",
    ...config,
  } as UsePrepareContractWriteConfig<typeof baseGuardABI, "checkModuleTransaction">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseGuardABI}__ and `functionName` set to `"checkTransaction"`.
 */
export function usePrepareBaseGuardCheckTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseGuardABI, "checkTransaction">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: baseGuardABI,
    functionName: "checkTransaction",
    ...config,
  } as UsePrepareContractWriteConfig<typeof baseGuardABI, "checkTransaction">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link guardABI}__.
 */
export function useGuardRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof guardABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof guardABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({ abi: guardABI, ...config } as UseContractReadConfig<
    typeof guardABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link guardABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useGuardSupportsInterface<
  TFunctionName extends "supportsInterface",
  TSelectData = ReadContractResult<typeof guardABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof guardABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: guardABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<typeof guardABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link guardABI}__.
 */
export function useGuardWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof guardABI, string>["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof guardABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof guardABI, TFunctionName, TMode>({
    abi: guardABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link guardABI}__ and `functionName` set to `"checkAfterExecution"`.
 */
export function useGuardCheckAfterExecution<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof guardABI,
          "checkAfterExecution"
        >["request"]["abi"],
        "checkAfterExecution",
        TMode
      > & { functionName?: "checkAfterExecution" }
    : UseContractWriteConfig<typeof guardABI, "checkAfterExecution", TMode> & {
        abi?: never;
        functionName?: "checkAfterExecution";
      } = {} as any,
) {
  return useContractWrite<typeof guardABI, "checkAfterExecution", TMode>({
    abi: guardABI,
    functionName: "checkAfterExecution",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link guardABI}__ and `functionName` set to `"checkModuleTransaction"`.
 */
export function useGuardCheckModuleTransaction<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof guardABI,
          "checkModuleTransaction"
        >["request"]["abi"],
        "checkModuleTransaction",
        TMode
      > & { functionName?: "checkModuleTransaction" }
    : UseContractWriteConfig<
        typeof guardABI,
        "checkModuleTransaction",
        TMode
      > & {
        abi?: never;
        functionName?: "checkModuleTransaction";
      } = {} as any,
) {
  return useContractWrite<typeof guardABI, "checkModuleTransaction", TMode>({
    abi: guardABI,
    functionName: "checkModuleTransaction",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link guardABI}__ and `functionName` set to `"checkTransaction"`.
 */
export function useGuardCheckTransaction<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof guardABI,
          "checkTransaction"
        >["request"]["abi"],
        "checkTransaction",
        TMode
      > & { functionName?: "checkTransaction" }
    : UseContractWriteConfig<typeof guardABI, "checkTransaction", TMode> & {
        abi?: never;
        functionName?: "checkTransaction";
      } = {} as any,
) {
  return useContractWrite<typeof guardABI, "checkTransaction", TMode>({
    abi: guardABI,
    functionName: "checkTransaction",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link guardABI}__.
 */
export function usePrepareGuardWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof guardABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: guardABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof guardABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link guardABI}__ and `functionName` set to `"checkAfterExecution"`.
 */
export function usePrepareGuardCheckAfterExecution(
  config: Omit<
    UsePrepareContractWriteConfig<typeof guardABI, "checkAfterExecution">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: guardABI,
    functionName: "checkAfterExecution",
    ...config,
  } as UsePrepareContractWriteConfig<typeof guardABI, "checkAfterExecution">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link guardABI}__ and `functionName` set to `"checkModuleTransaction"`.
 */
export function usePrepareGuardCheckModuleTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof guardABI, "checkModuleTransaction">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: guardABI,
    functionName: "checkModuleTransaction",
    ...config,
  } as UsePrepareContractWriteConfig<typeof guardABI, "checkModuleTransaction">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link guardABI}__ and `functionName` set to `"checkTransaction"`.
 */
export function usePrepareGuardCheckTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof guardABI, "checkTransaction">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: guardABI,
    functionName: "checkTransaction",
    ...config,
  } as UsePrepareContractWriteConfig<typeof guardABI, "checkTransaction">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link guardManagerABI}__.
 */
export function useGuardManagerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof guardManagerABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof guardManagerABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof guardManagerABI, TFunctionName, TMode>({
    abi: guardManagerABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link guardManagerABI}__ and `functionName` set to `"setGuard"`.
 */
export function useGuardManagerSetGuard<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof guardManagerABI,
          "setGuard"
        >["request"]["abi"],
        "setGuard",
        TMode
      > & { functionName?: "setGuard" }
    : UseContractWriteConfig<typeof guardManagerABI, "setGuard", TMode> & {
        abi?: never;
        functionName?: "setGuard";
      } = {} as any,
) {
  return useContractWrite<typeof guardManagerABI, "setGuard", TMode>({
    abi: guardManagerABI,
    functionName: "setGuard",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link guardManagerABI}__.
 */
export function usePrepareGuardManagerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof guardManagerABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: guardManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof guardManagerABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link guardManagerABI}__ and `functionName` set to `"setGuard"`.
 */
export function usePrepareGuardManagerSetGuard(
  config: Omit<
    UsePrepareContractWriteConfig<typeof guardManagerABI, "setGuard">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: guardManagerABI,
    functionName: "setGuard",
    ...config,
  } as UsePrepareContractWriteConfig<typeof guardManagerABI, "setGuard">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link guardManagerABI}__.
 */
export function useGuardManagerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof guardManagerABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: guardManagerABI,
    ...config,
  } as UseContractEventConfig<typeof guardManagerABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link guardManagerABI}__ and `eventName` set to `"ChangedGuard"`.
 */
export function useGuardManagerChangedGuardEvent(
  config: Omit<
    UseContractEventConfig<typeof guardManagerABI, "ChangedGuard">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: guardManagerABI,
    eventName: "ChangedGuard",
    ...config,
  } as UseContractEventConfig<typeof guardManagerABI, "ChangedGuard">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link harvesterPluginABI}__.
 */
export function useHarvesterPluginRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof harvesterPluginABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof harvesterPluginABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: harvesterPluginABI,
    ...config,
  } as UseContractReadConfig<typeof harvesterPluginABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link harvesterPluginABI}__ and `functionName` set to `"checkUpkeep"`.
 */
export function useHarvesterPluginCheckUpkeep<
  TFunctionName extends "checkUpkeep",
  TSelectData = ReadContractResult<typeof harvesterPluginABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof harvesterPluginABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: harvesterPluginABI,
    functionName: "checkUpkeep",
    ...config,
  } as UseContractReadConfig<typeof harvesterPluginABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link harvesterPluginABI}__ and `functionName` set to `"getSafes"`.
 */
export function useHarvesterPluginGetSafes<
  TFunctionName extends "getSafes",
  TSelectData = ReadContractResult<typeof harvesterPluginABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof harvesterPluginABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: harvesterPluginABI,
    functionName: "getSafes",
    ...config,
  } as UseContractReadConfig<typeof harvesterPluginABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link harvesterPluginABI}__ and `functionName` set to `"metadataHash"`.
 */
export function useHarvesterPluginMetadataHash<
  TFunctionName extends "metadataHash",
  TSelectData = ReadContractResult<typeof harvesterPluginABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof harvesterPluginABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: harvesterPluginABI,
    functionName: "metadataHash",
    ...config,
  } as UseContractReadConfig<typeof harvesterPluginABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link harvesterPluginABI}__ and `functionName` set to `"metadataProvider"`.
 */
export function useHarvesterPluginMetadataProvider<
  TFunctionName extends "metadataProvider",
  TSelectData = ReadContractResult<typeof harvesterPluginABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof harvesterPluginABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: harvesterPluginABI,
    functionName: "metadataProvider",
    ...config,
  } as UseContractReadConfig<typeof harvesterPluginABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link harvesterPluginABI}__ and `functionName` set to `"name"`.
 */
export function useHarvesterPluginName<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof harvesterPluginABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof harvesterPluginABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: harvesterPluginABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof harvesterPluginABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link harvesterPluginABI}__ and `functionName` set to `"requiresRootAccess"`.
 */
export function useHarvesterPluginRequiresRootAccess<
  TFunctionName extends "requiresRootAccess",
  TSelectData = ReadContractResult<typeof harvesterPluginABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof harvesterPluginABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: harvesterPluginABI,
    functionName: "requiresRootAccess",
    ...config,
  } as UseContractReadConfig<typeof harvesterPluginABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link harvesterPluginABI}__ and `functionName` set to `"retrieveMetadata"`.
 */
export function useHarvesterPluginRetrieveMetadata<
  TFunctionName extends "retrieveMetadata",
  TSelectData = ReadContractResult<typeof harvesterPluginABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof harvesterPluginABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: harvesterPluginABI,
    functionName: "retrieveMetadata",
    ...config,
  } as UseContractReadConfig<typeof harvesterPluginABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link harvesterPluginABI}__ and `functionName` set to `"safeConfigs"`.
 */
export function useHarvesterPluginSafeConfigs<
  TFunctionName extends "safeConfigs",
  TSelectData = ReadContractResult<typeof harvesterPluginABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof harvesterPluginABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: harvesterPluginABI,
    functionName: "safeConfigs",
    ...config,
  } as UseContractReadConfig<typeof harvesterPluginABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link harvesterPluginABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useHarvesterPluginSupportsInterface<
  TFunctionName extends "supportsInterface",
  TSelectData = ReadContractResult<typeof harvesterPluginABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof harvesterPluginABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: harvesterPluginABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<typeof harvesterPluginABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link harvesterPluginABI}__ and `functionName` set to `"version"`.
 */
export function useHarvesterPluginVersion<
  TFunctionName extends "version",
  TSelectData = ReadContractResult<typeof harvesterPluginABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof harvesterPluginABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: harvesterPluginABI,
    functionName: "version",
    ...config,
  } as UseContractReadConfig<typeof harvesterPluginABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link harvesterPluginABI}__.
 */
export function useHarvesterPluginWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof harvesterPluginABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof harvesterPluginABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof harvesterPluginABI, TFunctionName, TMode>({
    abi: harvesterPluginABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link harvesterPluginABI}__ and `functionName` set to `"addRelayer"`.
 */
export function useHarvesterPluginAddRelayer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof harvesterPluginABI,
          "addRelayer"
        >["request"]["abi"],
        "addRelayer",
        TMode
      > & { functionName?: "addRelayer" }
    : UseContractWriteConfig<typeof harvesterPluginABI, "addRelayer", TMode> & {
        abi?: never;
        functionName?: "addRelayer";
      } = {} as any,
) {
  return useContractWrite<typeof harvesterPluginABI, "addRelayer", TMode>({
    abi: harvesterPluginABI,
    functionName: "addRelayer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link harvesterPluginABI}__ and `functionName` set to `"performUpkeep"`.
 */
export function useHarvesterPluginPerformUpkeep<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof harvesterPluginABI,
          "performUpkeep"
        >["request"]["abi"],
        "performUpkeep",
        TMode
      > & { functionName?: "performUpkeep" }
    : UseContractWriteConfig<
        typeof harvesterPluginABI,
        "performUpkeep",
        TMode
      > & {
        abi?: never;
        functionName?: "performUpkeep";
      } = {} as any,
) {
  return useContractWrite<typeof harvesterPluginABI, "performUpkeep", TMode>({
    abi: harvesterPluginABI,
    functionName: "performUpkeep",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link harvesterPluginABI}__ and `functionName` set to `"removeRelayer"`.
 */
export function useHarvesterPluginRemoveRelayer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof harvesterPluginABI,
          "removeRelayer"
        >["request"]["abi"],
        "removeRelayer",
        TMode
      > & { functionName?: "removeRelayer" }
    : UseContractWriteConfig<
        typeof harvesterPluginABI,
        "removeRelayer",
        TMode
      > & {
        abi?: never;
        functionName?: "removeRelayer";
      } = {} as any,
) {
  return useContractWrite<typeof harvesterPluginABI, "removeRelayer", TMode>({
    abi: harvesterPluginABI,
    functionName: "removeRelayer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link harvesterPluginABI}__ and `functionName` set to `"setSafeConfig"`.
 */
export function useHarvesterPluginSetSafeConfig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof harvesterPluginABI,
          "setSafeConfig"
        >["request"]["abi"],
        "setSafeConfig",
        TMode
      > & { functionName?: "setSafeConfig" }
    : UseContractWriteConfig<
        typeof harvesterPluginABI,
        "setSafeConfig",
        TMode
      > & {
        abi?: never;
        functionName?: "setSafeConfig";
      } = {} as any,
) {
  return useContractWrite<typeof harvesterPluginABI, "setSafeConfig", TMode>({
    abi: harvesterPluginABI,
    functionName: "setSafeConfig",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link harvesterPluginABI}__.
 */
export function usePrepareHarvesterPluginWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof harvesterPluginABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: harvesterPluginABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof harvesterPluginABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link harvesterPluginABI}__ and `functionName` set to `"addRelayer"`.
 */
export function usePrepareHarvesterPluginAddRelayer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof harvesterPluginABI, "addRelayer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: harvesterPluginABI,
    functionName: "addRelayer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof harvesterPluginABI, "addRelayer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link harvesterPluginABI}__ and `functionName` set to `"performUpkeep"`.
 */
export function usePrepareHarvesterPluginPerformUpkeep(
  config: Omit<
    UsePrepareContractWriteConfig<typeof harvesterPluginABI, "performUpkeep">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: harvesterPluginABI,
    functionName: "performUpkeep",
    ...config,
  } as UsePrepareContractWriteConfig<typeof harvesterPluginABI, "performUpkeep">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link harvesterPluginABI}__ and `functionName` set to `"removeRelayer"`.
 */
export function usePrepareHarvesterPluginRemoveRelayer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof harvesterPluginABI, "removeRelayer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: harvesterPluginABI,
    functionName: "removeRelayer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof harvesterPluginABI, "removeRelayer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link harvesterPluginABI}__ and `functionName` set to `"setSafeConfig"`.
 */
export function usePrepareHarvesterPluginSetSafeConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof harvesterPluginABI, "setSafeConfig">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: harvesterPluginABI,
    functionName: "setSafeConfig",
    ...config,
  } as UsePrepareContractWriteConfig<typeof harvesterPluginABI, "setSafeConfig">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link harvesterPluginABI}__.
 */
export function useHarvesterPluginEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof harvesterPluginABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: harvesterPluginABI,
    ...config,
  } as UseContractEventConfig<typeof harvesterPluginABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link harvesterPluginABI}__ and `eventName` set to `"PluginTransactionExec"`.
 */
export function useHarvesterPluginPluginTransactionExecEvent(
  config: Omit<
    UseContractEventConfig<typeof harvesterPluginABI, "PluginTransactionExec">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: harvesterPluginABI,
    eventName: "PluginTransactionExec",
    ...config,
  } as UseContractEventConfig<typeof harvesterPluginABI, "PluginTransactionExec">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link harvesterPluginABI}__ and `eventName` set to `"RelayerAdded"`.
 */
export function useHarvesterPluginRelayerAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof harvesterPluginABI, "RelayerAdded">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: harvesterPluginABI,
    eventName: "RelayerAdded",
    ...config,
  } as UseContractEventConfig<typeof harvesterPluginABI, "RelayerAdded">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link harvesterPluginABI}__ and `eventName` set to `"RelayerRemoved"`.
 */
export function useHarvesterPluginRelayerRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof harvesterPluginABI, "RelayerRemoved">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: harvesterPluginABI,
    eventName: "RelayerRemoved",
    ...config,
  } as UseContractEventConfig<typeof harvesterPluginABI, "RelayerRemoved">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hooksManagerABI}__.
 */
export function useHooksManagerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof hooksManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hooksManagerABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: hooksManagerABI,
    ...config,
  } as UseContractReadConfig<typeof hooksManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hooksManagerABI}__ and `functionName` set to `"enabledHooks"`.
 */
export function useHooksManagerEnabledHooks<
  TFunctionName extends "enabledHooks",
  TSelectData = ReadContractResult<typeof hooksManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hooksManagerABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hooksManagerABI,
    functionName: "enabledHooks",
    ...config,
  } as UseContractReadConfig<typeof hooksManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hooksManagerABI}__ and `functionName` set to `"getEnabledHooks"`.
 */
export function useHooksManagerGetEnabledHooks<
  TFunctionName extends "getEnabledHooks",
  TSelectData = ReadContractResult<typeof hooksManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof hooksManagerABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: hooksManagerABI,
    functionName: "getEnabledHooks",
    ...config,
  } as UseContractReadConfig<typeof hooksManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hooksManagerABI}__.
 */
export function useHooksManagerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof hooksManagerABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof hooksManagerABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof hooksManagerABI, TFunctionName, TMode>({
    abi: hooksManagerABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hooksManagerABI}__ and `functionName` set to `"setHooks"`.
 */
export function useHooksManagerSetHooks<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof hooksManagerABI,
          "setHooks"
        >["request"]["abi"],
        "setHooks",
        TMode
      > & { functionName?: "setHooks" }
    : UseContractWriteConfig<typeof hooksManagerABI, "setHooks", TMode> & {
        abi?: never;
        functionName?: "setHooks";
      } = {} as any,
) {
  return useContractWrite<typeof hooksManagerABI, "setHooks", TMode>({
    abi: hooksManagerABI,
    functionName: "setHooks",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hooksManagerABI}__.
 */
export function usePrepareHooksManagerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hooksManagerABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hooksManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof hooksManagerABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hooksManagerABI}__ and `functionName` set to `"setHooks"`.
 */
export function usePrepareHooksManagerSetHooks(
  config: Omit<
    UsePrepareContractWriteConfig<typeof hooksManagerABI, "setHooks">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: hooksManagerABI,
    functionName: "setHooks",
    ...config,
  } as UsePrepareContractWriteConfig<typeof hooksManagerABI, "setHooks">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hooksManagerABI}__.
 */
export function useHooksManagerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof hooksManagerABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: hooksManagerABI,
    ...config,
  } as UseContractEventConfig<typeof hooksManagerABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hooksManagerABI}__ and `eventName` set to `"HooksChanged"`.
 */
export function useHooksManagerHooksChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof hooksManagerABI, "HooksChanged">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: hooksManagerABI,
    eventName: "HooksChanged",
    ...config,
  } as UseContractEventConfig<typeof hooksManagerABI, "HooksChanged">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__.
 */
export function useIerc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165SupportsInterface<
  TFunctionName extends "supportsInterface",
  TSelectData = ReadContractResult<typeof ierc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165ABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<typeof ierc165ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({ abi: ierc20ABI, ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20Allowance<
  TFunctionName extends "allowance",
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20BalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20TotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20ABI, string>["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20ABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, TFunctionName, TMode>({
    abi: ierc20ABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20ABI,
          "approve"
        >["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<typeof ierc20ABI, "approve", TMode> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, "approve", TMode>({
    abi: ierc20ABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20Transfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20ABI,
          "transfer"
        >["request"]["abi"],
        "transfer",
        TMode
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<typeof ierc20ABI, "transfer", TMode> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, "transfer", TMode>({
    abi: ierc20ABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20ABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<typeof ierc20ABI, "transferFrom", TMode> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, "transferFrom", TMode>({
    abi: ierc20ABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function usePrepareIerc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, "transfer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, "Transfer">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20MetadataAllowance<
  TFunctionName extends "allowance",
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20MetadataBalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"decimals"`.
 */
export function useIerc20MetadataDecimals<
  TFunctionName extends "decimals",
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc20MetadataName<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc20MetadataSymbol<
  TFunctionName extends "symbol",
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20MetadataTotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20MetadataABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, TFunctionName, TMode>({
    abi: ierc20MetadataABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20MetadataApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          "approve"
        >["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<typeof ierc20MetadataABI, "approve", TMode> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, "approve", TMode>({
    abi: ierc20MetadataABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20MetadataTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          "transfer"
        >["request"]["abi"],
        "transfer",
        TMode
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<typeof ierc20MetadataABI, "transfer", TMode> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, "transfer", TMode>({
    abi: ierc20MetadataABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20MetadataTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<
        typeof ierc20MetadataABI,
        "transferFrom",
        TMode
      > & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<typeof ierc20MetadataABI, "transferFrom", TMode>({
    abi: ierc20MetadataABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function usePrepareIerc20MetadataWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20MetadataApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20MetadataTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, "transfer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20MetadataApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20MetadataTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, "Transfer">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iModuleABI}__.
 */
export function useIModuleWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iModuleABI, string>["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iModuleABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof iModuleABI, TFunctionName, TMode>({
    abi: iModuleABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iModuleABI}__ and `functionName` set to `"setSafeConfig"`.
 */
export function useIModuleSetSafeConfig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iModuleABI,
          "setSafeConfig"
        >["request"]["abi"],
        "setSafeConfig",
        TMode
      > & { functionName?: "setSafeConfig" }
    : UseContractWriteConfig<typeof iModuleABI, "setSafeConfig", TMode> & {
        abi?: never;
        functionName?: "setSafeConfig";
      } = {} as any,
) {
  return useContractWrite<typeof iModuleABI, "setSafeConfig", TMode>({
    abi: iModuleABI,
    functionName: "setSafeConfig",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iModuleABI}__.
 */
export function usePrepareIModuleWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iModuleABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iModuleABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iModuleABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iModuleABI}__ and `functionName` set to `"setSafeConfig"`.
 */
export function usePrepareIModuleSetSafeConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iModuleABI, "setSafeConfig">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iModuleABI,
    functionName: "setSafeConfig",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iModuleABI, "setSafeConfig">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPluginABI}__.
 */
export function useIPluginWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iPluginABI, string>["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iPluginABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof iPluginABI, TFunctionName, TMode>({
    abi: iPluginABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPluginABI}__ and `functionName` set to `"setSafeConfig"`.
 */
export function useIPluginSetSafeConfig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iPluginABI,
          "setSafeConfig"
        >["request"]["abi"],
        "setSafeConfig",
        TMode
      > & { functionName?: "setSafeConfig" }
    : UseContractWriteConfig<typeof iPluginABI, "setSafeConfig", TMode> & {
        abi?: never;
        functionName?: "setSafeConfig";
      } = {} as any,
) {
  return useContractWrite<typeof iPluginABI, "setSafeConfig", TMode>({
    abi: iPluginABI,
    functionName: "setSafeConfig",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPluginABI}__.
 */
export function usePrepareIPluginWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPluginABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPluginABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPluginABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPluginABI}__ and `functionName` set to `"setSafeConfig"`.
 */
export function usePrepareIPluginSetSafeConfig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPluginABI, "setSafeConfig">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPluginABI,
    functionName: "setSafeConfig",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPluginABI, "setSafeConfig">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSignatureValidatorABI}__.
 */
export function useISignatureValidatorRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iSignatureValidatorABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSignatureValidatorABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: iSignatureValidatorABI,
    ...config,
  } as UseContractReadConfig<typeof iSignatureValidatorABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSignatureValidatorABI}__ and `functionName` set to `"isValidSignature"`.
 */
export function useISignatureValidatorIsValidSignature<
  TFunctionName extends "isValidSignature",
  TSelectData = ReadContractResult<
    typeof iSignatureValidatorABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSignatureValidatorABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iSignatureValidatorABI,
    functionName: "isValidSignature",
    ...config,
  } as UseContractReadConfig<typeof iSignatureValidatorABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSafeProtocolFunctionHandlerABI}__.
 */
export function useISafeProtocolFunctionHandlerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iSafeProtocolFunctionHandlerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSafeProtocolFunctionHandlerABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: iSafeProtocolFunctionHandlerABI,
    ...config,
  } as UseContractReadConfig<typeof iSafeProtocolFunctionHandlerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSafeProtocolFunctionHandlerABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useISafeProtocolFunctionHandlerSupportsInterface<
  TFunctionName extends "supportsInterface",
  TSelectData = ReadContractResult<
    typeof iSafeProtocolFunctionHandlerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSafeProtocolFunctionHandlerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iSafeProtocolFunctionHandlerABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<typeof iSafeProtocolFunctionHandlerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSafeProtocolFunctionHandlerABI}__.
 */
export function useISafeProtocolFunctionHandlerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSafeProtocolFunctionHandlerABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iSafeProtocolFunctionHandlerABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<
    typeof iSafeProtocolFunctionHandlerABI,
    TFunctionName,
    TMode
  >({ abi: iSafeProtocolFunctionHandlerABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSafeProtocolFunctionHandlerABI}__ and `functionName` set to `"handle"`.
 */
export function useISafeProtocolFunctionHandlerHandle<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSafeProtocolFunctionHandlerABI,
          "handle"
        >["request"]["abi"],
        "handle",
        TMode
      > & { functionName?: "handle" }
    : UseContractWriteConfig<
        typeof iSafeProtocolFunctionHandlerABI,
        "handle",
        TMode
      > & {
        abi?: never;
        functionName?: "handle";
      } = {} as any,
) {
  return useContractWrite<
    typeof iSafeProtocolFunctionHandlerABI,
    "handle",
    TMode
  >({
    abi: iSafeProtocolFunctionHandlerABI,
    functionName: "handle",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSafeProtocolFunctionHandlerABI}__.
 */
export function usePrepareISafeProtocolFunctionHandlerWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSafeProtocolFunctionHandlerABI,
      TFunctionName
    >,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSafeProtocolFunctionHandlerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSafeProtocolFunctionHandlerABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSafeProtocolFunctionHandlerABI}__ and `functionName` set to `"handle"`.
 */
export function usePrepareISafeProtocolFunctionHandlerHandle(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSafeProtocolFunctionHandlerABI,
      "handle"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSafeProtocolFunctionHandlerABI,
    functionName: "handle",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSafeProtocolFunctionHandlerABI, "handle">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSafeProtocolHooksABI}__.
 */
export function useISafeProtocolHooksRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iSafeProtocolHooksABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSafeProtocolHooksABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: iSafeProtocolHooksABI,
    ...config,
  } as UseContractReadConfig<typeof iSafeProtocolHooksABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSafeProtocolHooksABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useISafeProtocolHooksSupportsInterface<
  TFunctionName extends "supportsInterface",
  TSelectData = ReadContractResult<typeof iSafeProtocolHooksABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSafeProtocolHooksABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iSafeProtocolHooksABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<typeof iSafeProtocolHooksABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSafeProtocolHooksABI}__.
 */
export function useISafeProtocolHooksWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSafeProtocolHooksABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iSafeProtocolHooksABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof iSafeProtocolHooksABI, TFunctionName, TMode>({
    abi: iSafeProtocolHooksABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSafeProtocolHooksABI}__ and `functionName` set to `"postCheck"`.
 */
export function useISafeProtocolHooksPostCheck<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSafeProtocolHooksABI,
          "postCheck"
        >["request"]["abi"],
        "postCheck",
        TMode
      > & { functionName?: "postCheck" }
    : UseContractWriteConfig<
        typeof iSafeProtocolHooksABI,
        "postCheck",
        TMode
      > & {
        abi?: never;
        functionName?: "postCheck";
      } = {} as any,
) {
  return useContractWrite<typeof iSafeProtocolHooksABI, "postCheck", TMode>({
    abi: iSafeProtocolHooksABI,
    functionName: "postCheck",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSafeProtocolHooksABI}__ and `functionName` set to `"preCheck"`.
 */
export function useISafeProtocolHooksPreCheck<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSafeProtocolHooksABI,
          "preCheck"
        >["request"]["abi"],
        "preCheck",
        TMode
      > & { functionName?: "preCheck" }
    : UseContractWriteConfig<
        typeof iSafeProtocolHooksABI,
        "preCheck",
        TMode
      > & {
        abi?: never;
        functionName?: "preCheck";
      } = {} as any,
) {
  return useContractWrite<typeof iSafeProtocolHooksABI, "preCheck", TMode>({
    abi: iSafeProtocolHooksABI,
    functionName: "preCheck",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSafeProtocolHooksABI}__ and `functionName` set to `"preCheckRootAccess"`.
 */
export function useISafeProtocolHooksPreCheckRootAccess<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSafeProtocolHooksABI,
          "preCheckRootAccess"
        >["request"]["abi"],
        "preCheckRootAccess",
        TMode
      > & { functionName?: "preCheckRootAccess" }
    : UseContractWriteConfig<
        typeof iSafeProtocolHooksABI,
        "preCheckRootAccess",
        TMode
      > & {
        abi?: never;
        functionName?: "preCheckRootAccess";
      } = {} as any,
) {
  return useContractWrite<
    typeof iSafeProtocolHooksABI,
    "preCheckRootAccess",
    TMode
  >({
    abi: iSafeProtocolHooksABI,
    functionName: "preCheckRootAccess",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSafeProtocolHooksABI}__.
 */
export function usePrepareISafeProtocolHooksWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSafeProtocolHooksABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSafeProtocolHooksABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSafeProtocolHooksABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSafeProtocolHooksABI}__ and `functionName` set to `"postCheck"`.
 */
export function usePrepareISafeProtocolHooksPostCheck(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSafeProtocolHooksABI, "postCheck">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSafeProtocolHooksABI,
    functionName: "postCheck",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSafeProtocolHooksABI, "postCheck">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSafeProtocolHooksABI}__ and `functionName` set to `"preCheck"`.
 */
export function usePrepareISafeProtocolHooksPreCheck(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSafeProtocolHooksABI, "preCheck">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSafeProtocolHooksABI,
    functionName: "preCheck",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSafeProtocolHooksABI, "preCheck">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSafeProtocolHooksABI}__ and `functionName` set to `"preCheckRootAccess"`.
 */
export function usePrepareISafeProtocolHooksPreCheckRootAccess(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSafeProtocolHooksABI,
      "preCheckRootAccess"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSafeProtocolHooksABI,
    functionName: "preCheckRootAccess",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSafeProtocolHooksABI, "preCheckRootAccess">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSafeProtocolPluginABI}__.
 */
export function useISafeProtocolPluginRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iSafeProtocolPluginABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSafeProtocolPluginABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: iSafeProtocolPluginABI,
    ...config,
  } as UseContractReadConfig<typeof iSafeProtocolPluginABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSafeProtocolPluginABI}__ and `functionName` set to `"metadataProvider"`.
 */
export function useISafeProtocolPluginMetadataProvider<
  TFunctionName extends "metadataProvider",
  TSelectData = ReadContractResult<
    typeof iSafeProtocolPluginABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSafeProtocolPluginABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iSafeProtocolPluginABI,
    functionName: "metadataProvider",
    ...config,
  } as UseContractReadConfig<typeof iSafeProtocolPluginABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSafeProtocolPluginABI}__ and `functionName` set to `"name"`.
 */
export function useISafeProtocolPluginName<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<
    typeof iSafeProtocolPluginABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSafeProtocolPluginABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iSafeProtocolPluginABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof iSafeProtocolPluginABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSafeProtocolPluginABI}__ and `functionName` set to `"requiresRootAccess"`.
 */
export function useISafeProtocolPluginRequiresRootAccess<
  TFunctionName extends "requiresRootAccess",
  TSelectData = ReadContractResult<
    typeof iSafeProtocolPluginABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSafeProtocolPluginABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iSafeProtocolPluginABI,
    functionName: "requiresRootAccess",
    ...config,
  } as UseContractReadConfig<typeof iSafeProtocolPluginABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSafeProtocolPluginABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useISafeProtocolPluginSupportsInterface<
  TFunctionName extends "supportsInterface",
  TSelectData = ReadContractResult<
    typeof iSafeProtocolPluginABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSafeProtocolPluginABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iSafeProtocolPluginABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<typeof iSafeProtocolPluginABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSafeProtocolPluginABI}__ and `functionName` set to `"version"`.
 */
export function useISafeProtocolPluginVersion<
  TFunctionName extends "version",
  TSelectData = ReadContractResult<
    typeof iSafeProtocolPluginABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSafeProtocolPluginABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iSafeProtocolPluginABI,
    functionName: "version",
    ...config,
  } as UseContractReadConfig<typeof iSafeProtocolPluginABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSafeProtocolStaticFunctionHandlerABI}__.
 */
export function useISafeProtocolStaticFunctionHandlerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iSafeProtocolStaticFunctionHandlerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSafeProtocolStaticFunctionHandlerABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: iSafeProtocolStaticFunctionHandlerABI,
    ...config,
  } as UseContractReadConfig<typeof iSafeProtocolStaticFunctionHandlerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSafeProtocolStaticFunctionHandlerABI}__ and `functionName` set to `"handle"`.
 */
export function useISafeProtocolStaticFunctionHandlerHandle<
  TFunctionName extends "handle",
  TSelectData = ReadContractResult<
    typeof iSafeProtocolStaticFunctionHandlerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSafeProtocolStaticFunctionHandlerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iSafeProtocolStaticFunctionHandlerABI,
    functionName: "handle",
    ...config,
  } as UseContractReadConfig<typeof iSafeProtocolStaticFunctionHandlerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link keeperCompatibleInterfaceABI}__.
 */
export function useKeeperCompatibleInterfaceWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof keeperCompatibleInterfaceABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof keeperCompatibleInterfaceABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<
    typeof keeperCompatibleInterfaceABI,
    TFunctionName,
    TMode
  >({ abi: keeperCompatibleInterfaceABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link keeperCompatibleInterfaceABI}__ and `functionName` set to `"checkUpkeep"`.
 */
export function useKeeperCompatibleInterfaceCheckUpkeep<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof keeperCompatibleInterfaceABI,
          "checkUpkeep"
        >["request"]["abi"],
        "checkUpkeep",
        TMode
      > & { functionName?: "checkUpkeep" }
    : UseContractWriteConfig<
        typeof keeperCompatibleInterfaceABI,
        "checkUpkeep",
        TMode
      > & {
        abi?: never;
        functionName?: "checkUpkeep";
      } = {} as any,
) {
  return useContractWrite<
    typeof keeperCompatibleInterfaceABI,
    "checkUpkeep",
    TMode
  >({
    abi: keeperCompatibleInterfaceABI,
    functionName: "checkUpkeep",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link keeperCompatibleInterfaceABI}__ and `functionName` set to `"performUpkeep"`.
 */
export function useKeeperCompatibleInterfacePerformUpkeep<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof keeperCompatibleInterfaceABI,
          "performUpkeep"
        >["request"]["abi"],
        "performUpkeep",
        TMode
      > & { functionName?: "performUpkeep" }
    : UseContractWriteConfig<
        typeof keeperCompatibleInterfaceABI,
        "performUpkeep",
        TMode
      > & {
        abi?: never;
        functionName?: "performUpkeep";
      } = {} as any,
) {
  return useContractWrite<
    typeof keeperCompatibleInterfaceABI,
    "performUpkeep",
    TMode
  >({
    abi: keeperCompatibleInterfaceABI,
    functionName: "performUpkeep",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link keeperCompatibleInterfaceABI}__.
 */
export function usePrepareKeeperCompatibleInterfaceWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof keeperCompatibleInterfaceABI,
      TFunctionName
    >,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: keeperCompatibleInterfaceABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof keeperCompatibleInterfaceABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link keeperCompatibleInterfaceABI}__ and `functionName` set to `"checkUpkeep"`.
 */
export function usePrepareKeeperCompatibleInterfaceCheckUpkeep(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof keeperCompatibleInterfaceABI,
      "checkUpkeep"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: keeperCompatibleInterfaceABI,
    functionName: "checkUpkeep",
    ...config,
  } as UsePrepareContractWriteConfig<typeof keeperCompatibleInterfaceABI, "checkUpkeep">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link keeperCompatibleInterfaceABI}__ and `functionName` set to `"performUpkeep"`.
 */
export function usePrepareKeeperCompatibleInterfacePerformUpkeep(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof keeperCompatibleInterfaceABI,
      "performUpkeep"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: keeperCompatibleInterfaceABI,
    functionName: "performUpkeep",
    ...config,
  } as UsePrepareContractWriteConfig<typeof keeperCompatibleInterfaceABI, "performUpkeep">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSafeProtocolManagerABI}__.
 */
export function useISafeProtocolManagerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSafeProtocolManagerABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iSafeProtocolManagerABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof iSafeProtocolManagerABI, TFunctionName, TMode>(
    { abi: iSafeProtocolManagerABI, ...config } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSafeProtocolManagerABI}__ and `functionName` set to `"executeRootAccess"`.
 */
export function useISafeProtocolManagerExecuteRootAccess<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSafeProtocolManagerABI,
          "executeRootAccess"
        >["request"]["abi"],
        "executeRootAccess",
        TMode
      > & { functionName?: "executeRootAccess" }
    : UseContractWriteConfig<
        typeof iSafeProtocolManagerABI,
        "executeRootAccess",
        TMode
      > & {
        abi?: never;
        functionName?: "executeRootAccess";
      } = {} as any,
) {
  return useContractWrite<
    typeof iSafeProtocolManagerABI,
    "executeRootAccess",
    TMode
  >({
    abi: iSafeProtocolManagerABI,
    functionName: "executeRootAccess",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSafeProtocolManagerABI}__ and `functionName` set to `"executeTransaction"`.
 */
export function useISafeProtocolManagerExecuteTransaction<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSafeProtocolManagerABI,
          "executeTransaction"
        >["request"]["abi"],
        "executeTransaction",
        TMode
      > & { functionName?: "executeTransaction" }
    : UseContractWriteConfig<
        typeof iSafeProtocolManagerABI,
        "executeTransaction",
        TMode
      > & {
        abi?: never;
        functionName?: "executeTransaction";
      } = {} as any,
) {
  return useContractWrite<
    typeof iSafeProtocolManagerABI,
    "executeTransaction",
    TMode
  >({
    abi: iSafeProtocolManagerABI,
    functionName: "executeTransaction",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSafeProtocolManagerABI}__.
 */
export function usePrepareISafeProtocolManagerWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSafeProtocolManagerABI,
      TFunctionName
    >,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSafeProtocolManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSafeProtocolManagerABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSafeProtocolManagerABI}__ and `functionName` set to `"executeRootAccess"`.
 */
export function usePrepareISafeProtocolManagerExecuteRootAccess(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSafeProtocolManagerABI,
      "executeRootAccess"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSafeProtocolManagerABI,
    functionName: "executeRootAccess",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSafeProtocolManagerABI, "executeRootAccess">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSafeProtocolManagerABI}__ and `functionName` set to `"executeTransaction"`.
 */
export function usePrepareISafeProtocolManagerExecuteTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iSafeProtocolManagerABI,
      "executeTransaction"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSafeProtocolManagerABI,
    functionName: "executeTransaction",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSafeProtocolManagerABI, "executeTransaction">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockGaugeABI}__.
 */
export function useMockGaugeRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof mockGaugeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockGaugeABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: mockGaugeABI,
    ...config,
  } as UseContractReadConfig<typeof mockGaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockGaugeABI}__ and `functionName` set to `"allowance"`.
 */
export function useMockGaugeAllowance<
  TFunctionName extends "allowance",
  TSelectData = ReadContractResult<typeof mockGaugeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockGaugeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockGaugeABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof mockGaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockGaugeABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useMockGaugeBalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof mockGaugeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockGaugeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockGaugeABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof mockGaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockGaugeABI}__ and `functionName` set to `"decimals"`.
 */
export function useMockGaugeDecimals<
  TFunctionName extends "decimals",
  TSelectData = ReadContractResult<typeof mockGaugeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockGaugeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockGaugeABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof mockGaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockGaugeABI}__ and `functionName` set to `"lpToken"`.
 */
export function useMockGaugeLpToken<
  TFunctionName extends "lpToken",
  TSelectData = ReadContractResult<typeof mockGaugeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockGaugeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockGaugeABI,
    functionName: "lpToken",
    ...config,
  } as UseContractReadConfig<typeof mockGaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockGaugeABI}__ and `functionName` set to `"name"`.
 */
export function useMockGaugeName<
  TFunctionName extends "name",
  TSelectData = ReadContractResult<typeof mockGaugeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockGaugeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockGaugeABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof mockGaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockGaugeABI}__ and `functionName` set to `"rewardTokens"`.
 */
export function useMockGaugeRewardTokens<
  TFunctionName extends "rewardTokens",
  TSelectData = ReadContractResult<typeof mockGaugeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockGaugeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockGaugeABI,
    functionName: "rewardTokens",
    ...config,
  } as UseContractReadConfig<typeof mockGaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockGaugeABI}__ and `functionName` set to `"symbol"`.
 */
export function useMockGaugeSymbol<
  TFunctionName extends "symbol",
  TSelectData = ReadContractResult<typeof mockGaugeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockGaugeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockGaugeABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof mockGaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockGaugeABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useMockGaugeTotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof mockGaugeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof mockGaugeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: mockGaugeABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof mockGaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockGaugeABI}__.
 */
export function useMockGaugeWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockGaugeABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof mockGaugeABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof mockGaugeABI, TFunctionName, TMode>({
    abi: mockGaugeABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockGaugeABI}__ and `functionName` set to `"approve"`.
 */
export function useMockGaugeApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockGaugeABI,
          "approve"
        >["request"]["abi"],
        "approve",
        TMode
      > & { functionName?: "approve" }
    : UseContractWriteConfig<typeof mockGaugeABI, "approve", TMode> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any,
) {
  return useContractWrite<typeof mockGaugeABI, "approve", TMode>({
    abi: mockGaugeABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockGaugeABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useMockGaugeDecreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockGaugeABI,
          "decreaseAllowance"
        >["request"]["abi"],
        "decreaseAllowance",
        TMode
      > & { functionName?: "decreaseAllowance" }
    : UseContractWriteConfig<
        typeof mockGaugeABI,
        "decreaseAllowance",
        TMode
      > & {
        abi?: never;
        functionName?: "decreaseAllowance";
      } = {} as any,
) {
  return useContractWrite<typeof mockGaugeABI, "decreaseAllowance", TMode>({
    abi: mockGaugeABI,
    functionName: "decreaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockGaugeABI}__ and `functionName` set to `"deposit"`.
 */
export function useMockGaugeDeposit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockGaugeABI,
          "deposit"
        >["request"]["abi"],
        "deposit",
        TMode
      > & { functionName?: "deposit" }
    : UseContractWriteConfig<typeof mockGaugeABI, "deposit", TMode> & {
        abi?: never;
        functionName?: "deposit";
      } = {} as any,
) {
  return useContractWrite<typeof mockGaugeABI, "deposit", TMode>({
    abi: mockGaugeABI,
    functionName: "deposit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockGaugeABI}__ and `functionName` set to `"getReward"`.
 */
export function useMockGaugeGetReward<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockGaugeABI,
          "getReward"
        >["request"]["abi"],
        "getReward",
        TMode
      > & { functionName?: "getReward" }
    : UseContractWriteConfig<typeof mockGaugeABI, "getReward", TMode> & {
        abi?: never;
        functionName?: "getReward";
      } = {} as any,
) {
  return useContractWrite<typeof mockGaugeABI, "getReward", TMode>({
    abi: mockGaugeABI,
    functionName: "getReward",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockGaugeABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useMockGaugeIncreaseAllowance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockGaugeABI,
          "increaseAllowance"
        >["request"]["abi"],
        "increaseAllowance",
        TMode
      > & { functionName?: "increaseAllowance" }
    : UseContractWriteConfig<
        typeof mockGaugeABI,
        "increaseAllowance",
        TMode
      > & {
        abi?: never;
        functionName?: "increaseAllowance";
      } = {} as any,
) {
  return useContractWrite<typeof mockGaugeABI, "increaseAllowance", TMode>({
    abi: mockGaugeABI,
    functionName: "increaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockGaugeABI}__ and `functionName` set to `"transfer"`.
 */
export function useMockGaugeTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockGaugeABI,
          "transfer"
        >["request"]["abi"],
        "transfer",
        TMode
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<typeof mockGaugeABI, "transfer", TMode> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any,
) {
  return useContractWrite<typeof mockGaugeABI, "transfer", TMode>({
    abi: mockGaugeABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockGaugeABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useMockGaugeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockGaugeABI,
          "transferFrom"
        >["request"]["abi"],
        "transferFrom",
        TMode
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<typeof mockGaugeABI, "transferFrom", TMode> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any,
) {
  return useContractWrite<typeof mockGaugeABI, "transferFrom", TMode>({
    abi: mockGaugeABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockGaugeABI}__ and `functionName` set to `"withdraw"`.
 */
export function useMockGaugeWithdraw<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof mockGaugeABI,
          "withdraw"
        >["request"]["abi"],
        "withdraw",
        TMode
      > & { functionName?: "withdraw" }
    : UseContractWriteConfig<typeof mockGaugeABI, "withdraw", TMode> & {
        abi?: never;
        functionName?: "withdraw";
      } = {} as any,
) {
  return useContractWrite<typeof mockGaugeABI, "withdraw", TMode>({
    abi: mockGaugeABI,
    functionName: "withdraw",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockGaugeABI}__.
 */
export function usePrepareMockGaugeWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockGaugeABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockGaugeABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockGaugeABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockGaugeABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareMockGaugeApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockGaugeABI, "approve">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockGaugeABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockGaugeABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockGaugeABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareMockGaugeDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockGaugeABI, "decreaseAllowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockGaugeABI,
    functionName: "decreaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockGaugeABI, "decreaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockGaugeABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareMockGaugeDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockGaugeABI, "deposit">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockGaugeABI,
    functionName: "deposit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockGaugeABI, "deposit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockGaugeABI}__ and `functionName` set to `"getReward"`.
 */
export function usePrepareMockGaugeGetReward(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockGaugeABI, "getReward">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockGaugeABI,
    functionName: "getReward",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockGaugeABI, "getReward">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockGaugeABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareMockGaugeIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockGaugeABI, "increaseAllowance">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockGaugeABI,
    functionName: "increaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockGaugeABI, "increaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockGaugeABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareMockGaugeTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockGaugeABI, "transfer">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockGaugeABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockGaugeABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockGaugeABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareMockGaugeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockGaugeABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockGaugeABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockGaugeABI, "transferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockGaugeABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareMockGaugeWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockGaugeABI, "withdraw">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockGaugeABI,
    functionName: "withdraw",
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockGaugeABI, "withdraw">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockGaugeABI}__.
 */
export function useMockGaugeEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof mockGaugeABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockGaugeABI,
    ...config,
  } as UseContractEventConfig<typeof mockGaugeABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockGaugeABI}__ and `eventName` set to `"Approval"`.
 */
export function useMockGaugeApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof mockGaugeABI, "Approval">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockGaugeABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof mockGaugeABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockGaugeABI}__ and `eventName` set to `"RewardClaimed"`.
 */
export function useMockGaugeRewardClaimedEvent(
  config: Omit<
    UseContractEventConfig<typeof mockGaugeABI, "RewardClaimed">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockGaugeABI,
    eventName: "RewardClaimed",
    ...config,
  } as UseContractEventConfig<typeof mockGaugeABI, "RewardClaimed">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockGaugeABI}__ and `eventName` set to `"Transfer"`.
 */
export function useMockGaugeTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof mockGaugeABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: mockGaugeABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof mockGaugeABI, "Transfer">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBasicRewardsABI}__.
 */
export function useIBasicRewardsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iBasicRewardsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBasicRewardsABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: iBasicRewardsABI,
    ...config,
  } as UseContractReadConfig<typeof iBasicRewardsABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBasicRewardsABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIBasicRewardsBalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof iBasicRewardsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBasicRewardsABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iBasicRewardsABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof iBasicRewardsABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBasicRewardsABI}__ and `functionName` set to `"earned"`.
 */
export function useIBasicRewardsEarned<
  TFunctionName extends "earned",
  TSelectData = ReadContractResult<typeof iBasicRewardsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBasicRewardsABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iBasicRewardsABI,
    functionName: "earned",
    ...config,
  } as UseContractReadConfig<typeof iBasicRewardsABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBasicRewardsABI}__ and `functionName` set to `"extraRewards"`.
 */
export function useIBasicRewardsExtraRewards<
  TFunctionName extends "extraRewards",
  TSelectData = ReadContractResult<typeof iBasicRewardsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBasicRewardsABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iBasicRewardsABI,
    functionName: "extraRewards",
    ...config,
  } as UseContractReadConfig<typeof iBasicRewardsABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBasicRewardsABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIBasicRewardsTotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof iBasicRewardsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iBasicRewardsABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iBasicRewardsABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof iBasicRewardsABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBasicRewardsABI}__.
 */
export function useIBasicRewardsWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iBasicRewardsABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iBasicRewardsABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof iBasicRewardsABI, TFunctionName, TMode>({
    abi: iBasicRewardsABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBasicRewardsABI}__ and `functionName` set to `"exit"`.
 */
export function useIBasicRewardsExit<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iBasicRewardsABI,
          "exit"
        >["request"]["abi"],
        "exit",
        TMode
      > & { functionName?: "exit" }
    : UseContractWriteConfig<typeof iBasicRewardsABI, "exit", TMode> & {
        abi?: never;
        functionName?: "exit";
      } = {} as any,
) {
  return useContractWrite<typeof iBasicRewardsABI, "exit", TMode>({
    abi: iBasicRewardsABI,
    functionName: "exit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBasicRewardsABI}__ and `functionName` set to `"getReward"`.
 */
export function useIBasicRewardsGetReward<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iBasicRewardsABI,
          "getReward"
        >["request"]["abi"],
        "getReward",
        TMode
      > & { functionName?: "getReward" }
    : UseContractWriteConfig<typeof iBasicRewardsABI, "getReward", TMode> & {
        abi?: never;
        functionName?: "getReward";
      } = {} as any,
) {
  return useContractWrite<typeof iBasicRewardsABI, "getReward", TMode>({
    abi: iBasicRewardsABI,
    functionName: "getReward",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBasicRewardsABI}__ and `functionName` set to `"stake"`.
 */
export function useIBasicRewardsStake<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iBasicRewardsABI,
          "stake"
        >["request"]["abi"],
        "stake",
        TMode
      > & { functionName?: "stake" }
    : UseContractWriteConfig<typeof iBasicRewardsABI, "stake", TMode> & {
        abi?: never;
        functionName?: "stake";
      } = {} as any,
) {
  return useContractWrite<typeof iBasicRewardsABI, "stake", TMode>({
    abi: iBasicRewardsABI,
    functionName: "stake",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBasicRewardsABI}__ and `functionName` set to `"stakeFor"`.
 */
export function useIBasicRewardsStakeFor<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iBasicRewardsABI,
          "stakeFor"
        >["request"]["abi"],
        "stakeFor",
        TMode
      > & { functionName?: "stakeFor" }
    : UseContractWriteConfig<typeof iBasicRewardsABI, "stakeFor", TMode> & {
        abi?: never;
        functionName?: "stakeFor";
      } = {} as any,
) {
  return useContractWrite<typeof iBasicRewardsABI, "stakeFor", TMode>({
    abi: iBasicRewardsABI,
    functionName: "stakeFor",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBasicRewardsABI}__ and `functionName` set to `"withdraw"`.
 */
export function useIBasicRewardsWithdraw<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iBasicRewardsABI,
          "withdraw"
        >["request"]["abi"],
        "withdraw",
        TMode
      > & { functionName?: "withdraw" }
    : UseContractWriteConfig<typeof iBasicRewardsABI, "withdraw", TMode> & {
        abi?: never;
        functionName?: "withdraw";
      } = {} as any,
) {
  return useContractWrite<typeof iBasicRewardsABI, "withdraw", TMode>({
    abi: iBasicRewardsABI,
    functionName: "withdraw",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBasicRewardsABI}__ and `functionName` set to `"withdrawAll"`.
 */
export function useIBasicRewardsWithdrawAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iBasicRewardsABI,
          "withdrawAll"
        >["request"]["abi"],
        "withdrawAll",
        TMode
      > & { functionName?: "withdrawAll" }
    : UseContractWriteConfig<typeof iBasicRewardsABI, "withdrawAll", TMode> & {
        abi?: never;
        functionName?: "withdrawAll";
      } = {} as any,
) {
  return useContractWrite<typeof iBasicRewardsABI, "withdrawAll", TMode>({
    abi: iBasicRewardsABI,
    functionName: "withdrawAll",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iBasicRewardsABI}__ and `functionName` set to `"withdrawAndUnwrap"`.
 */
export function useIBasicRewardsWithdrawAndUnwrap<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iBasicRewardsABI,
          "withdrawAndUnwrap"
        >["request"]["abi"],
        "withdrawAndUnwrap",
        TMode
      > & { functionName?: "withdrawAndUnwrap" }
    : UseContractWriteConfig<
        typeof iBasicRewardsABI,
        "withdrawAndUnwrap",
        TMode
      > & {
        abi?: never;
        functionName?: "withdrawAndUnwrap";
      } = {} as any,
) {
  return useContractWrite<typeof iBasicRewardsABI, "withdrawAndUnwrap", TMode>({
    abi: iBasicRewardsABI,
    functionName: "withdrawAndUnwrap",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBasicRewardsABI}__.
 */
export function usePrepareIBasicRewardsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBasicRewardsABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBasicRewardsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBasicRewardsABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBasicRewardsABI}__ and `functionName` set to `"exit"`.
 */
export function usePrepareIBasicRewardsExit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBasicRewardsABI, "exit">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBasicRewardsABI,
    functionName: "exit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBasicRewardsABI, "exit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBasicRewardsABI}__ and `functionName` set to `"getReward"`.
 */
export function usePrepareIBasicRewardsGetReward(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBasicRewardsABI, "getReward">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBasicRewardsABI,
    functionName: "getReward",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBasicRewardsABI, "getReward">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBasicRewardsABI}__ and `functionName` set to `"stake"`.
 */
export function usePrepareIBasicRewardsStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBasicRewardsABI, "stake">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBasicRewardsABI,
    functionName: "stake",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBasicRewardsABI, "stake">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBasicRewardsABI}__ and `functionName` set to `"stakeFor"`.
 */
export function usePrepareIBasicRewardsStakeFor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBasicRewardsABI, "stakeFor">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBasicRewardsABI,
    functionName: "stakeFor",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBasicRewardsABI, "stakeFor">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBasicRewardsABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareIBasicRewardsWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBasicRewardsABI, "withdraw">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBasicRewardsABI,
    functionName: "withdraw",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBasicRewardsABI, "withdraw">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBasicRewardsABI}__ and `functionName` set to `"withdrawAll"`.
 */
export function usePrepareIBasicRewardsWithdrawAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBasicRewardsABI, "withdrawAll">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBasicRewardsABI,
    functionName: "withdrawAll",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBasicRewardsABI, "withdrawAll">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iBasicRewardsABI}__ and `functionName` set to `"withdrawAndUnwrap"`.
 */
export function usePrepareIBasicRewardsWithdrawAndUnwrap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iBasicRewardsABI, "withdrawAndUnwrap">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iBasicRewardsABI,
    functionName: "withdrawAndUnwrap",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iBasicRewardsABI, "withdrawAndUnwrap">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGaugeABI}__.
 */
export function useIGaugeRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iGaugeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({ abi: iGaugeABI, ...config } as UseContractReadConfig<
    typeof iGaugeABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGaugeABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIGaugeBalanceOf<
  TFunctionName extends "balanceOf",
  TSelectData = ReadContractResult<typeof iGaugeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iGaugeABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGaugeABI}__ and `functionName` set to `"earned"`.
 */
export function useIGaugeEarned<
  TFunctionName extends "earned",
  TSelectData = ReadContractResult<typeof iGaugeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iGaugeABI,
    functionName: "earned",
    ...config,
  } as UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGaugeABI}__ and `functionName` set to `"fees0"`.
 */
export function useIGaugeFees0<
  TFunctionName extends "fees0",
  TSelectData = ReadContractResult<typeof iGaugeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iGaugeABI,
    functionName: "fees0",
    ...config,
  } as UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGaugeABI}__ and `functionName` set to `"fees1"`.
 */
export function useIGaugeFees1<
  TFunctionName extends "fees1",
  TSelectData = ReadContractResult<typeof iGaugeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iGaugeABI,
    functionName: "fees1",
    ...config,
  } as UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGaugeABI}__ and `functionName` set to `"feesVotingReward"`.
 */
export function useIGaugeFeesVotingReward<
  TFunctionName extends "feesVotingReward",
  TSelectData = ReadContractResult<typeof iGaugeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iGaugeABI,
    functionName: "feesVotingReward",
    ...config,
  } as UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGaugeABI}__ and `functionName` set to `"isPool"`.
 */
export function useIGaugeIsPool<
  TFunctionName extends "isPool",
  TSelectData = ReadContractResult<typeof iGaugeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iGaugeABI,
    functionName: "isPool",
    ...config,
  } as UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGaugeABI}__ and `functionName` set to `"lastTimeRewardApplicable"`.
 */
export function useIGaugeLastTimeRewardApplicable<
  TFunctionName extends "lastTimeRewardApplicable",
  TSelectData = ReadContractResult<typeof iGaugeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iGaugeABI,
    functionName: "lastTimeRewardApplicable",
    ...config,
  } as UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGaugeABI}__ and `functionName` set to `"lastUpdateTime"`.
 */
export function useIGaugeLastUpdateTime<
  TFunctionName extends "lastUpdateTime",
  TSelectData = ReadContractResult<typeof iGaugeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iGaugeABI,
    functionName: "lastUpdateTime",
    ...config,
  } as UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGaugeABI}__ and `functionName` set to `"left"`.
 */
export function useIGaugeLeft<
  TFunctionName extends "left",
  TSelectData = ReadContractResult<typeof iGaugeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iGaugeABI,
    functionName: "left",
    ...config,
  } as UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGaugeABI}__ and `functionName` set to `"periodFinish"`.
 */
export function useIGaugePeriodFinish<
  TFunctionName extends "periodFinish",
  TSelectData = ReadContractResult<typeof iGaugeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iGaugeABI,
    functionName: "periodFinish",
    ...config,
  } as UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGaugeABI}__ and `functionName` set to `"rewardPerToken"`.
 */
export function useIGaugeRewardPerToken<
  TFunctionName extends "rewardPerToken",
  TSelectData = ReadContractResult<typeof iGaugeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iGaugeABI,
    functionName: "rewardPerToken",
    ...config,
  } as UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGaugeABI}__ and `functionName` set to `"rewardPerTokenStored"`.
 */
export function useIGaugeRewardPerTokenStored<
  TFunctionName extends "rewardPerTokenStored",
  TSelectData = ReadContractResult<typeof iGaugeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iGaugeABI,
    functionName: "rewardPerTokenStored",
    ...config,
  } as UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGaugeABI}__ and `functionName` set to `"rewardRate"`.
 */
export function useIGaugeRewardRate<
  TFunctionName extends "rewardRate",
  TSelectData = ReadContractResult<typeof iGaugeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iGaugeABI,
    functionName: "rewardRate",
    ...config,
  } as UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGaugeABI}__ and `functionName` set to `"rewardRateByEpoch"`.
 */
export function useIGaugeRewardRateByEpoch<
  TFunctionName extends "rewardRateByEpoch",
  TSelectData = ReadContractResult<typeof iGaugeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iGaugeABI,
    functionName: "rewardRateByEpoch",
    ...config,
  } as UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGaugeABI}__ and `functionName` set to `"rewardToken"`.
 */
export function useIGaugeRewardToken<
  TFunctionName extends "rewardToken",
  TSelectData = ReadContractResult<typeof iGaugeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iGaugeABI,
    functionName: "rewardToken",
    ...config,
  } as UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGaugeABI}__ and `functionName` set to `"rewards"`.
 */
export function useIGaugeRewards<
  TFunctionName extends "rewards",
  TSelectData = ReadContractResult<typeof iGaugeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iGaugeABI,
    functionName: "rewards",
    ...config,
  } as UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGaugeABI}__ and `functionName` set to `"stakingToken"`.
 */
export function useIGaugeStakingToken<
  TFunctionName extends "stakingToken",
  TSelectData = ReadContractResult<typeof iGaugeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iGaugeABI,
    functionName: "stakingToken",
    ...config,
  } as UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGaugeABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIGaugeTotalSupply<
  TFunctionName extends "totalSupply",
  TSelectData = ReadContractResult<typeof iGaugeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iGaugeABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGaugeABI}__ and `functionName` set to `"userRewardPerTokenPaid"`.
 */
export function useIGaugeUserRewardPerTokenPaid<
  TFunctionName extends "userRewardPerTokenPaid",
  TSelectData = ReadContractResult<typeof iGaugeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iGaugeABI,
    functionName: "userRewardPerTokenPaid",
    ...config,
  } as UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iGaugeABI}__ and `functionName` set to `"voter"`.
 */
export function useIGaugeVoter<
  TFunctionName extends "voter",
  TSelectData = ReadContractResult<typeof iGaugeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iGaugeABI,
    functionName: "voter",
    ...config,
  } as UseContractReadConfig<typeof iGaugeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGaugeABI}__.
 */
export function useIGaugeWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iGaugeABI, string>["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iGaugeABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof iGaugeABI, TFunctionName, TMode>({
    abi: iGaugeABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGaugeABI}__ and `functionName` set to `"deposit"`.
 */
export function useIGaugeDeposit<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iGaugeABI,
          "deposit"
        >["request"]["abi"],
        "deposit",
        TMode
      > & { functionName?: "deposit" }
    : UseContractWriteConfig<typeof iGaugeABI, "deposit", TMode> & {
        abi?: never;
        functionName?: "deposit";
      } = {} as any,
) {
  return useContractWrite<typeof iGaugeABI, "deposit", TMode>({
    abi: iGaugeABI,
    functionName: "deposit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGaugeABI}__ and `functionName` set to `"getReward"`.
 */
export function useIGaugeGetReward<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iGaugeABI,
          "getReward"
        >["request"]["abi"],
        "getReward",
        TMode
      > & { functionName?: "getReward" }
    : UseContractWriteConfig<typeof iGaugeABI, "getReward", TMode> & {
        abi?: never;
        functionName?: "getReward";
      } = {} as any,
) {
  return useContractWrite<typeof iGaugeABI, "getReward", TMode>({
    abi: iGaugeABI,
    functionName: "getReward",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGaugeABI}__ and `functionName` set to `"notifyRewardAmount"`.
 */
export function useIGaugeNotifyRewardAmount<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iGaugeABI,
          "notifyRewardAmount"
        >["request"]["abi"],
        "notifyRewardAmount",
        TMode
      > & { functionName?: "notifyRewardAmount" }
    : UseContractWriteConfig<typeof iGaugeABI, "notifyRewardAmount", TMode> & {
        abi?: never;
        functionName?: "notifyRewardAmount";
      } = {} as any,
) {
  return useContractWrite<typeof iGaugeABI, "notifyRewardAmount", TMode>({
    abi: iGaugeABI,
    functionName: "notifyRewardAmount",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iGaugeABI}__ and `functionName` set to `"withdraw"`.
 */
export function useIGaugeWithdraw<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iGaugeABI,
          "withdraw"
        >["request"]["abi"],
        "withdraw",
        TMode
      > & { functionName?: "withdraw" }
    : UseContractWriteConfig<typeof iGaugeABI, "withdraw", TMode> & {
        abi?: never;
        functionName?: "withdraw";
      } = {} as any,
) {
  return useContractWrite<typeof iGaugeABI, "withdraw", TMode>({
    abi: iGaugeABI,
    functionName: "withdraw",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGaugeABI}__.
 */
export function usePrepareIGaugeWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGaugeABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGaugeABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGaugeABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGaugeABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareIGaugeDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGaugeABI, "deposit">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGaugeABI,
    functionName: "deposit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGaugeABI, "deposit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGaugeABI}__ and `functionName` set to `"getReward"`.
 */
export function usePrepareIGaugeGetReward(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGaugeABI, "getReward">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGaugeABI,
    functionName: "getReward",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGaugeABI, "getReward">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGaugeABI}__ and `functionName` set to `"notifyRewardAmount"`.
 */
export function usePrepareIGaugeNotifyRewardAmount(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGaugeABI, "notifyRewardAmount">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGaugeABI,
    functionName: "notifyRewardAmount",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGaugeABI, "notifyRewardAmount">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iGaugeABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareIGaugeWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iGaugeABI, "withdraw">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iGaugeABI,
    functionName: "withdraw",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iGaugeABI, "withdraw">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGaugeABI}__.
 */
export function useIGaugeEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iGaugeABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: iGaugeABI,
    ...config,
  } as UseContractEventConfig<typeof iGaugeABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGaugeABI}__ and `eventName` set to `"ClaimFees"`.
 */
export function useIGaugeClaimFeesEvent(
  config: Omit<
    UseContractEventConfig<typeof iGaugeABI, "ClaimFees">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: iGaugeABI,
    eventName: "ClaimFees",
    ...config,
  } as UseContractEventConfig<typeof iGaugeABI, "ClaimFees">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGaugeABI}__ and `eventName` set to `"ClaimRewards"`.
 */
export function useIGaugeClaimRewardsEvent(
  config: Omit<
    UseContractEventConfig<typeof iGaugeABI, "ClaimRewards">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: iGaugeABI,
    eventName: "ClaimRewards",
    ...config,
  } as UseContractEventConfig<typeof iGaugeABI, "ClaimRewards">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGaugeABI}__ and `eventName` set to `"Deposit"`.
 */
export function useIGaugeDepositEvent(
  config: Omit<
    UseContractEventConfig<typeof iGaugeABI, "Deposit">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: iGaugeABI,
    eventName: "Deposit",
    ...config,
  } as UseContractEventConfig<typeof iGaugeABI, "Deposit">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGaugeABI}__ and `eventName` set to `"NotifyReward"`.
 */
export function useIGaugeNotifyRewardEvent(
  config: Omit<
    UseContractEventConfig<typeof iGaugeABI, "NotifyReward">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: iGaugeABI,
    eventName: "NotifyReward",
    ...config,
  } as UseContractEventConfig<typeof iGaugeABI, "NotifyReward">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iGaugeABI}__ and `eventName` set to `"Withdraw"`.
 */
export function useIGaugeWithdrawEvent(
  config: Omit<
    UseContractEventConfig<typeof iGaugeABI, "Withdraw">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: iGaugeABI,
    eventName: "Withdraw",
    ...config,
  } as UseContractEventConfig<typeof iGaugeABI, "Withdraw">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link moduleFactoryABI}__.
 */
export function useModuleFactoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof moduleFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof moduleFactoryABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: moduleFactoryABI,
    ...config,
  } as UseContractReadConfig<typeof moduleFactoryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link moduleFactoryABI}__ and `functionName` set to `"deployedModules"`.
 */
export function useModuleFactoryDeployedModules<
  TFunctionName extends "deployedModules",
  TSelectData = ReadContractResult<typeof moduleFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof moduleFactoryABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: moduleFactoryABI,
    functionName: "deployedModules",
    ...config,
  } as UseContractReadConfig<typeof moduleFactoryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link moduleFactoryABI}__.
 */
export function useModuleFactoryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof moduleFactoryABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof moduleFactoryABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof moduleFactoryABI, TFunctionName, TMode>({
    abi: moduleFactoryABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link moduleFactoryABI}__ and `functionName` set to `"createModule"`.
 */
export function useModuleFactoryCreateModule<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof moduleFactoryABI,
          "createModule"
        >["request"]["abi"],
        "createModule",
        TMode
      > & { functionName?: "createModule" }
    : UseContractWriteConfig<typeof moduleFactoryABI, "createModule", TMode> & {
        abi?: never;
        functionName?: "createModule";
      } = {} as any,
) {
  return useContractWrite<typeof moduleFactoryABI, "createModule", TMode>({
    abi: moduleFactoryABI,
    functionName: "createModule",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link moduleFactoryABI}__.
 */
export function usePrepareModuleFactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof moduleFactoryABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: moduleFactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof moduleFactoryABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link moduleFactoryABI}__ and `functionName` set to `"createModule"`.
 */
export function usePrepareModuleFactoryCreateModule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof moduleFactoryABI, "createModule">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: moduleFactoryABI,
    functionName: "createModule",
    ...config,
  } as UsePrepareContractWriteConfig<typeof moduleFactoryABI, "createModule">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link moduleFactoryABI}__.
 */
export function useModuleFactoryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof moduleFactoryABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: moduleFactoryABI,
    ...config,
  } as UseContractEventConfig<typeof moduleFactoryABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link moduleFactoryABI}__ and `eventName` set to `"ModuleDeployed"`.
 */
export function useModuleFactoryModuleDeployedEvent(
  config: Omit<
    UseContractEventConfig<typeof moduleFactoryABI, "ModuleDeployed">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: moduleFactoryABI,
    eventName: "ModuleDeployed",
    ...config,
  } as UseContractEventConfig<typeof moduleFactoryABI, "ModuleDeployed">);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iProxyCreationCallbackABI}__.
 */
export function useIProxyCreationCallbackWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iProxyCreationCallbackABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iProxyCreationCallbackABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<
    typeof iProxyCreationCallbackABI,
    TFunctionName,
    TMode
  >({ abi: iProxyCreationCallbackABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iProxyCreationCallbackABI}__ and `functionName` set to `"proxyCreated"`.
 */
export function useIProxyCreationCallbackProxyCreated<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iProxyCreationCallbackABI,
          "proxyCreated"
        >["request"]["abi"],
        "proxyCreated",
        TMode
      > & { functionName?: "proxyCreated" }
    : UseContractWriteConfig<
        typeof iProxyCreationCallbackABI,
        "proxyCreated",
        TMode
      > & {
        abi?: never;
        functionName?: "proxyCreated";
      } = {} as any,
) {
  return useContractWrite<
    typeof iProxyCreationCallbackABI,
    "proxyCreated",
    TMode
  >({
    abi: iProxyCreationCallbackABI,
    functionName: "proxyCreated",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iProxyCreationCallbackABI}__.
 */
export function usePrepareIProxyCreationCallbackWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iProxyCreationCallbackABI,
      TFunctionName
    >,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iProxyCreationCallbackABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iProxyCreationCallbackABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iProxyCreationCallbackABI}__ and `functionName` set to `"proxyCreated"`.
 */
export function usePrepareIProxyCreationCallbackProxyCreated(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iProxyCreationCallbackABI,
      "proxyCreated"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iProxyCreationCallbackABI,
    functionName: "proxyCreated",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iProxyCreationCallbackABI, "proxyCreated">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link moduleManagerABI}__.
 */
export function useModuleManagerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof moduleManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof moduleManagerABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: moduleManagerABI,
    ...config,
  } as UseContractReadConfig<typeof moduleManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"getModulesPaginated"`.
 */
export function useModuleManagerGetModulesPaginated<
  TFunctionName extends "getModulesPaginated",
  TSelectData = ReadContractResult<typeof moduleManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof moduleManagerABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: moduleManagerABI,
    functionName: "getModulesPaginated",
    ...config,
  } as UseContractReadConfig<typeof moduleManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"isModuleEnabled"`.
 */
export function useModuleManagerIsModuleEnabled<
  TFunctionName extends "isModuleEnabled",
  TSelectData = ReadContractResult<typeof moduleManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof moduleManagerABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: moduleManagerABI,
    functionName: "isModuleEnabled",
    ...config,
  } as UseContractReadConfig<typeof moduleManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link moduleManagerABI}__.
 */
export function useModuleManagerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof moduleManagerABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof moduleManagerABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof moduleManagerABI, TFunctionName, TMode>({
    abi: moduleManagerABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"disableModule"`.
 */
export function useModuleManagerDisableModule<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof moduleManagerABI,
          "disableModule"
        >["request"]["abi"],
        "disableModule",
        TMode
      > & { functionName?: "disableModule" }
    : UseContractWriteConfig<
        typeof moduleManagerABI,
        "disableModule",
        TMode
      > & {
        abi?: never;
        functionName?: "disableModule";
      } = {} as any,
) {
  return useContractWrite<typeof moduleManagerABI, "disableModule", TMode>({
    abi: moduleManagerABI,
    functionName: "disableModule",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"enableModule"`.
 */
export function useModuleManagerEnableModule<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof moduleManagerABI,
          "enableModule"
        >["request"]["abi"],
        "enableModule",
        TMode
      > & { functionName?: "enableModule" }
    : UseContractWriteConfig<typeof moduleManagerABI, "enableModule", TMode> & {
        abi?: never;
        functionName?: "enableModule";
      } = {} as any,
) {
  return useContractWrite<typeof moduleManagerABI, "enableModule", TMode>({
    abi: moduleManagerABI,
    functionName: "enableModule",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"execTransactionFromModule"`.
 */
export function useModuleManagerExecTransactionFromModule<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof moduleManagerABI,
          "execTransactionFromModule"
        >["request"]["abi"],
        "execTransactionFromModule",
        TMode
      > & { functionName?: "execTransactionFromModule" }
    : UseContractWriteConfig<
        typeof moduleManagerABI,
        "execTransactionFromModule",
        TMode
      > & {
        abi?: never;
        functionName?: "execTransactionFromModule";
      } = {} as any,
) {
  return useContractWrite<
    typeof moduleManagerABI,
    "execTransactionFromModule",
    TMode
  >({
    abi: moduleManagerABI,
    functionName: "execTransactionFromModule",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"execTransactionFromModuleReturnData"`.
 */
export function useModuleManagerExecTransactionFromModuleReturnData<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof moduleManagerABI,
          "execTransactionFromModuleReturnData"
        >["request"]["abi"],
        "execTransactionFromModuleReturnData",
        TMode
      > & { functionName?: "execTransactionFromModuleReturnData" }
    : UseContractWriteConfig<
        typeof moduleManagerABI,
        "execTransactionFromModuleReturnData",
        TMode
      > & {
        abi?: never;
        functionName?: "execTransactionFromModuleReturnData";
      } = {} as any,
) {
  return useContractWrite<
    typeof moduleManagerABI,
    "execTransactionFromModuleReturnData",
    TMode
  >({
    abi: moduleManagerABI,
    functionName: "execTransactionFromModuleReturnData",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"setGuard"`.
 */
export function useModuleManagerSetGuard<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof moduleManagerABI,
          "setGuard"
        >["request"]["abi"],
        "setGuard",
        TMode
      > & { functionName?: "setGuard" }
    : UseContractWriteConfig<typeof moduleManagerABI, "setGuard", TMode> & {
        abi?: never;
        functionName?: "setGuard";
      } = {} as any,
) {
  return useContractWrite<typeof moduleManagerABI, "setGuard", TMode>({
    abi: moduleManagerABI,
    functionName: "setGuard",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link moduleManagerABI}__.
 */
export function usePrepareModuleManagerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof moduleManagerABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: moduleManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof moduleManagerABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"disableModule"`.
 */
export function usePrepareModuleManagerDisableModule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof moduleManagerABI, "disableModule">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: moduleManagerABI,
    functionName: "disableModule",
    ...config,
  } as UsePrepareContractWriteConfig<typeof moduleManagerABI, "disableModule">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"enableModule"`.
 */
export function usePrepareModuleManagerEnableModule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof moduleManagerABI, "enableModule">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: moduleManagerABI,
    functionName: "enableModule",
    ...config,
  } as UsePrepareContractWriteConfig<typeof moduleManagerABI, "enableModule">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"execTransactionFromModule"`.
 */
export function usePrepareModuleManagerExecTransactionFromModule(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof moduleManagerABI,
      "execTransactionFromModule"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: moduleManagerABI,
    functionName: "execTransactionFromModule",
    ...config,
  } as UsePrepareContractWriteConfig<typeof moduleManagerABI, "execTransactionFromModule">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"execTransactionFromModuleReturnData"`.
 */
export function usePrepareModuleManagerExecTransactionFromModuleReturnData(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof moduleManagerABI,
      "execTransactionFromModuleReturnData"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: moduleManagerABI,
    functionName: "execTransactionFromModuleReturnData",
    ...config,
  } as UsePrepareContractWriteConfig<typeof moduleManagerABI, "execTransactionFromModuleReturnData">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link moduleManagerABI}__ and `functionName` set to `"setGuard"`.
 */
export function usePrepareModuleManagerSetGuard(
  config: Omit<
    UsePrepareContractWriteConfig<typeof moduleManagerABI, "setGuard">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: moduleManagerABI,
    functionName: "setGuard",
    ...config,
  } as UsePrepareContractWriteConfig<typeof moduleManagerABI, "setGuard">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link moduleManagerABI}__.
 */
export function useModuleManagerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof moduleManagerABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: moduleManagerABI,
    ...config,
  } as UseContractEventConfig<typeof moduleManagerABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link moduleManagerABI}__ and `eventName` set to `"ChangedGuard"`.
 */
export function useModuleManagerChangedGuardEvent(
  config: Omit<
    UseContractEventConfig<typeof moduleManagerABI, "ChangedGuard">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: moduleManagerABI,
    eventName: "ChangedGuard",
    ...config,
  } as UseContractEventConfig<typeof moduleManagerABI, "ChangedGuard">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link moduleManagerABI}__ and `eventName` set to `"DisabledModule"`.
 */
export function useModuleManagerDisabledModuleEvent(
  config: Omit<
    UseContractEventConfig<typeof moduleManagerABI, "DisabledModule">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: moduleManagerABI,
    eventName: "DisabledModule",
    ...config,
  } as UseContractEventConfig<typeof moduleManagerABI, "DisabledModule">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link moduleManagerABI}__ and `eventName` set to `"EnabledModule"`.
 */
export function useModuleManagerEnabledModuleEvent(
  config: Omit<
    UseContractEventConfig<typeof moduleManagerABI, "EnabledModule">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: moduleManagerABI,
    eventName: "EnabledModule",
    ...config,
  } as UseContractEventConfig<typeof moduleManagerABI, "EnabledModule">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link moduleManagerABI}__ and `eventName` set to `"ExecutionFromModuleFailure"`.
 */
export function useModuleManagerExecutionFromModuleFailureEvent(
  config: Omit<
    UseContractEventConfig<
      typeof moduleManagerABI,
      "ExecutionFromModuleFailure"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: moduleManagerABI,
    eventName: "ExecutionFromModuleFailure",
    ...config,
  } as UseContractEventConfig<typeof moduleManagerABI, "ExecutionFromModuleFailure">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link moduleManagerABI}__ and `eventName` set to `"ExecutionFromModuleSuccess"`.
 */
export function useModuleManagerExecutionFromModuleSuccessEvent(
  config: Omit<
    UseContractEventConfig<
      typeof moduleManagerABI,
      "ExecutionFromModuleSuccess"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: moduleManagerABI,
    eventName: "ExecutionFromModuleSuccess",
    ...config,
  } as UseContractEventConfig<typeof moduleManagerABI, "ExecutionFromModuleSuccess">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nativeCurrencyPaymentFallbackABI}__.
 */
export function useNativeCurrencyPaymentFallbackEvent<
  TEventName extends string,
>(
  config: Omit<
    UseContractEventConfig<typeof nativeCurrencyPaymentFallbackABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: nativeCurrencyPaymentFallbackABI,
    ...config,
  } as UseContractEventConfig<typeof nativeCurrencyPaymentFallbackABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link nativeCurrencyPaymentFallbackABI}__ and `eventName` set to `"SafeReceived"`.
 */
export function useNativeCurrencyPaymentFallbackSafeReceivedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof nativeCurrencyPaymentFallbackABI,
      "SafeReceived"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: nativeCurrencyPaymentFallbackABI,
    eventName: "SafeReceived",
    ...config,
  } as UseContractEventConfig<typeof nativeCurrencyPaymentFallbackABI, "SafeReceived">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    ...config,
  } as UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableOwner<
  TFunctionName extends "owner",
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    functionName: "owner",
    ...config,
  } as UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ownableABI, string>["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ownableABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, TFunctionName, TMode>({
    abi: ownableABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownableABI,
          "renounceOwnership"
        >["request"]["abi"],
        "renounceOwnership",
        TMode
      > & { functionName?: "renounceOwnership" }
    : UseContractWriteConfig<typeof ownableABI, "renounceOwnership", TMode> & {
        abi?: never;
        functionName?: "renounceOwnership";
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, "renounceOwnership", TMode>({
    abi: ownableABI,
    functionName: "renounceOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownableABI,
          "transferOwnership"
        >["request"]["abi"],
        "transferOwnership",
        TMode
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<typeof ownableABI, "transferOwnership", TMode> & {
        abi?: never;
        functionName?: "transferOwnership";
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, "transferOwnership", TMode>({
    abi: ownableABI,
    functionName: "transferOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, "renounceOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: "renounceOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, "renounceOwnership">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, "transferOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, "transferOwnership">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    ...config,
  } as UseContractEventConfig<typeof ownableABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, "OwnershipTransferred">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof ownableABI, "OwnershipTransferred">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownable2StepABI}__.
 */
export function useOwnable2StepRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownable2StepABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownable2StepABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: ownable2StepABI,
    ...config,
  } as UseContractReadConfig<typeof ownable2StepABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownable2StepABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnable2StepOwner<
  TFunctionName extends "owner",
  TSelectData = ReadContractResult<typeof ownable2StepABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownable2StepABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ownable2StepABI,
    functionName: "owner",
    ...config,
  } as UseContractReadConfig<typeof ownable2StepABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownable2StepABI}__ and `functionName` set to `"pendingOwner"`.
 */
export function useOwnable2StepPendingOwner<
  TFunctionName extends "pendingOwner",
  TSelectData = ReadContractResult<typeof ownable2StepABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownable2StepABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ownable2StepABI,
    functionName: "pendingOwner",
    ...config,
  } as UseContractReadConfig<typeof ownable2StepABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownable2StepABI}__.
 */
export function useOwnable2StepWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownable2StepABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ownable2StepABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof ownable2StepABI, TFunctionName, TMode>({
    abi: ownable2StepABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownable2StepABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function useOwnable2StepAcceptOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownable2StepABI,
          "acceptOwnership"
        >["request"]["abi"],
        "acceptOwnership",
        TMode
      > & { functionName?: "acceptOwnership" }
    : UseContractWriteConfig<
        typeof ownable2StepABI,
        "acceptOwnership",
        TMode
      > & {
        abi?: never;
        functionName?: "acceptOwnership";
      } = {} as any,
) {
  return useContractWrite<typeof ownable2StepABI, "acceptOwnership", TMode>({
    abi: ownable2StepABI,
    functionName: "acceptOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownable2StepABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnable2StepRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownable2StepABI,
          "renounceOwnership"
        >["request"]["abi"],
        "renounceOwnership",
        TMode
      > & { functionName?: "renounceOwnership" }
    : UseContractWriteConfig<
        typeof ownable2StepABI,
        "renounceOwnership",
        TMode
      > & {
        abi?: never;
        functionName?: "renounceOwnership";
      } = {} as any,
) {
  return useContractWrite<typeof ownable2StepABI, "renounceOwnership", TMode>({
    abi: ownable2StepABI,
    functionName: "renounceOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownable2StepABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnable2StepTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownable2StepABI,
          "transferOwnership"
        >["request"]["abi"],
        "transferOwnership",
        TMode
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<
        typeof ownable2StepABI,
        "transferOwnership",
        TMode
      > & {
        abi?: never;
        functionName?: "transferOwnership";
      } = {} as any,
) {
  return useContractWrite<typeof ownable2StepABI, "transferOwnership", TMode>({
    abi: ownable2StepABI,
    functionName: "transferOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownable2StepABI}__.
 */
export function usePrepareOwnable2StepWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownable2StepABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownable2StepABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownable2StepABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownable2StepABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function usePrepareOwnable2StepAcceptOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownable2StepABI, "acceptOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownable2StepABI,
    functionName: "acceptOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownable2StepABI, "acceptOwnership">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownable2StepABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnable2StepRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownable2StepABI, "renounceOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownable2StepABI,
    functionName: "renounceOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownable2StepABI, "renounceOwnership">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownable2StepABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnable2StepTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownable2StepABI, "transferOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownable2StepABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownable2StepABI, "transferOwnership">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownable2StepABI}__.
 */
export function useOwnable2StepEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ownable2StepABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: ownable2StepABI,
    ...config,
  } as UseContractEventConfig<typeof ownable2StepABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownable2StepABI}__ and `eventName` set to `"OwnershipTransferStarted"`.
 */
export function useOwnable2StepOwnershipTransferStartedEvent(
  config: Omit<
    UseContractEventConfig<typeof ownable2StepABI, "OwnershipTransferStarted">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: ownable2StepABI,
    eventName: "OwnershipTransferStarted",
    ...config,
  } as UseContractEventConfig<typeof ownable2StepABI, "OwnershipTransferStarted">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownable2StepABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnable2StepOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof ownable2StepABI, "OwnershipTransferred">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: ownable2StepABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof ownable2StepABI, "OwnershipTransferred">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownerManagerABI}__.
 */
export function useOwnerManagerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownerManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownerManagerABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: ownerManagerABI,
    ...config,
  } as UseContractReadConfig<typeof ownerManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"getOwners"`.
 */
export function useOwnerManagerGetOwners<
  TFunctionName extends "getOwners",
  TSelectData = ReadContractResult<typeof ownerManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownerManagerABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ownerManagerABI,
    functionName: "getOwners",
    ...config,
  } as UseContractReadConfig<typeof ownerManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"getThreshold"`.
 */
export function useOwnerManagerGetThreshold<
  TFunctionName extends "getThreshold",
  TSelectData = ReadContractResult<typeof ownerManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownerManagerABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ownerManagerABI,
    functionName: "getThreshold",
    ...config,
  } as UseContractReadConfig<typeof ownerManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"isOwner"`.
 */
export function useOwnerManagerIsOwner<
  TFunctionName extends "isOwner",
  TSelectData = ReadContractResult<typeof ownerManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownerManagerABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: ownerManagerABI,
    functionName: "isOwner",
    ...config,
  } as UseContractReadConfig<typeof ownerManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownerManagerABI}__.
 */
export function useOwnerManagerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownerManagerABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ownerManagerABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof ownerManagerABI, TFunctionName, TMode>({
    abi: ownerManagerABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"addOwnerWithThreshold"`.
 */
export function useOwnerManagerAddOwnerWithThreshold<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownerManagerABI,
          "addOwnerWithThreshold"
        >["request"]["abi"],
        "addOwnerWithThreshold",
        TMode
      > & { functionName?: "addOwnerWithThreshold" }
    : UseContractWriteConfig<
        typeof ownerManagerABI,
        "addOwnerWithThreshold",
        TMode
      > & {
        abi?: never;
        functionName?: "addOwnerWithThreshold";
      } = {} as any,
) {
  return useContractWrite<
    typeof ownerManagerABI,
    "addOwnerWithThreshold",
    TMode
  >({
    abi: ownerManagerABI,
    functionName: "addOwnerWithThreshold",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"changeThreshold"`.
 */
export function useOwnerManagerChangeThreshold<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownerManagerABI,
          "changeThreshold"
        >["request"]["abi"],
        "changeThreshold",
        TMode
      > & { functionName?: "changeThreshold" }
    : UseContractWriteConfig<
        typeof ownerManagerABI,
        "changeThreshold",
        TMode
      > & {
        abi?: never;
        functionName?: "changeThreshold";
      } = {} as any,
) {
  return useContractWrite<typeof ownerManagerABI, "changeThreshold", TMode>({
    abi: ownerManagerABI,
    functionName: "changeThreshold",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"removeOwner"`.
 */
export function useOwnerManagerRemoveOwner<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownerManagerABI,
          "removeOwner"
        >["request"]["abi"],
        "removeOwner",
        TMode
      > & { functionName?: "removeOwner" }
    : UseContractWriteConfig<typeof ownerManagerABI, "removeOwner", TMode> & {
        abi?: never;
        functionName?: "removeOwner";
      } = {} as any,
) {
  return useContractWrite<typeof ownerManagerABI, "removeOwner", TMode>({
    abi: ownerManagerABI,
    functionName: "removeOwner",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"swapOwner"`.
 */
export function useOwnerManagerSwapOwner<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownerManagerABI,
          "swapOwner"
        >["request"]["abi"],
        "swapOwner",
        TMode
      > & { functionName?: "swapOwner" }
    : UseContractWriteConfig<typeof ownerManagerABI, "swapOwner", TMode> & {
        abi?: never;
        functionName?: "swapOwner";
      } = {} as any,
) {
  return useContractWrite<typeof ownerManagerABI, "swapOwner", TMode>({
    abi: ownerManagerABI,
    functionName: "swapOwner",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownerManagerABI}__.
 */
export function usePrepareOwnerManagerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownerManagerABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownerManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownerManagerABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"addOwnerWithThreshold"`.
 */
export function usePrepareOwnerManagerAddOwnerWithThreshold(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ownerManagerABI,
      "addOwnerWithThreshold"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownerManagerABI,
    functionName: "addOwnerWithThreshold",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownerManagerABI, "addOwnerWithThreshold">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"changeThreshold"`.
 */
export function usePrepareOwnerManagerChangeThreshold(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownerManagerABI, "changeThreshold">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownerManagerABI,
    functionName: "changeThreshold",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownerManagerABI, "changeThreshold">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"removeOwner"`.
 */
export function usePrepareOwnerManagerRemoveOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownerManagerABI, "removeOwner">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownerManagerABI,
    functionName: "removeOwner",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownerManagerABI, "removeOwner">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownerManagerABI}__ and `functionName` set to `"swapOwner"`.
 */
export function usePrepareOwnerManagerSwapOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownerManagerABI, "swapOwner">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownerManagerABI,
    functionName: "swapOwner",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownerManagerABI, "swapOwner">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownerManagerABI}__.
 */
export function useOwnerManagerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ownerManagerABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: ownerManagerABI,
    ...config,
  } as UseContractEventConfig<typeof ownerManagerABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownerManagerABI}__ and `eventName` set to `"AddedOwner"`.
 */
export function useOwnerManagerAddedOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof ownerManagerABI, "AddedOwner">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: ownerManagerABI,
    eventName: "AddedOwner",
    ...config,
  } as UseContractEventConfig<typeof ownerManagerABI, "AddedOwner">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownerManagerABI}__ and `eventName` set to `"ChangedThreshold"`.
 */
export function useOwnerManagerChangedThresholdEvent(
  config: Omit<
    UseContractEventConfig<typeof ownerManagerABI, "ChangedThreshold">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: ownerManagerABI,
    eventName: "ChangedThreshold",
    ...config,
  } as UseContractEventConfig<typeof ownerManagerABI, "ChangedThreshold">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownerManagerABI}__ and `eventName` set to `"RemovedOwner"`.
 */
export function useOwnerManagerRemovedOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof ownerManagerABI, "RemovedOwner">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: ownerManagerABI,
    eventName: "RemovedOwner",
    ...config,
  } as UseContractEventConfig<typeof ownerManagerABI, "RemovedOwner">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSafeProtocolRegistryABI}__.
 */
export function useISafeProtocolRegistryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iSafeProtocolRegistryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSafeProtocolRegistryABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: iSafeProtocolRegistryABI,
    ...config,
  } as UseContractReadConfig<typeof iSafeProtocolRegistryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSafeProtocolRegistryABI}__ and `functionName` set to `"check"`.
 */
export function useISafeProtocolRegistryCheck<
  TFunctionName extends "check",
  TSelectData = ReadContractResult<
    typeof iSafeProtocolRegistryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSafeProtocolRegistryABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iSafeProtocolRegistryABI,
    functionName: "check",
    ...config,
  } as UseContractReadConfig<typeof iSafeProtocolRegistryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSafeProtocolRegistryABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useISafeProtocolRegistrySupportsInterface<
  TFunctionName extends "supportsInterface",
  TSelectData = ReadContractResult<
    typeof iSafeProtocolRegistryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSafeProtocolRegistryABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iSafeProtocolRegistryABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<typeof iSafeProtocolRegistryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryManagerABI}__.
 */
export function useRegistryManagerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof registryManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registryManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: registryManagerABI,
    ...config,
  } as UseContractReadConfig<typeof registryManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryManagerABI}__ and `functionName` set to `"owner"`.
 */
export function useRegistryManagerOwner<
  TFunctionName extends "owner",
  TSelectData = ReadContractResult<typeof registryManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registryManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: registryManagerABI,
    functionName: "owner",
    ...config,
  } as UseContractReadConfig<typeof registryManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryManagerABI}__ and `functionName` set to `"pendingOwner"`.
 */
export function useRegistryManagerPendingOwner<
  TFunctionName extends "pendingOwner",
  TSelectData = ReadContractResult<typeof registryManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registryManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: registryManagerABI,
    functionName: "pendingOwner",
    ...config,
  } as UseContractReadConfig<typeof registryManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryManagerABI}__ and `functionName` set to `"registry"`.
 */
export function useRegistryManagerRegistry<
  TFunctionName extends "registry",
  TSelectData = ReadContractResult<typeof registryManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof registryManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: registryManagerABI,
    functionName: "registry",
    ...config,
  } as UseContractReadConfig<typeof registryManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryManagerABI}__.
 */
export function useRegistryManagerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof registryManagerABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof registryManagerABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof registryManagerABI, TFunctionName, TMode>({
    abi: registryManagerABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryManagerABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function useRegistryManagerAcceptOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof registryManagerABI,
          "acceptOwnership"
        >["request"]["abi"],
        "acceptOwnership",
        TMode
      > & { functionName?: "acceptOwnership" }
    : UseContractWriteConfig<
        typeof registryManagerABI,
        "acceptOwnership",
        TMode
      > & {
        abi?: never;
        functionName?: "acceptOwnership";
      } = {} as any,
) {
  return useContractWrite<typeof registryManagerABI, "acceptOwnership", TMode>({
    abi: registryManagerABI,
    functionName: "acceptOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryManagerABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useRegistryManagerRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof registryManagerABI,
          "renounceOwnership"
        >["request"]["abi"],
        "renounceOwnership",
        TMode
      > & { functionName?: "renounceOwnership" }
    : UseContractWriteConfig<
        typeof registryManagerABI,
        "renounceOwnership",
        TMode
      > & {
        abi?: never;
        functionName?: "renounceOwnership";
      } = {} as any,
) {
  return useContractWrite<
    typeof registryManagerABI,
    "renounceOwnership",
    TMode
  >({
    abi: registryManagerABI,
    functionName: "renounceOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryManagerABI}__ and `functionName` set to `"setRegistry"`.
 */
export function useRegistryManagerSetRegistry<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof registryManagerABI,
          "setRegistry"
        >["request"]["abi"],
        "setRegistry",
        TMode
      > & { functionName?: "setRegistry" }
    : UseContractWriteConfig<
        typeof registryManagerABI,
        "setRegistry",
        TMode
      > & {
        abi?: never;
        functionName?: "setRegistry";
      } = {} as any,
) {
  return useContractWrite<typeof registryManagerABI, "setRegistry", TMode>({
    abi: registryManagerABI,
    functionName: "setRegistry",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryManagerABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useRegistryManagerTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof registryManagerABI,
          "transferOwnership"
        >["request"]["abi"],
        "transferOwnership",
        TMode
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<
        typeof registryManagerABI,
        "transferOwnership",
        TMode
      > & {
        abi?: never;
        functionName?: "transferOwnership";
      } = {} as any,
) {
  return useContractWrite<
    typeof registryManagerABI,
    "transferOwnership",
    TMode
  >({
    abi: registryManagerABI,
    functionName: "transferOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryManagerABI}__.
 */
export function usePrepareRegistryManagerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryManagerABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registryManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryManagerABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryManagerABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function usePrepareRegistryManagerAcceptOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryManagerABI, "acceptOwnership">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registryManagerABI,
    functionName: "acceptOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryManagerABI, "acceptOwnership">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryManagerABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareRegistryManagerRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registryManagerABI,
      "renounceOwnership"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registryManagerABI,
    functionName: "renounceOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryManagerABI, "renounceOwnership">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryManagerABI}__ and `functionName` set to `"setRegistry"`.
 */
export function usePrepareRegistryManagerSetRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryManagerABI, "setRegistry">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registryManagerABI,
    functionName: "setRegistry",
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryManagerABI, "setRegistry">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryManagerABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareRegistryManagerTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof registryManagerABI,
      "transferOwnership"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: registryManagerABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryManagerABI, "transferOwnership">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryManagerABI}__.
 */
export function useRegistryManagerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof registryManagerABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: registryManagerABI,
    ...config,
  } as UseContractEventConfig<typeof registryManagerABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryManagerABI}__ and `eventName` set to `"OwnershipTransferStarted"`.
 */
export function useRegistryManagerOwnershipTransferStartedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof registryManagerABI,
      "OwnershipTransferStarted"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: registryManagerABI,
    eventName: "OwnershipTransferStarted",
    ...config,
  } as UseContractEventConfig<typeof registryManagerABI, "OwnershipTransferStarted">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryManagerABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useRegistryManagerOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof registryManagerABI, "OwnershipTransferred">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: registryManagerABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof registryManagerABI, "OwnershipTransferred">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryManagerABI}__ and `eventName` set to `"RegistryChanged"`.
 */
export function useRegistryManagerRegistryChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof registryManagerABI, "RegistryChanged">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: registryManagerABI,
    eventName: "RegistryChanged",
    ...config,
  } as UseContractEventConfig<typeof registryManagerABI, "RegistryChanged">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__.
 */
export function useSafeRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({ abi: safeABI, ...config } as UseContractReadConfig<
    typeof safeABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"VERSION"`.
 */
export function useSafeVersion<
  TFunctionName extends "VERSION",
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: "VERSION",
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"approvedHashes"`.
 */
export function useSafeApprovedHashes<
  TFunctionName extends "approvedHashes",
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: "approvedHashes",
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"checkNSignatures"`.
 */
export function useSafeCheckNSignatures<
  TFunctionName extends "checkNSignatures",
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: "checkNSignatures",
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"checkSignatures"`.
 */
export function useSafeCheckSignatures<
  TFunctionName extends "checkSignatures",
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: "checkSignatures",
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"domainSeparator"`.
 */
export function useSafeDomainSeparator<
  TFunctionName extends "domainSeparator",
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: "domainSeparator",
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"getModulesPaginated"`.
 */
export function useSafeGetModulesPaginated<
  TFunctionName extends "getModulesPaginated",
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: "getModulesPaginated",
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"getOwners"`.
 */
export function useSafeGetOwners<
  TFunctionName extends "getOwners",
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: "getOwners",
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"getStorageAt"`.
 */
export function useSafeGetStorageAt<
  TFunctionName extends "getStorageAt",
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: "getStorageAt",
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"getThreshold"`.
 */
export function useSafeGetThreshold<
  TFunctionName extends "getThreshold",
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: "getThreshold",
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"getTransactionHash"`.
 */
export function useSafeGetTransactionHash<
  TFunctionName extends "getTransactionHash",
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: "getTransactionHash",
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"isModuleEnabled"`.
 */
export function useSafeIsModuleEnabled<
  TFunctionName extends "isModuleEnabled",
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: "isModuleEnabled",
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"isOwner"`.
 */
export function useSafeIsOwner<
  TFunctionName extends "isOwner",
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: "isOwner",
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"nonce"`.
 */
export function useSafeNonce<
  TFunctionName extends "nonce",
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: "nonce",
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"signedMessages"`.
 */
export function useSafeSignedMessages<
  TFunctionName extends "signedMessages",
  TSelectData = ReadContractResult<typeof safeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: safeABI,
    functionName: "signedMessages",
    ...config,
  } as UseContractReadConfig<typeof safeABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__.
 */
export function useSafeWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof safeABI, string>["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof safeABI, TFunctionName, TMode> & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, TFunctionName, TMode>({
    abi: safeABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"addOwnerWithThreshold"`.
 */
export function useSafeAddOwnerWithThreshold<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          "addOwnerWithThreshold"
        >["request"]["abi"],
        "addOwnerWithThreshold",
        TMode
      > & { functionName?: "addOwnerWithThreshold" }
    : UseContractWriteConfig<typeof safeABI, "addOwnerWithThreshold", TMode> & {
        abi?: never;
        functionName?: "addOwnerWithThreshold";
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, "addOwnerWithThreshold", TMode>({
    abi: safeABI,
    functionName: "addOwnerWithThreshold",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"approveHash"`.
 */
export function useSafeApproveHash<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          "approveHash"
        >["request"]["abi"],
        "approveHash",
        TMode
      > & { functionName?: "approveHash" }
    : UseContractWriteConfig<typeof safeABI, "approveHash", TMode> & {
        abi?: never;
        functionName?: "approveHash";
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, "approveHash", TMode>({
    abi: safeABI,
    functionName: "approveHash",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"changeThreshold"`.
 */
export function useSafeChangeThreshold<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          "changeThreshold"
        >["request"]["abi"],
        "changeThreshold",
        TMode
      > & { functionName?: "changeThreshold" }
    : UseContractWriteConfig<typeof safeABI, "changeThreshold", TMode> & {
        abi?: never;
        functionName?: "changeThreshold";
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, "changeThreshold", TMode>({
    abi: safeABI,
    functionName: "changeThreshold",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"disableModule"`.
 */
export function useSafeDisableModule<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          "disableModule"
        >["request"]["abi"],
        "disableModule",
        TMode
      > & { functionName?: "disableModule" }
    : UseContractWriteConfig<typeof safeABI, "disableModule", TMode> & {
        abi?: never;
        functionName?: "disableModule";
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, "disableModule", TMode>({
    abi: safeABI,
    functionName: "disableModule",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"enableModule"`.
 */
export function useSafeEnableModule<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          "enableModule"
        >["request"]["abi"],
        "enableModule",
        TMode
      > & { functionName?: "enableModule" }
    : UseContractWriteConfig<typeof safeABI, "enableModule", TMode> & {
        abi?: never;
        functionName?: "enableModule";
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, "enableModule", TMode>({
    abi: safeABI,
    functionName: "enableModule",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"execTransaction"`.
 */
export function useSafeExecTransaction<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          "execTransaction"
        >["request"]["abi"],
        "execTransaction",
        TMode
      > & { functionName?: "execTransaction" }
    : UseContractWriteConfig<typeof safeABI, "execTransaction", TMode> & {
        abi?: never;
        functionName?: "execTransaction";
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, "execTransaction", TMode>({
    abi: safeABI,
    functionName: "execTransaction",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"execTransactionFromModule"`.
 */
export function useSafeExecTransactionFromModule<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          "execTransactionFromModule"
        >["request"]["abi"],
        "execTransactionFromModule",
        TMode
      > & { functionName?: "execTransactionFromModule" }
    : UseContractWriteConfig<
        typeof safeABI,
        "execTransactionFromModule",
        TMode
      > & {
        abi?: never;
        functionName?: "execTransactionFromModule";
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, "execTransactionFromModule", TMode>({
    abi: safeABI,
    functionName: "execTransactionFromModule",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"execTransactionFromModuleReturnData"`.
 */
export function useSafeExecTransactionFromModuleReturnData<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          "execTransactionFromModuleReturnData"
        >["request"]["abi"],
        "execTransactionFromModuleReturnData",
        TMode
      > & { functionName?: "execTransactionFromModuleReturnData" }
    : UseContractWriteConfig<
        typeof safeABI,
        "execTransactionFromModuleReturnData",
        TMode
      > & {
        abi?: never;
        functionName?: "execTransactionFromModuleReturnData";
      } = {} as any,
) {
  return useContractWrite<
    typeof safeABI,
    "execTransactionFromModuleReturnData",
    TMode
  >({
    abi: safeABI,
    functionName: "execTransactionFromModuleReturnData",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"removeOwner"`.
 */
export function useSafeRemoveOwner<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          "removeOwner"
        >["request"]["abi"],
        "removeOwner",
        TMode
      > & { functionName?: "removeOwner" }
    : UseContractWriteConfig<typeof safeABI, "removeOwner", TMode> & {
        abi?: never;
        functionName?: "removeOwner";
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, "removeOwner", TMode>({
    abi: safeABI,
    functionName: "removeOwner",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"setFallbackHandler"`.
 */
export function useSafeSetFallbackHandler<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          "setFallbackHandler"
        >["request"]["abi"],
        "setFallbackHandler",
        TMode
      > & { functionName?: "setFallbackHandler" }
    : UseContractWriteConfig<typeof safeABI, "setFallbackHandler", TMode> & {
        abi?: never;
        functionName?: "setFallbackHandler";
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, "setFallbackHandler", TMode>({
    abi: safeABI,
    functionName: "setFallbackHandler",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"setGuard"`.
 */
export function useSafeSetGuard<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          "setGuard"
        >["request"]["abi"],
        "setGuard",
        TMode
      > & { functionName?: "setGuard" }
    : UseContractWriteConfig<typeof safeABI, "setGuard", TMode> & {
        abi?: never;
        functionName?: "setGuard";
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, "setGuard", TMode>({
    abi: safeABI,
    functionName: "setGuard",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"setup"`.
 */
export function useSafeSetup<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof safeABI, "setup">["request"]["abi"],
        "setup",
        TMode
      > & { functionName?: "setup" }
    : UseContractWriteConfig<typeof safeABI, "setup", TMode> & {
        abi?: never;
        functionName?: "setup";
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, "setup", TMode>({
    abi: safeABI,
    functionName: "setup",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"simulateAndRevert"`.
 */
export function useSafeSimulateAndRevert<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          "simulateAndRevert"
        >["request"]["abi"],
        "simulateAndRevert",
        TMode
      > & { functionName?: "simulateAndRevert" }
    : UseContractWriteConfig<typeof safeABI, "simulateAndRevert", TMode> & {
        abi?: never;
        functionName?: "simulateAndRevert";
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, "simulateAndRevert", TMode>({
    abi: safeABI,
    functionName: "simulateAndRevert",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"swapOwner"`.
 */
export function useSafeSwapOwner<TMode extends WriteContractMode = undefined>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeABI,
          "swapOwner"
        >["request"]["abi"],
        "swapOwner",
        TMode
      > & { functionName?: "swapOwner" }
    : UseContractWriteConfig<typeof safeABI, "swapOwner", TMode> & {
        abi?: never;
        functionName?: "swapOwner";
      } = {} as any,
) {
  return useContractWrite<typeof safeABI, "swapOwner", TMode>({
    abi: safeABI,
    functionName: "swapOwner",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__.
 */
export function usePrepareSafeWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"addOwnerWithThreshold"`.
 */
export function usePrepareSafeAddOwnerWithThreshold(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, "addOwnerWithThreshold">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: "addOwnerWithThreshold",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, "addOwnerWithThreshold">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"approveHash"`.
 */
export function usePrepareSafeApproveHash(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, "approveHash">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: "approveHash",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, "approveHash">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"changeThreshold"`.
 */
export function usePrepareSafeChangeThreshold(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, "changeThreshold">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: "changeThreshold",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, "changeThreshold">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"disableModule"`.
 */
export function usePrepareSafeDisableModule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, "disableModule">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: "disableModule",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, "disableModule">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"enableModule"`.
 */
export function usePrepareSafeEnableModule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, "enableModule">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: "enableModule",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, "enableModule">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"execTransaction"`.
 */
export function usePrepareSafeExecTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, "execTransaction">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: "execTransaction",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, "execTransaction">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"execTransactionFromModule"`.
 */
export function usePrepareSafeExecTransactionFromModule(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, "execTransactionFromModule">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: "execTransactionFromModule",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, "execTransactionFromModule">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"execTransactionFromModuleReturnData"`.
 */
export function usePrepareSafeExecTransactionFromModuleReturnData(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof safeABI,
      "execTransactionFromModuleReturnData"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: "execTransactionFromModuleReturnData",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, "execTransactionFromModuleReturnData">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"removeOwner"`.
 */
export function usePrepareSafeRemoveOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, "removeOwner">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: "removeOwner",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, "removeOwner">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"setFallbackHandler"`.
 */
export function usePrepareSafeSetFallbackHandler(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, "setFallbackHandler">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: "setFallbackHandler",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, "setFallbackHandler">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"setGuard"`.
 */
export function usePrepareSafeSetGuard(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, "setGuard">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: "setGuard",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, "setGuard">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"setup"`.
 */
export function usePrepareSafeSetup(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, "setup">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: "setup",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, "setup">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"simulateAndRevert"`.
 */
export function usePrepareSafeSimulateAndRevert(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, "simulateAndRevert">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: "simulateAndRevert",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, "simulateAndRevert">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeABI}__ and `functionName` set to `"swapOwner"`.
 */
export function usePrepareSafeSwapOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeABI, "swapOwner">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeABI,
    functionName: "swapOwner",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeABI, "swapOwner">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__.
 */
export function useSafeEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof safeABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({ abi: safeABI, ...config } as UseContractEventConfig<
    typeof safeABI,
    TEventName
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"AddedOwner"`.
 */
export function useSafeAddedOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, "AddedOwner">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: "AddedOwner",
    ...config,
  } as UseContractEventConfig<typeof safeABI, "AddedOwner">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"ApproveHash"`.
 */
export function useSafeApproveHashEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, "ApproveHash">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: "ApproveHash",
    ...config,
  } as UseContractEventConfig<typeof safeABI, "ApproveHash">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"ChangedFallbackHandler"`.
 */
export function useSafeChangedFallbackHandlerEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, "ChangedFallbackHandler">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: "ChangedFallbackHandler",
    ...config,
  } as UseContractEventConfig<typeof safeABI, "ChangedFallbackHandler">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"ChangedGuard"`.
 */
export function useSafeChangedGuardEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, "ChangedGuard">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: "ChangedGuard",
    ...config,
  } as UseContractEventConfig<typeof safeABI, "ChangedGuard">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"ChangedThreshold"`.
 */
export function useSafeChangedThresholdEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, "ChangedThreshold">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: "ChangedThreshold",
    ...config,
  } as UseContractEventConfig<typeof safeABI, "ChangedThreshold">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"DisabledModule"`.
 */
export function useSafeDisabledModuleEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, "DisabledModule">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: "DisabledModule",
    ...config,
  } as UseContractEventConfig<typeof safeABI, "DisabledModule">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"EnabledModule"`.
 */
export function useSafeEnabledModuleEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, "EnabledModule">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: "EnabledModule",
    ...config,
  } as UseContractEventConfig<typeof safeABI, "EnabledModule">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"ExecutionFailure"`.
 */
export function useSafeExecutionFailureEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, "ExecutionFailure">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: "ExecutionFailure",
    ...config,
  } as UseContractEventConfig<typeof safeABI, "ExecutionFailure">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"ExecutionFromModuleFailure"`.
 */
export function useSafeExecutionFromModuleFailureEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, "ExecutionFromModuleFailure">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: "ExecutionFromModuleFailure",
    ...config,
  } as UseContractEventConfig<typeof safeABI, "ExecutionFromModuleFailure">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"ExecutionFromModuleSuccess"`.
 */
export function useSafeExecutionFromModuleSuccessEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, "ExecutionFromModuleSuccess">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: "ExecutionFromModuleSuccess",
    ...config,
  } as UseContractEventConfig<typeof safeABI, "ExecutionFromModuleSuccess">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"ExecutionSuccess"`.
 */
export function useSafeExecutionSuccessEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, "ExecutionSuccess">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: "ExecutionSuccess",
    ...config,
  } as UseContractEventConfig<typeof safeABI, "ExecutionSuccess">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"RemovedOwner"`.
 */
export function useSafeRemovedOwnerEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, "RemovedOwner">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: "RemovedOwner",
    ...config,
  } as UseContractEventConfig<typeof safeABI, "RemovedOwner">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"SafeReceived"`.
 */
export function useSafeSafeReceivedEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, "SafeReceived">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: "SafeReceived",
    ...config,
  } as UseContractEventConfig<typeof safeABI, "SafeReceived">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"SafeSetup"`.
 */
export function useSafeSafeSetupEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, "SafeSetup">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: "SafeSetup",
    ...config,
  } as UseContractEventConfig<typeof safeABI, "SafeSetup">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeABI}__ and `eventName` set to `"SignMsg"`.
 */
export function useSafeSignMsgEvent(
  config: Omit<
    UseContractEventConfig<typeof safeABI, "SignMsg">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeABI,
    eventName: "SignMsg",
    ...config,
  } as UseContractEventConfig<typeof safeABI, "SignMsg">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeProtocolManagerABI}__.
 */
export function useSafeProtocolManagerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof safeProtocolManagerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof safeProtocolManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: safeProtocolManagerABI,
    ...config,
  } as UseContractReadConfig<typeof safeProtocolManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `functionName` set to `"enabledHooks"`.
 */
export function useSafeProtocolManagerEnabledHooks<
  TFunctionName extends "enabledHooks",
  TSelectData = ReadContractResult<
    typeof safeProtocolManagerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof safeProtocolManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: safeProtocolManagerABI,
    functionName: "enabledHooks",
    ...config,
  } as UseContractReadConfig<typeof safeProtocolManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `functionName` set to `"enabledPlugins"`.
 */
export function useSafeProtocolManagerEnabledPlugins<
  TFunctionName extends "enabledPlugins",
  TSelectData = ReadContractResult<
    typeof safeProtocolManagerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof safeProtocolManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: safeProtocolManagerABI,
    functionName: "enabledPlugins",
    ...config,
  } as UseContractReadConfig<typeof safeProtocolManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `functionName` set to `"getEnabledHooks"`.
 */
export function useSafeProtocolManagerGetEnabledHooks<
  TFunctionName extends "getEnabledHooks",
  TSelectData = ReadContractResult<
    typeof safeProtocolManagerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof safeProtocolManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: safeProtocolManagerABI,
    functionName: "getEnabledHooks",
    ...config,
  } as UseContractReadConfig<typeof safeProtocolManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `functionName` set to `"getPluginInfo"`.
 */
export function useSafeProtocolManagerGetPluginInfo<
  TFunctionName extends "getPluginInfo",
  TSelectData = ReadContractResult<
    typeof safeProtocolManagerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof safeProtocolManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: safeProtocolManagerABI,
    functionName: "getPluginInfo",
    ...config,
  } as UseContractReadConfig<typeof safeProtocolManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `functionName` set to `"getPluginsPaginated"`.
 */
export function useSafeProtocolManagerGetPluginsPaginated<
  TFunctionName extends "getPluginsPaginated",
  TSelectData = ReadContractResult<
    typeof safeProtocolManagerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof safeProtocolManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: safeProtocolManagerABI,
    functionName: "getPluginsPaginated",
    ...config,
  } as UseContractReadConfig<typeof safeProtocolManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `functionName` set to `"isPluginEnabled"`.
 */
export function useSafeProtocolManagerIsPluginEnabled<
  TFunctionName extends "isPluginEnabled",
  TSelectData = ReadContractResult<
    typeof safeProtocolManagerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof safeProtocolManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: safeProtocolManagerABI,
    functionName: "isPluginEnabled",
    ...config,
  } as UseContractReadConfig<typeof safeProtocolManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `functionName` set to `"owner"`.
 */
export function useSafeProtocolManagerOwner<
  TFunctionName extends "owner",
  TSelectData = ReadContractResult<
    typeof safeProtocolManagerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof safeProtocolManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: safeProtocolManagerABI,
    functionName: "owner",
    ...config,
  } as UseContractReadConfig<typeof safeProtocolManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `functionName` set to `"pendingOwner"`.
 */
export function useSafeProtocolManagerPendingOwner<
  TFunctionName extends "pendingOwner",
  TSelectData = ReadContractResult<
    typeof safeProtocolManagerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof safeProtocolManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: safeProtocolManagerABI,
    functionName: "pendingOwner",
    ...config,
  } as UseContractReadConfig<typeof safeProtocolManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `functionName` set to `"registry"`.
 */
export function useSafeProtocolManagerRegistry<
  TFunctionName extends "registry",
  TSelectData = ReadContractResult<
    typeof safeProtocolManagerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof safeProtocolManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: safeProtocolManagerABI,
    functionName: "registry",
    ...config,
  } as UseContractReadConfig<typeof safeProtocolManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeProtocolManagerABI}__.
 */
export function useSafeProtocolManagerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeProtocolManagerABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof safeProtocolManagerABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof safeProtocolManagerABI, TFunctionName, TMode>({
    abi: safeProtocolManagerABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function useSafeProtocolManagerAcceptOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeProtocolManagerABI,
          "acceptOwnership"
        >["request"]["abi"],
        "acceptOwnership",
        TMode
      > & { functionName?: "acceptOwnership" }
    : UseContractWriteConfig<
        typeof safeProtocolManagerABI,
        "acceptOwnership",
        TMode
      > & {
        abi?: never;
        functionName?: "acceptOwnership";
      } = {} as any,
) {
  return useContractWrite<
    typeof safeProtocolManagerABI,
    "acceptOwnership",
    TMode
  >({
    abi: safeProtocolManagerABI,
    functionName: "acceptOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `functionName` set to `"disablePlugin"`.
 */
export function useSafeProtocolManagerDisablePlugin<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeProtocolManagerABI,
          "disablePlugin"
        >["request"]["abi"],
        "disablePlugin",
        TMode
      > & { functionName?: "disablePlugin" }
    : UseContractWriteConfig<
        typeof safeProtocolManagerABI,
        "disablePlugin",
        TMode
      > & {
        abi?: never;
        functionName?: "disablePlugin";
      } = {} as any,
) {
  return useContractWrite<
    typeof safeProtocolManagerABI,
    "disablePlugin",
    TMode
  >({
    abi: safeProtocolManagerABI,
    functionName: "disablePlugin",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `functionName` set to `"enablePlugin"`.
 */
export function useSafeProtocolManagerEnablePlugin<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeProtocolManagerABI,
          "enablePlugin"
        >["request"]["abi"],
        "enablePlugin",
        TMode
      > & { functionName?: "enablePlugin" }
    : UseContractWriteConfig<
        typeof safeProtocolManagerABI,
        "enablePlugin",
        TMode
      > & {
        abi?: never;
        functionName?: "enablePlugin";
      } = {} as any,
) {
  return useContractWrite<typeof safeProtocolManagerABI, "enablePlugin", TMode>(
    {
      abi: safeProtocolManagerABI,
      functionName: "enablePlugin",
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `functionName` set to `"executeRootAccess"`.
 */
export function useSafeProtocolManagerExecuteRootAccess<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeProtocolManagerABI,
          "executeRootAccess"
        >["request"]["abi"],
        "executeRootAccess",
        TMode
      > & { functionName?: "executeRootAccess" }
    : UseContractWriteConfig<
        typeof safeProtocolManagerABI,
        "executeRootAccess",
        TMode
      > & {
        abi?: never;
        functionName?: "executeRootAccess";
      } = {} as any,
) {
  return useContractWrite<
    typeof safeProtocolManagerABI,
    "executeRootAccess",
    TMode
  >({
    abi: safeProtocolManagerABI,
    functionName: "executeRootAccess",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `functionName` set to `"executeTransaction"`.
 */
export function useSafeProtocolManagerExecuteTransaction<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeProtocolManagerABI,
          "executeTransaction"
        >["request"]["abi"],
        "executeTransaction",
        TMode
      > & { functionName?: "executeTransaction" }
    : UseContractWriteConfig<
        typeof safeProtocolManagerABI,
        "executeTransaction",
        TMode
      > & {
        abi?: never;
        functionName?: "executeTransaction";
      } = {} as any,
) {
  return useContractWrite<
    typeof safeProtocolManagerABI,
    "executeTransaction",
    TMode
  >({
    abi: safeProtocolManagerABI,
    functionName: "executeTransaction",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useSafeProtocolManagerRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeProtocolManagerABI,
          "renounceOwnership"
        >["request"]["abi"],
        "renounceOwnership",
        TMode
      > & { functionName?: "renounceOwnership" }
    : UseContractWriteConfig<
        typeof safeProtocolManagerABI,
        "renounceOwnership",
        TMode
      > & {
        abi?: never;
        functionName?: "renounceOwnership";
      } = {} as any,
) {
  return useContractWrite<
    typeof safeProtocolManagerABI,
    "renounceOwnership",
    TMode
  >({
    abi: safeProtocolManagerABI,
    functionName: "renounceOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `functionName` set to `"setHooks"`.
 */
export function useSafeProtocolManagerSetHooks<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeProtocolManagerABI,
          "setHooks"
        >["request"]["abi"],
        "setHooks",
        TMode
      > & { functionName?: "setHooks" }
    : UseContractWriteConfig<
        typeof safeProtocolManagerABI,
        "setHooks",
        TMode
      > & {
        abi?: never;
        functionName?: "setHooks";
      } = {} as any,
) {
  return useContractWrite<typeof safeProtocolManagerABI, "setHooks", TMode>({
    abi: safeProtocolManagerABI,
    functionName: "setHooks",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `functionName` set to `"setRegistry"`.
 */
export function useSafeProtocolManagerSetRegistry<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeProtocolManagerABI,
          "setRegistry"
        >["request"]["abi"],
        "setRegistry",
        TMode
      > & { functionName?: "setRegistry" }
    : UseContractWriteConfig<
        typeof safeProtocolManagerABI,
        "setRegistry",
        TMode
      > & {
        abi?: never;
        functionName?: "setRegistry";
      } = {} as any,
) {
  return useContractWrite<typeof safeProtocolManagerABI, "setRegistry", TMode>({
    abi: safeProtocolManagerABI,
    functionName: "setRegistry",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useSafeProtocolManagerTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeProtocolManagerABI,
          "transferOwnership"
        >["request"]["abi"],
        "transferOwnership",
        TMode
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<
        typeof safeProtocolManagerABI,
        "transferOwnership",
        TMode
      > & {
        abi?: never;
        functionName?: "transferOwnership";
      } = {} as any,
) {
  return useContractWrite<
    typeof safeProtocolManagerABI,
    "transferOwnership",
    TMode
  >({
    abi: safeProtocolManagerABI,
    functionName: "transferOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeProtocolManagerABI}__.
 */
export function usePrepareSafeProtocolManagerWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeProtocolManagerABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeProtocolManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeProtocolManagerABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function usePrepareSafeProtocolManagerAcceptOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof safeProtocolManagerABI,
      "acceptOwnership"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeProtocolManagerABI,
    functionName: "acceptOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeProtocolManagerABI, "acceptOwnership">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `functionName` set to `"disablePlugin"`.
 */
export function usePrepareSafeProtocolManagerDisablePlugin(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof safeProtocolManagerABI,
      "disablePlugin"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeProtocolManagerABI,
    functionName: "disablePlugin",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeProtocolManagerABI, "disablePlugin">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `functionName` set to `"enablePlugin"`.
 */
export function usePrepareSafeProtocolManagerEnablePlugin(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof safeProtocolManagerABI,
      "enablePlugin"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeProtocolManagerABI,
    functionName: "enablePlugin",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeProtocolManagerABI, "enablePlugin">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `functionName` set to `"executeRootAccess"`.
 */
export function usePrepareSafeProtocolManagerExecuteRootAccess(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof safeProtocolManagerABI,
      "executeRootAccess"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeProtocolManagerABI,
    functionName: "executeRootAccess",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeProtocolManagerABI, "executeRootAccess">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `functionName` set to `"executeTransaction"`.
 */
export function usePrepareSafeProtocolManagerExecuteTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof safeProtocolManagerABI,
      "executeTransaction"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeProtocolManagerABI,
    functionName: "executeTransaction",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeProtocolManagerABI, "executeTransaction">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareSafeProtocolManagerRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof safeProtocolManagerABI,
      "renounceOwnership"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeProtocolManagerABI,
    functionName: "renounceOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeProtocolManagerABI, "renounceOwnership">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `functionName` set to `"setHooks"`.
 */
export function usePrepareSafeProtocolManagerSetHooks(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeProtocolManagerABI, "setHooks">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeProtocolManagerABI,
    functionName: "setHooks",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeProtocolManagerABI, "setHooks">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `functionName` set to `"setRegistry"`.
 */
export function usePrepareSafeProtocolManagerSetRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeProtocolManagerABI, "setRegistry">,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeProtocolManagerABI,
    functionName: "setRegistry",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeProtocolManagerABI, "setRegistry">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareSafeProtocolManagerTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof safeProtocolManagerABI,
      "transferOwnership"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeProtocolManagerABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeProtocolManagerABI, "transferOwnership">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeProtocolManagerABI}__.
 */
export function useSafeProtocolManagerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof safeProtocolManagerABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeProtocolManagerABI,
    ...config,
  } as UseContractEventConfig<typeof safeProtocolManagerABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `eventName` set to `"ActionsExecuted"`.
 */
export function useSafeProtocolManagerActionsExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof safeProtocolManagerABI, "ActionsExecuted">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeProtocolManagerABI,
    eventName: "ActionsExecuted",
    ...config,
  } as UseContractEventConfig<typeof safeProtocolManagerABI, "ActionsExecuted">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `eventName` set to `"HooksChanged"`.
 */
export function useSafeProtocolManagerHooksChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof safeProtocolManagerABI, "HooksChanged">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeProtocolManagerABI,
    eventName: "HooksChanged",
    ...config,
  } as UseContractEventConfig<typeof safeProtocolManagerABI, "HooksChanged">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `eventName` set to `"OwnershipTransferStarted"`.
 */
export function useSafeProtocolManagerOwnershipTransferStartedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof safeProtocolManagerABI,
      "OwnershipTransferStarted"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeProtocolManagerABI,
    eventName: "OwnershipTransferStarted",
    ...config,
  } as UseContractEventConfig<typeof safeProtocolManagerABI, "OwnershipTransferStarted">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useSafeProtocolManagerOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof safeProtocolManagerABI,
      "OwnershipTransferred"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeProtocolManagerABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof safeProtocolManagerABI, "OwnershipTransferred">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `eventName` set to `"PluginDisabled"`.
 */
export function useSafeProtocolManagerPluginDisabledEvent(
  config: Omit<
    UseContractEventConfig<typeof safeProtocolManagerABI, "PluginDisabled">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeProtocolManagerABI,
    eventName: "PluginDisabled",
    ...config,
  } as UseContractEventConfig<typeof safeProtocolManagerABI, "PluginDisabled">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `eventName` set to `"PluginEnabled"`.
 */
export function useSafeProtocolManagerPluginEnabledEvent(
  config: Omit<
    UseContractEventConfig<typeof safeProtocolManagerABI, "PluginEnabled">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeProtocolManagerABI,
    eventName: "PluginEnabled",
    ...config,
  } as UseContractEventConfig<typeof safeProtocolManagerABI, "PluginEnabled">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `eventName` set to `"RegistryChanged"`.
 */
export function useSafeProtocolManagerRegistryChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof safeProtocolManagerABI, "RegistryChanged">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeProtocolManagerABI,
    eventName: "RegistryChanged",
    ...config,
  } as UseContractEventConfig<typeof safeProtocolManagerABI, "RegistryChanged">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeProtocolManagerABI}__ and `eventName` set to `"RootAccessActionExecuted"`.
 */
export function useSafeProtocolManagerRootAccessActionExecutedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof safeProtocolManagerABI,
      "RootAccessActionExecuted"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeProtocolManagerABI,
    eventName: "RootAccessActionExecuted",
    ...config,
  } as UseContractEventConfig<typeof safeProtocolManagerABI, "RootAccessActionExecuted">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeProtocolRegistryABI}__.
 */
export function useSafeProtocolRegistryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof safeProtocolRegistryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof safeProtocolRegistryABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: safeProtocolRegistryABI,
    ...config,
  } as UseContractReadConfig<typeof safeProtocolRegistryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeProtocolRegistryABI}__ and `functionName` set to `"check"`.
 */
export function useSafeProtocolRegistryCheck<
  TFunctionName extends "check",
  TSelectData = ReadContractResult<
    typeof safeProtocolRegistryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof safeProtocolRegistryABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: safeProtocolRegistryABI,
    functionName: "check",
    ...config,
  } as UseContractReadConfig<typeof safeProtocolRegistryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeProtocolRegistryABI}__ and `functionName` set to `"listedIntegrations"`.
 */
export function useSafeProtocolRegistryListedIntegrations<
  TFunctionName extends "listedIntegrations",
  TSelectData = ReadContractResult<
    typeof safeProtocolRegistryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof safeProtocolRegistryABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: safeProtocolRegistryABI,
    functionName: "listedIntegrations",
    ...config,
  } as UseContractReadConfig<typeof safeProtocolRegistryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeProtocolRegistryABI}__ and `functionName` set to `"owner"`.
 */
export function useSafeProtocolRegistryOwner<
  TFunctionName extends "owner",
  TSelectData = ReadContractResult<
    typeof safeProtocolRegistryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof safeProtocolRegistryABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: safeProtocolRegistryABI,
    functionName: "owner",
    ...config,
  } as UseContractReadConfig<typeof safeProtocolRegistryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeProtocolRegistryABI}__ and `functionName` set to `"pendingOwner"`.
 */
export function useSafeProtocolRegistryPendingOwner<
  TFunctionName extends "pendingOwner",
  TSelectData = ReadContractResult<
    typeof safeProtocolRegistryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof safeProtocolRegistryABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: safeProtocolRegistryABI,
    functionName: "pendingOwner",
    ...config,
  } as UseContractReadConfig<typeof safeProtocolRegistryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeProtocolRegistryABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useSafeProtocolRegistrySupportsInterface<
  TFunctionName extends "supportsInterface",
  TSelectData = ReadContractResult<
    typeof safeProtocolRegistryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof safeProtocolRegistryABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: safeProtocolRegistryABI,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<typeof safeProtocolRegistryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeProtocolRegistryABI}__.
 */
export function useSafeProtocolRegistryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeProtocolRegistryABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof safeProtocolRegistryABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof safeProtocolRegistryABI, TFunctionName, TMode>(
    { abi: safeProtocolRegistryABI, ...config } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeProtocolRegistryABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function useSafeProtocolRegistryAcceptOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeProtocolRegistryABI,
          "acceptOwnership"
        >["request"]["abi"],
        "acceptOwnership",
        TMode
      > & { functionName?: "acceptOwnership" }
    : UseContractWriteConfig<
        typeof safeProtocolRegistryABI,
        "acceptOwnership",
        TMode
      > & {
        abi?: never;
        functionName?: "acceptOwnership";
      } = {} as any,
) {
  return useContractWrite<
    typeof safeProtocolRegistryABI,
    "acceptOwnership",
    TMode
  >({
    abi: safeProtocolRegistryABI,
    functionName: "acceptOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeProtocolRegistryABI}__ and `functionName` set to `"addIntegration"`.
 */
export function useSafeProtocolRegistryAddIntegration<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeProtocolRegistryABI,
          "addIntegration"
        >["request"]["abi"],
        "addIntegration",
        TMode
      > & { functionName?: "addIntegration" }
    : UseContractWriteConfig<
        typeof safeProtocolRegistryABI,
        "addIntegration",
        TMode
      > & {
        abi?: never;
        functionName?: "addIntegration";
      } = {} as any,
) {
  return useContractWrite<
    typeof safeProtocolRegistryABI,
    "addIntegration",
    TMode
  >({
    abi: safeProtocolRegistryABI,
    functionName: "addIntegration",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeProtocolRegistryABI}__ and `functionName` set to `"flagIntegration"`.
 */
export function useSafeProtocolRegistryFlagIntegration<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeProtocolRegistryABI,
          "flagIntegration"
        >["request"]["abi"],
        "flagIntegration",
        TMode
      > & { functionName?: "flagIntegration" }
    : UseContractWriteConfig<
        typeof safeProtocolRegistryABI,
        "flagIntegration",
        TMode
      > & {
        abi?: never;
        functionName?: "flagIntegration";
      } = {} as any,
) {
  return useContractWrite<
    typeof safeProtocolRegistryABI,
    "flagIntegration",
    TMode
  >({
    abi: safeProtocolRegistryABI,
    functionName: "flagIntegration",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeProtocolRegistryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useSafeProtocolRegistryRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeProtocolRegistryABI,
          "renounceOwnership"
        >["request"]["abi"],
        "renounceOwnership",
        TMode
      > & { functionName?: "renounceOwnership" }
    : UseContractWriteConfig<
        typeof safeProtocolRegistryABI,
        "renounceOwnership",
        TMode
      > & {
        abi?: never;
        functionName?: "renounceOwnership";
      } = {} as any,
) {
  return useContractWrite<
    typeof safeProtocolRegistryABI,
    "renounceOwnership",
    TMode
  >({
    abi: safeProtocolRegistryABI,
    functionName: "renounceOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeProtocolRegistryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useSafeProtocolRegistryTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeProtocolRegistryABI,
          "transferOwnership"
        >["request"]["abi"],
        "transferOwnership",
        TMode
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<
        typeof safeProtocolRegistryABI,
        "transferOwnership",
        TMode
      > & {
        abi?: never;
        functionName?: "transferOwnership";
      } = {} as any,
) {
  return useContractWrite<
    typeof safeProtocolRegistryABI,
    "transferOwnership",
    TMode
  >({
    abi: safeProtocolRegistryABI,
    functionName: "transferOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeProtocolRegistryABI}__.
 */
export function usePrepareSafeProtocolRegistryWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof safeProtocolRegistryABI,
      TFunctionName
    >,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeProtocolRegistryABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeProtocolRegistryABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeProtocolRegistryABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function usePrepareSafeProtocolRegistryAcceptOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof safeProtocolRegistryABI,
      "acceptOwnership"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeProtocolRegistryABI,
    functionName: "acceptOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeProtocolRegistryABI, "acceptOwnership">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeProtocolRegistryABI}__ and `functionName` set to `"addIntegration"`.
 */
export function usePrepareSafeProtocolRegistryAddIntegration(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof safeProtocolRegistryABI,
      "addIntegration"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeProtocolRegistryABI,
    functionName: "addIntegration",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeProtocolRegistryABI, "addIntegration">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeProtocolRegistryABI}__ and `functionName` set to `"flagIntegration"`.
 */
export function usePrepareSafeProtocolRegistryFlagIntegration(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof safeProtocolRegistryABI,
      "flagIntegration"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeProtocolRegistryABI,
    functionName: "flagIntegration",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeProtocolRegistryABI, "flagIntegration">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeProtocolRegistryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareSafeProtocolRegistryRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof safeProtocolRegistryABI,
      "renounceOwnership"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeProtocolRegistryABI,
    functionName: "renounceOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeProtocolRegistryABI, "renounceOwnership">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeProtocolRegistryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareSafeProtocolRegistryTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof safeProtocolRegistryABI,
      "transferOwnership"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeProtocolRegistryABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeProtocolRegistryABI, "transferOwnership">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeProtocolRegistryABI}__.
 */
export function useSafeProtocolRegistryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof safeProtocolRegistryABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeProtocolRegistryABI,
    ...config,
  } as UseContractEventConfig<typeof safeProtocolRegistryABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeProtocolRegistryABI}__ and `eventName` set to `"IntegrationAdded"`.
 */
export function useSafeProtocolRegistryIntegrationAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof safeProtocolRegistryABI, "IntegrationAdded">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeProtocolRegistryABI,
    eventName: "IntegrationAdded",
    ...config,
  } as UseContractEventConfig<typeof safeProtocolRegistryABI, "IntegrationAdded">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeProtocolRegistryABI}__ and `eventName` set to `"IntegrationFlagged"`.
 */
export function useSafeProtocolRegistryIntegrationFlaggedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof safeProtocolRegistryABI,
      "IntegrationFlagged"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeProtocolRegistryABI,
    eventName: "IntegrationFlagged",
    ...config,
  } as UseContractEventConfig<typeof safeProtocolRegistryABI, "IntegrationFlagged">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeProtocolRegistryABI}__ and `eventName` set to `"OwnershipTransferStarted"`.
 */
export function useSafeProtocolRegistryOwnershipTransferStartedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof safeProtocolRegistryABI,
      "OwnershipTransferStarted"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeProtocolRegistryABI,
    eventName: "OwnershipTransferStarted",
    ...config,
  } as UseContractEventConfig<typeof safeProtocolRegistryABI, "OwnershipTransferStarted">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeProtocolRegistryABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useSafeProtocolRegistryOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof safeProtocolRegistryABI,
      "OwnershipTransferred"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeProtocolRegistryABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof safeProtocolRegistryABI, "OwnershipTransferred">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iProxyABI}__.
 */
export function useIProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iProxyABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iProxyABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({ abi: iProxyABI, ...config } as UseContractReadConfig<
    typeof iProxyABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iProxyABI}__ and `functionName` set to `"masterCopy"`.
 */
export function useIProxyMasterCopy<
  TFunctionName extends "masterCopy",
  TSelectData = ReadContractResult<typeof iProxyABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iProxyABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: iProxyABI,
    functionName: "masterCopy",
    ...config,
  } as UseContractReadConfig<typeof iProxyABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeProxyFactoryABI}__.
 */
export function useSafeProxyFactoryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof safeProxyFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof safeProxyFactoryABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: safeProxyFactoryABI,
    ...config,
  } as UseContractReadConfig<typeof safeProxyFactoryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeProxyFactoryABI}__ and `functionName` set to `"getChainId"`.
 */
export function useSafeProxyFactoryGetChainId<
  TFunctionName extends "getChainId",
  TSelectData = ReadContractResult<typeof safeProxyFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof safeProxyFactoryABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: safeProxyFactoryABI,
    functionName: "getChainId",
    ...config,
  } as UseContractReadConfig<typeof safeProxyFactoryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link safeProxyFactoryABI}__ and `functionName` set to `"proxyCreationCode"`.
 */
export function useSafeProxyFactoryProxyCreationCode<
  TFunctionName extends "proxyCreationCode",
  TSelectData = ReadContractResult<typeof safeProxyFactoryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof safeProxyFactoryABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: safeProxyFactoryABI,
    functionName: "proxyCreationCode",
    ...config,
  } as UseContractReadConfig<typeof safeProxyFactoryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeProxyFactoryABI}__.
 */
export function useSafeProxyFactoryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeProxyFactoryABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof safeProxyFactoryABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof safeProxyFactoryABI, TFunctionName, TMode>({
    abi: safeProxyFactoryABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeProxyFactoryABI}__ and `functionName` set to `"createChainSpecificProxyWithNonce"`.
 */
export function useSafeProxyFactoryCreateChainSpecificProxyWithNonce<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeProxyFactoryABI,
          "createChainSpecificProxyWithNonce"
        >["request"]["abi"],
        "createChainSpecificProxyWithNonce",
        TMode
      > & { functionName?: "createChainSpecificProxyWithNonce" }
    : UseContractWriteConfig<
        typeof safeProxyFactoryABI,
        "createChainSpecificProxyWithNonce",
        TMode
      > & {
        abi?: never;
        functionName?: "createChainSpecificProxyWithNonce";
      } = {} as any,
) {
  return useContractWrite<
    typeof safeProxyFactoryABI,
    "createChainSpecificProxyWithNonce",
    TMode
  >({
    abi: safeProxyFactoryABI,
    functionName: "createChainSpecificProxyWithNonce",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeProxyFactoryABI}__ and `functionName` set to `"createProxyWithCallback"`.
 */
export function useSafeProxyFactoryCreateProxyWithCallback<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeProxyFactoryABI,
          "createProxyWithCallback"
        >["request"]["abi"],
        "createProxyWithCallback",
        TMode
      > & { functionName?: "createProxyWithCallback" }
    : UseContractWriteConfig<
        typeof safeProxyFactoryABI,
        "createProxyWithCallback",
        TMode
      > & {
        abi?: never;
        functionName?: "createProxyWithCallback";
      } = {} as any,
) {
  return useContractWrite<
    typeof safeProxyFactoryABI,
    "createProxyWithCallback",
    TMode
  >({
    abi: safeProxyFactoryABI,
    functionName: "createProxyWithCallback",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link safeProxyFactoryABI}__ and `functionName` set to `"createProxyWithNonce"`.
 */
export function useSafeProxyFactoryCreateProxyWithNonce<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof safeProxyFactoryABI,
          "createProxyWithNonce"
        >["request"]["abi"],
        "createProxyWithNonce",
        TMode
      > & { functionName?: "createProxyWithNonce" }
    : UseContractWriteConfig<
        typeof safeProxyFactoryABI,
        "createProxyWithNonce",
        TMode
      > & {
        abi?: never;
        functionName?: "createProxyWithNonce";
      } = {} as any,
) {
  return useContractWrite<
    typeof safeProxyFactoryABI,
    "createProxyWithNonce",
    TMode
  >({
    abi: safeProxyFactoryABI,
    functionName: "createProxyWithNonce",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeProxyFactoryABI}__.
 */
export function usePrepareSafeProxyFactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof safeProxyFactoryABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeProxyFactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeProxyFactoryABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeProxyFactoryABI}__ and `functionName` set to `"createChainSpecificProxyWithNonce"`.
 */
export function usePrepareSafeProxyFactoryCreateChainSpecificProxyWithNonce(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof safeProxyFactoryABI,
      "createChainSpecificProxyWithNonce"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeProxyFactoryABI,
    functionName: "createChainSpecificProxyWithNonce",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeProxyFactoryABI, "createChainSpecificProxyWithNonce">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeProxyFactoryABI}__ and `functionName` set to `"createProxyWithCallback"`.
 */
export function usePrepareSafeProxyFactoryCreateProxyWithCallback(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof safeProxyFactoryABI,
      "createProxyWithCallback"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeProxyFactoryABI,
    functionName: "createProxyWithCallback",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeProxyFactoryABI, "createProxyWithCallback">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link safeProxyFactoryABI}__ and `functionName` set to `"createProxyWithNonce"`.
 */
export function usePrepareSafeProxyFactoryCreateProxyWithNonce(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof safeProxyFactoryABI,
      "createProxyWithNonce"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: safeProxyFactoryABI,
    functionName: "createProxyWithNonce",
    ...config,
  } as UsePrepareContractWriteConfig<typeof safeProxyFactoryABI, "createProxyWithNonce">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeProxyFactoryABI}__.
 */
export function useSafeProxyFactoryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof safeProxyFactoryABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeProxyFactoryABI,
    ...config,
  } as UseContractEventConfig<typeof safeProxyFactoryABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link safeProxyFactoryABI}__ and `eventName` set to `"ProxyCreation"`.
 */
export function useSafeProxyFactoryProxyCreationEvent(
  config: Omit<
    UseContractEventConfig<typeof safeProxyFactoryABI, "ProxyCreation">,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: safeProxyFactoryABI,
    eventName: "ProxyCreation",
    ...config,
  } as UseContractEventConfig<typeof safeProxyFactoryABI, "ProxyCreation">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semverABI}__.
 */
export function useSemverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof semverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof semverABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any,
) {
  return useContractRead({ abi: semverABI, ...config } as UseContractReadConfig<
    typeof semverABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semverABI}__ and `functionName` set to `"version"`.
 */
export function useSemverVersion<
  TFunctionName extends "version",
  TSelectData = ReadContractResult<typeof semverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof semverABI, TFunctionName, TSelectData>,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: semverABI,
    functionName: "version",
    ...config,
  } as UseContractReadConfig<typeof semverABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link smartGardenManagerABI}__.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function useSmartGardenManagerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof smartGardenManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof smartGardenManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address"
  > & { chainId?: keyof typeof smartGardenManagerAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    ...config,
  } as UseContractReadConfig<typeof smartGardenManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link smartGardenManagerABI}__ and `functionName` set to `"enabledHooks"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function useSmartGardenManagerEnabledHooks<
  TFunctionName extends "enabledHooks",
  TSelectData = ReadContractResult<typeof smartGardenManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof smartGardenManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof smartGardenManagerAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    functionName: "enabledHooks",
    ...config,
  } as UseContractReadConfig<typeof smartGardenManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link smartGardenManagerABI}__ and `functionName` set to `"enabledPlugins"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function useSmartGardenManagerEnabledPlugins<
  TFunctionName extends "enabledPlugins",
  TSelectData = ReadContractResult<typeof smartGardenManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof smartGardenManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof smartGardenManagerAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    functionName: "enabledPlugins",
    ...config,
  } as UseContractReadConfig<typeof smartGardenManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link smartGardenManagerABI}__ and `functionName` set to `"getEnabledHooks"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function useSmartGardenManagerGetEnabledHooks<
  TFunctionName extends "getEnabledHooks",
  TSelectData = ReadContractResult<typeof smartGardenManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof smartGardenManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof smartGardenManagerAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    functionName: "getEnabledHooks",
    ...config,
  } as UseContractReadConfig<typeof smartGardenManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link smartGardenManagerABI}__ and `functionName` set to `"getPluginInfo"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function useSmartGardenManagerGetPluginInfo<
  TFunctionName extends "getPluginInfo",
  TSelectData = ReadContractResult<typeof smartGardenManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof smartGardenManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof smartGardenManagerAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    functionName: "getPluginInfo",
    ...config,
  } as UseContractReadConfig<typeof smartGardenManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link smartGardenManagerABI}__ and `functionName` set to `"getPluginsPaginated"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function useSmartGardenManagerGetPluginsPaginated<
  TFunctionName extends "getPluginsPaginated",
  TSelectData = ReadContractResult<typeof smartGardenManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof smartGardenManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof smartGardenManagerAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    functionName: "getPluginsPaginated",
    ...config,
  } as UseContractReadConfig<typeof smartGardenManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link smartGardenManagerABI}__ and `functionName` set to `"isPluginEnabled"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function useSmartGardenManagerIsPluginEnabled<
  TFunctionName extends "isPluginEnabled",
  TSelectData = ReadContractResult<typeof smartGardenManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof smartGardenManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof smartGardenManagerAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    functionName: "isPluginEnabled",
    ...config,
  } as UseContractReadConfig<typeof smartGardenManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link smartGardenManagerABI}__ and `functionName` set to `"owner"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function useSmartGardenManagerOwner<
  TFunctionName extends "owner",
  TSelectData = ReadContractResult<typeof smartGardenManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof smartGardenManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof smartGardenManagerAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    functionName: "owner",
    ...config,
  } as UseContractReadConfig<typeof smartGardenManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link smartGardenManagerABI}__ and `functionName` set to `"pendingOwner"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function useSmartGardenManagerPendingOwner<
  TFunctionName extends "pendingOwner",
  TSelectData = ReadContractResult<typeof smartGardenManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof smartGardenManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof smartGardenManagerAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    functionName: "pendingOwner",
    ...config,
  } as UseContractReadConfig<typeof smartGardenManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link smartGardenManagerABI}__ and `functionName` set to `"registry"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function useSmartGardenManagerRegistry<
  TFunctionName extends "registry",
  TSelectData = ReadContractResult<typeof smartGardenManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof smartGardenManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof smartGardenManagerAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractRead({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    functionName: "registry",
    ...config,
  } as UseContractReadConfig<typeof smartGardenManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link smartGardenManagerABI}__.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function useSmartGardenManagerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof smartGardenManagerAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof smartGardenManagerABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      > & { address?: Address; chainId?: TChainId }
    : UseContractWriteConfig<
        typeof smartGardenManagerABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
      } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractWrite<typeof smartGardenManagerABI, TFunctionName, TMode>({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link smartGardenManagerABI}__ and `functionName` set to `"acceptOwnership"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function useSmartGardenManagerAcceptOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof smartGardenManagerAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof smartGardenManagerABI,
          "acceptOwnership"
        >["request"]["abi"],
        "acceptOwnership",
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: "acceptOwnership";
      }
    : UseContractWriteConfig<
        typeof smartGardenManagerABI,
        "acceptOwnership",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "acceptOwnership";
      } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractWrite<
    typeof smartGardenManagerABI,
    "acceptOwnership",
    TMode
  >({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    functionName: "acceptOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link smartGardenManagerABI}__ and `functionName` set to `"disablePlugin"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function useSmartGardenManagerDisablePlugin<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof smartGardenManagerAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof smartGardenManagerABI,
          "disablePlugin"
        >["request"]["abi"],
        "disablePlugin",
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: "disablePlugin";
      }
    : UseContractWriteConfig<
        typeof smartGardenManagerABI,
        "disablePlugin",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "disablePlugin";
      } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractWrite<typeof smartGardenManagerABI, "disablePlugin", TMode>(
    {
      abi: smartGardenManagerABI,
      address:
        smartGardenManagerAddress[
          chainId as keyof typeof smartGardenManagerAddress
        ],
      functionName: "disablePlugin",
      ...config,
    } as any,
  );
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link smartGardenManagerABI}__ and `functionName` set to `"enablePlugin"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function useSmartGardenManagerEnablePlugin<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof smartGardenManagerAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof smartGardenManagerABI,
          "enablePlugin"
        >["request"]["abi"],
        "enablePlugin",
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: "enablePlugin";
      }
    : UseContractWriteConfig<
        typeof smartGardenManagerABI,
        "enablePlugin",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "enablePlugin";
      } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractWrite<typeof smartGardenManagerABI, "enablePlugin", TMode>({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    functionName: "enablePlugin",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link smartGardenManagerABI}__ and `functionName` set to `"enablePluginWithConfig"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function useSmartGardenManagerEnablePluginWithConfig<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof smartGardenManagerAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof smartGardenManagerABI,
          "enablePluginWithConfig"
        >["request"]["abi"],
        "enablePluginWithConfig",
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: "enablePluginWithConfig";
      }
    : UseContractWriteConfig<
        typeof smartGardenManagerABI,
        "enablePluginWithConfig",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "enablePluginWithConfig";
      } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractWrite<
    typeof smartGardenManagerABI,
    "enablePluginWithConfig",
    TMode
  >({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    functionName: "enablePluginWithConfig",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link smartGardenManagerABI}__ and `functionName` set to `"executeRootAccess"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function useSmartGardenManagerExecuteRootAccess<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof smartGardenManagerAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof smartGardenManagerABI,
          "executeRootAccess"
        >["request"]["abi"],
        "executeRootAccess",
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: "executeRootAccess";
      }
    : UseContractWriteConfig<
        typeof smartGardenManagerABI,
        "executeRootAccess",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "executeRootAccess";
      } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractWrite<
    typeof smartGardenManagerABI,
    "executeRootAccess",
    TMode
  >({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    functionName: "executeRootAccess",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link smartGardenManagerABI}__ and `functionName` set to `"executeTransaction"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function useSmartGardenManagerExecuteTransaction<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof smartGardenManagerAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof smartGardenManagerABI,
          "executeTransaction"
        >["request"]["abi"],
        "executeTransaction",
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: "executeTransaction";
      }
    : UseContractWriteConfig<
        typeof smartGardenManagerABI,
        "executeTransaction",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "executeTransaction";
      } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractWrite<
    typeof smartGardenManagerABI,
    "executeTransaction",
    TMode
  >({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    functionName: "executeTransaction",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link smartGardenManagerABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function useSmartGardenManagerRenounceOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof smartGardenManagerAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof smartGardenManagerABI,
          "renounceOwnership"
        >["request"]["abi"],
        "renounceOwnership",
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: "renounceOwnership";
      }
    : UseContractWriteConfig<
        typeof smartGardenManagerABI,
        "renounceOwnership",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "renounceOwnership";
      } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractWrite<
    typeof smartGardenManagerABI,
    "renounceOwnership",
    TMode
  >({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    functionName: "renounceOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link smartGardenManagerABI}__ and `functionName` set to `"setHooks"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function useSmartGardenManagerSetHooks<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof smartGardenManagerAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof smartGardenManagerABI,
          "setHooks"
        >["request"]["abi"],
        "setHooks",
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: "setHooks" }
    : UseContractWriteConfig<
        typeof smartGardenManagerABI,
        "setHooks",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "setHooks";
      } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractWrite<typeof smartGardenManagerABI, "setHooks", TMode>({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    functionName: "setHooks",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link smartGardenManagerABI}__ and `functionName` set to `"setRegistry"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function useSmartGardenManagerSetRegistry<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof smartGardenManagerAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof smartGardenManagerABI,
          "setRegistry"
        >["request"]["abi"],
        "setRegistry",
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: "setRegistry";
      }
    : UseContractWriteConfig<
        typeof smartGardenManagerABI,
        "setRegistry",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "setRegistry";
      } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractWrite<typeof smartGardenManagerABI, "setRegistry", TMode>({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    functionName: "setRegistry",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link smartGardenManagerABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function useSmartGardenManagerTransferOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof smartGardenManagerAddress,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof smartGardenManagerABI,
          "transferOwnership"
        >["request"]["abi"],
        "transferOwnership",
        TMode
      > & {
        address?: Address;
        chainId?: TChainId;
        functionName?: "transferOwnership";
      }
    : UseContractWriteConfig<
        typeof smartGardenManagerABI,
        "transferOwnership",
        TMode
      > & {
        abi?: never;
        address?: never;
        chainId?: TChainId;
        functionName?: "transferOwnership";
      } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractWrite<
    typeof smartGardenManagerABI,
    "transferOwnership",
    TMode
  >({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    functionName: "transferOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link smartGardenManagerABI}__.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function usePrepareSmartGardenManagerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof smartGardenManagerABI, TFunctionName>,
    "abi" | "address"
  > & { chainId?: keyof typeof smartGardenManagerAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return usePrepareContractWrite({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    ...config,
  } as UsePrepareContractWriteConfig<typeof smartGardenManagerABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link smartGardenManagerABI}__ and `functionName` set to `"acceptOwnership"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function usePrepareSmartGardenManagerAcceptOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof smartGardenManagerABI,
      "acceptOwnership"
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof smartGardenManagerAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return usePrepareContractWrite({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    functionName: "acceptOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof smartGardenManagerABI, "acceptOwnership">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link smartGardenManagerABI}__ and `functionName` set to `"disablePlugin"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function usePrepareSmartGardenManagerDisablePlugin(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof smartGardenManagerABI,
      "disablePlugin"
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof smartGardenManagerAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return usePrepareContractWrite({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    functionName: "disablePlugin",
    ...config,
  } as UsePrepareContractWriteConfig<typeof smartGardenManagerABI, "disablePlugin">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link smartGardenManagerABI}__ and `functionName` set to `"enablePlugin"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function usePrepareSmartGardenManagerEnablePlugin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof smartGardenManagerABI, "enablePlugin">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof smartGardenManagerAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return usePrepareContractWrite({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    functionName: "enablePlugin",
    ...config,
  } as UsePrepareContractWriteConfig<typeof smartGardenManagerABI, "enablePlugin">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link smartGardenManagerABI}__ and `functionName` set to `"enablePluginWithConfig"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function usePrepareSmartGardenManagerEnablePluginWithConfig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof smartGardenManagerABI,
      "enablePluginWithConfig"
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof smartGardenManagerAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return usePrepareContractWrite({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    functionName: "enablePluginWithConfig",
    ...config,
  } as UsePrepareContractWriteConfig<typeof smartGardenManagerABI, "enablePluginWithConfig">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link smartGardenManagerABI}__ and `functionName` set to `"executeRootAccess"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function usePrepareSmartGardenManagerExecuteRootAccess(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof smartGardenManagerABI,
      "executeRootAccess"
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof smartGardenManagerAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return usePrepareContractWrite({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    functionName: "executeRootAccess",
    ...config,
  } as UsePrepareContractWriteConfig<typeof smartGardenManagerABI, "executeRootAccess">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link smartGardenManagerABI}__ and `functionName` set to `"executeTransaction"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function usePrepareSmartGardenManagerExecuteTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof smartGardenManagerABI,
      "executeTransaction"
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof smartGardenManagerAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return usePrepareContractWrite({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    functionName: "executeTransaction",
    ...config,
  } as UsePrepareContractWriteConfig<typeof smartGardenManagerABI, "executeTransaction">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link smartGardenManagerABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function usePrepareSmartGardenManagerRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof smartGardenManagerABI,
      "renounceOwnership"
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof smartGardenManagerAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return usePrepareContractWrite({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    functionName: "renounceOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof smartGardenManagerABI, "renounceOwnership">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link smartGardenManagerABI}__ and `functionName` set to `"setHooks"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function usePrepareSmartGardenManagerSetHooks(
  config: Omit<
    UsePrepareContractWriteConfig<typeof smartGardenManagerABI, "setHooks">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof smartGardenManagerAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return usePrepareContractWrite({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    functionName: "setHooks",
    ...config,
  } as UsePrepareContractWriteConfig<typeof smartGardenManagerABI, "setHooks">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link smartGardenManagerABI}__ and `functionName` set to `"setRegistry"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function usePrepareSmartGardenManagerSetRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof smartGardenManagerABI, "setRegistry">,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof smartGardenManagerAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return usePrepareContractWrite({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    functionName: "setRegistry",
    ...config,
  } as UsePrepareContractWriteConfig<typeof smartGardenManagerABI, "setRegistry">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link smartGardenManagerABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function usePrepareSmartGardenManagerTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof smartGardenManagerABI,
      "transferOwnership"
    >,
    "abi" | "address" | "functionName"
  > & { chainId?: keyof typeof smartGardenManagerAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return usePrepareContractWrite({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof smartGardenManagerABI, "transferOwnership">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link smartGardenManagerABI}__.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function useSmartGardenManagerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof smartGardenManagerABI, TEventName>,
    "abi" | "address"
  > & { chainId?: keyof typeof smartGardenManagerAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractEvent({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    ...config,
  } as UseContractEventConfig<typeof smartGardenManagerABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link smartGardenManagerABI}__ and `eventName` set to `"ActionsExecuted"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function useSmartGardenManagerActionsExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof smartGardenManagerABI, "ActionsExecuted">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof smartGardenManagerAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractEvent({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    eventName: "ActionsExecuted",
    ...config,
  } as UseContractEventConfig<typeof smartGardenManagerABI, "ActionsExecuted">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link smartGardenManagerABI}__ and `eventName` set to `"HooksChanged"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function useSmartGardenManagerHooksChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof smartGardenManagerABI, "HooksChanged">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof smartGardenManagerAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractEvent({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    eventName: "HooksChanged",
    ...config,
  } as UseContractEventConfig<typeof smartGardenManagerABI, "HooksChanged">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link smartGardenManagerABI}__ and `eventName` set to `"OwnershipTransferStarted"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function useSmartGardenManagerOwnershipTransferStartedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof smartGardenManagerABI,
      "OwnershipTransferStarted"
    >,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof smartGardenManagerAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractEvent({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    eventName: "OwnershipTransferStarted",
    ...config,
  } as UseContractEventConfig<typeof smartGardenManagerABI, "OwnershipTransferStarted">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link smartGardenManagerABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function useSmartGardenManagerOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof smartGardenManagerABI,
      "OwnershipTransferred"
    >,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof smartGardenManagerAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractEvent({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof smartGardenManagerABI, "OwnershipTransferred">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link smartGardenManagerABI}__ and `eventName` set to `"PluginDisabled"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function useSmartGardenManagerPluginDisabledEvent(
  config: Omit<
    UseContractEventConfig<typeof smartGardenManagerABI, "PluginDisabled">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof smartGardenManagerAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractEvent({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    eventName: "PluginDisabled",
    ...config,
  } as UseContractEventConfig<typeof smartGardenManagerABI, "PluginDisabled">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link smartGardenManagerABI}__ and `eventName` set to `"PluginEnabled"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function useSmartGardenManagerPluginEnabledEvent(
  config: Omit<
    UseContractEventConfig<typeof smartGardenManagerABI, "PluginEnabled">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof smartGardenManagerAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractEvent({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    eventName: "PluginEnabled",
    ...config,
  } as UseContractEventConfig<typeof smartGardenManagerABI, "PluginEnabled">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link smartGardenManagerABI}__ and `eventName` set to `"RegistryChanged"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function useSmartGardenManagerRegistryChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof smartGardenManagerABI, "RegistryChanged">,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof smartGardenManagerAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractEvent({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    eventName: "RegistryChanged",
    ...config,
  } as UseContractEventConfig<typeof smartGardenManagerABI, "RegistryChanged">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link smartGardenManagerABI}__ and `eventName` set to `"RootAccessActionExecuted"`.
 *
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * - [__View Contract on Optimism Goerli Etherscan__](https://goerli-optimism.etherscan.io/address/0xfD20C63554A9916816dC5e5Df596A0333185F263)
 * -
 */
export function useSmartGardenManagerRootAccessActionExecutedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof smartGardenManagerABI,
      "RootAccessActionExecuted"
    >,
    "abi" | "address" | "eventName"
  > & { chainId?: keyof typeof smartGardenManagerAddress } = {} as any,
) {
  const { chain } = useNetwork();
  const chainId = config.chainId ?? chain?.id;
  return useContractEvent({
    abi: smartGardenManagerABI,
    address:
      smartGardenManagerAddress[
        chainId as keyof typeof smartGardenManagerAddress
      ],
    eventName: "RootAccessActionExecuted",
    ...config,
  } as UseContractEventConfig<typeof smartGardenManagerABI, "RootAccessActionExecuted">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__.
 */
export function useSmartGardenProtocolManagerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof smartGardenProtocolManagerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof smartGardenProtocolManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: smartGardenProtocolManagerABI,
    ...config,
  } as UseContractReadConfig<typeof smartGardenProtocolManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `functionName` set to `"enabledHooks"`.
 */
export function useSmartGardenProtocolManagerEnabledHooks<
  TFunctionName extends "enabledHooks",
  TSelectData = ReadContractResult<
    typeof smartGardenProtocolManagerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof smartGardenProtocolManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: smartGardenProtocolManagerABI,
    functionName: "enabledHooks",
    ...config,
  } as UseContractReadConfig<typeof smartGardenProtocolManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `functionName` set to `"enabledPlugins"`.
 */
export function useSmartGardenProtocolManagerEnabledPlugins<
  TFunctionName extends "enabledPlugins",
  TSelectData = ReadContractResult<
    typeof smartGardenProtocolManagerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof smartGardenProtocolManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: smartGardenProtocolManagerABI,
    functionName: "enabledPlugins",
    ...config,
  } as UseContractReadConfig<typeof smartGardenProtocolManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `functionName` set to `"getEnabledHooks"`.
 */
export function useSmartGardenProtocolManagerGetEnabledHooks<
  TFunctionName extends "getEnabledHooks",
  TSelectData = ReadContractResult<
    typeof smartGardenProtocolManagerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof smartGardenProtocolManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: smartGardenProtocolManagerABI,
    functionName: "getEnabledHooks",
    ...config,
  } as UseContractReadConfig<typeof smartGardenProtocolManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `functionName` set to `"getPluginInfo"`.
 */
export function useSmartGardenProtocolManagerGetPluginInfo<
  TFunctionName extends "getPluginInfo",
  TSelectData = ReadContractResult<
    typeof smartGardenProtocolManagerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof smartGardenProtocolManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: smartGardenProtocolManagerABI,
    functionName: "getPluginInfo",
    ...config,
  } as UseContractReadConfig<typeof smartGardenProtocolManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `functionName` set to `"getPluginsPaginated"`.
 */
export function useSmartGardenProtocolManagerGetPluginsPaginated<
  TFunctionName extends "getPluginsPaginated",
  TSelectData = ReadContractResult<
    typeof smartGardenProtocolManagerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof smartGardenProtocolManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: smartGardenProtocolManagerABI,
    functionName: "getPluginsPaginated",
    ...config,
  } as UseContractReadConfig<typeof smartGardenProtocolManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `functionName` set to `"isPluginEnabled"`.
 */
export function useSmartGardenProtocolManagerIsPluginEnabled<
  TFunctionName extends "isPluginEnabled",
  TSelectData = ReadContractResult<
    typeof smartGardenProtocolManagerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof smartGardenProtocolManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: smartGardenProtocolManagerABI,
    functionName: "isPluginEnabled",
    ...config,
  } as UseContractReadConfig<typeof smartGardenProtocolManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `functionName` set to `"owner"`.
 */
export function useSmartGardenProtocolManagerOwner<
  TFunctionName extends "owner",
  TSelectData = ReadContractResult<
    typeof smartGardenProtocolManagerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof smartGardenProtocolManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: smartGardenProtocolManagerABI,
    functionName: "owner",
    ...config,
  } as UseContractReadConfig<typeof smartGardenProtocolManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `functionName` set to `"pendingOwner"`.
 */
export function useSmartGardenProtocolManagerPendingOwner<
  TFunctionName extends "pendingOwner",
  TSelectData = ReadContractResult<
    typeof smartGardenProtocolManagerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof smartGardenProtocolManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: smartGardenProtocolManagerABI,
    functionName: "pendingOwner",
    ...config,
  } as UseContractReadConfig<typeof smartGardenProtocolManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `functionName` set to `"registry"`.
 */
export function useSmartGardenProtocolManagerRegistry<
  TFunctionName extends "registry",
  TSelectData = ReadContractResult<
    typeof smartGardenProtocolManagerABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof smartGardenProtocolManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: smartGardenProtocolManagerABI,
    functionName: "registry",
    ...config,
  } as UseContractReadConfig<typeof smartGardenProtocolManagerABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__.
 */
export function useSmartGardenProtocolManagerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof smartGardenProtocolManagerABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof smartGardenProtocolManagerABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<
    typeof smartGardenProtocolManagerABI,
    TFunctionName,
    TMode
  >({ abi: smartGardenProtocolManagerABI, ...config } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function useSmartGardenProtocolManagerAcceptOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof smartGardenProtocolManagerABI,
          "acceptOwnership"
        >["request"]["abi"],
        "acceptOwnership",
        TMode
      > & { functionName?: "acceptOwnership" }
    : UseContractWriteConfig<
        typeof smartGardenProtocolManagerABI,
        "acceptOwnership",
        TMode
      > & {
        abi?: never;
        functionName?: "acceptOwnership";
      } = {} as any,
) {
  return useContractWrite<
    typeof smartGardenProtocolManagerABI,
    "acceptOwnership",
    TMode
  >({
    abi: smartGardenProtocolManagerABI,
    functionName: "acceptOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `functionName` set to `"disablePlugin"`.
 */
export function useSmartGardenProtocolManagerDisablePlugin<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof smartGardenProtocolManagerABI,
          "disablePlugin"
        >["request"]["abi"],
        "disablePlugin",
        TMode
      > & { functionName?: "disablePlugin" }
    : UseContractWriteConfig<
        typeof smartGardenProtocolManagerABI,
        "disablePlugin",
        TMode
      > & {
        abi?: never;
        functionName?: "disablePlugin";
      } = {} as any,
) {
  return useContractWrite<
    typeof smartGardenProtocolManagerABI,
    "disablePlugin",
    TMode
  >({
    abi: smartGardenProtocolManagerABI,
    functionName: "disablePlugin",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `functionName` set to `"enablePlugin"`.
 */
export function useSmartGardenProtocolManagerEnablePlugin<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof smartGardenProtocolManagerABI,
          "enablePlugin"
        >["request"]["abi"],
        "enablePlugin",
        TMode
      > & { functionName?: "enablePlugin" }
    : UseContractWriteConfig<
        typeof smartGardenProtocolManagerABI,
        "enablePlugin",
        TMode
      > & {
        abi?: never;
        functionName?: "enablePlugin";
      } = {} as any,
) {
  return useContractWrite<
    typeof smartGardenProtocolManagerABI,
    "enablePlugin",
    TMode
  >({
    abi: smartGardenProtocolManagerABI,
    functionName: "enablePlugin",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `functionName` set to `"enablePluginWithConfig"`.
 */
export function useSmartGardenProtocolManagerEnablePluginWithConfig<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof smartGardenProtocolManagerABI,
          "enablePluginWithConfig"
        >["request"]["abi"],
        "enablePluginWithConfig",
        TMode
      > & { functionName?: "enablePluginWithConfig" }
    : UseContractWriteConfig<
        typeof smartGardenProtocolManagerABI,
        "enablePluginWithConfig",
        TMode
      > & {
        abi?: never;
        functionName?: "enablePluginWithConfig";
      } = {} as any,
) {
  return useContractWrite<
    typeof smartGardenProtocolManagerABI,
    "enablePluginWithConfig",
    TMode
  >({
    abi: smartGardenProtocolManagerABI,
    functionName: "enablePluginWithConfig",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `functionName` set to `"executeRootAccess"`.
 */
export function useSmartGardenProtocolManagerExecuteRootAccess<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof smartGardenProtocolManagerABI,
          "executeRootAccess"
        >["request"]["abi"],
        "executeRootAccess",
        TMode
      > & { functionName?: "executeRootAccess" }
    : UseContractWriteConfig<
        typeof smartGardenProtocolManagerABI,
        "executeRootAccess",
        TMode
      > & {
        abi?: never;
        functionName?: "executeRootAccess";
      } = {} as any,
) {
  return useContractWrite<
    typeof smartGardenProtocolManagerABI,
    "executeRootAccess",
    TMode
  >({
    abi: smartGardenProtocolManagerABI,
    functionName: "executeRootAccess",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `functionName` set to `"executeTransaction"`.
 */
export function useSmartGardenProtocolManagerExecuteTransaction<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof smartGardenProtocolManagerABI,
          "executeTransaction"
        >["request"]["abi"],
        "executeTransaction",
        TMode
      > & { functionName?: "executeTransaction" }
    : UseContractWriteConfig<
        typeof smartGardenProtocolManagerABI,
        "executeTransaction",
        TMode
      > & {
        abi?: never;
        functionName?: "executeTransaction";
      } = {} as any,
) {
  return useContractWrite<
    typeof smartGardenProtocolManagerABI,
    "executeTransaction",
    TMode
  >({
    abi: smartGardenProtocolManagerABI,
    functionName: "executeTransaction",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useSmartGardenProtocolManagerRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof smartGardenProtocolManagerABI,
          "renounceOwnership"
        >["request"]["abi"],
        "renounceOwnership",
        TMode
      > & { functionName?: "renounceOwnership" }
    : UseContractWriteConfig<
        typeof smartGardenProtocolManagerABI,
        "renounceOwnership",
        TMode
      > & {
        abi?: never;
        functionName?: "renounceOwnership";
      } = {} as any,
) {
  return useContractWrite<
    typeof smartGardenProtocolManagerABI,
    "renounceOwnership",
    TMode
  >({
    abi: smartGardenProtocolManagerABI,
    functionName: "renounceOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `functionName` set to `"setHooks"`.
 */
export function useSmartGardenProtocolManagerSetHooks<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof smartGardenProtocolManagerABI,
          "setHooks"
        >["request"]["abi"],
        "setHooks",
        TMode
      > & { functionName?: "setHooks" }
    : UseContractWriteConfig<
        typeof smartGardenProtocolManagerABI,
        "setHooks",
        TMode
      > & {
        abi?: never;
        functionName?: "setHooks";
      } = {} as any,
) {
  return useContractWrite<
    typeof smartGardenProtocolManagerABI,
    "setHooks",
    TMode
  >({
    abi: smartGardenProtocolManagerABI,
    functionName: "setHooks",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `functionName` set to `"setRegistry"`.
 */
export function useSmartGardenProtocolManagerSetRegistry<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof smartGardenProtocolManagerABI,
          "setRegistry"
        >["request"]["abi"],
        "setRegistry",
        TMode
      > & { functionName?: "setRegistry" }
    : UseContractWriteConfig<
        typeof smartGardenProtocolManagerABI,
        "setRegistry",
        TMode
      > & {
        abi?: never;
        functionName?: "setRegistry";
      } = {} as any,
) {
  return useContractWrite<
    typeof smartGardenProtocolManagerABI,
    "setRegistry",
    TMode
  >({
    abi: smartGardenProtocolManagerABI,
    functionName: "setRegistry",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useSmartGardenProtocolManagerTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof smartGardenProtocolManagerABI,
          "transferOwnership"
        >["request"]["abi"],
        "transferOwnership",
        TMode
      > & { functionName?: "transferOwnership" }
    : UseContractWriteConfig<
        typeof smartGardenProtocolManagerABI,
        "transferOwnership",
        TMode
      > & {
        abi?: never;
        functionName?: "transferOwnership";
      } = {} as any,
) {
  return useContractWrite<
    typeof smartGardenProtocolManagerABI,
    "transferOwnership",
    TMode
  >({
    abi: smartGardenProtocolManagerABI,
    functionName: "transferOwnership",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__.
 */
export function usePrepareSmartGardenProtocolManagerWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof smartGardenProtocolManagerABI,
      TFunctionName
    >,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: smartGardenProtocolManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof smartGardenProtocolManagerABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `functionName` set to `"acceptOwnership"`.
 */
export function usePrepareSmartGardenProtocolManagerAcceptOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof smartGardenProtocolManagerABI,
      "acceptOwnership"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: smartGardenProtocolManagerABI,
    functionName: "acceptOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof smartGardenProtocolManagerABI, "acceptOwnership">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `functionName` set to `"disablePlugin"`.
 */
export function usePrepareSmartGardenProtocolManagerDisablePlugin(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof smartGardenProtocolManagerABI,
      "disablePlugin"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: smartGardenProtocolManagerABI,
    functionName: "disablePlugin",
    ...config,
  } as UsePrepareContractWriteConfig<typeof smartGardenProtocolManagerABI, "disablePlugin">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `functionName` set to `"enablePlugin"`.
 */
export function usePrepareSmartGardenProtocolManagerEnablePlugin(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof smartGardenProtocolManagerABI,
      "enablePlugin"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: smartGardenProtocolManagerABI,
    functionName: "enablePlugin",
    ...config,
  } as UsePrepareContractWriteConfig<typeof smartGardenProtocolManagerABI, "enablePlugin">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `functionName` set to `"enablePluginWithConfig"`.
 */
export function usePrepareSmartGardenProtocolManagerEnablePluginWithConfig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof smartGardenProtocolManagerABI,
      "enablePluginWithConfig"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: smartGardenProtocolManagerABI,
    functionName: "enablePluginWithConfig",
    ...config,
  } as UsePrepareContractWriteConfig<typeof smartGardenProtocolManagerABI, "enablePluginWithConfig">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `functionName` set to `"executeRootAccess"`.
 */
export function usePrepareSmartGardenProtocolManagerExecuteRootAccess(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof smartGardenProtocolManagerABI,
      "executeRootAccess"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: smartGardenProtocolManagerABI,
    functionName: "executeRootAccess",
    ...config,
  } as UsePrepareContractWriteConfig<typeof smartGardenProtocolManagerABI, "executeRootAccess">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `functionName` set to `"executeTransaction"`.
 */
export function usePrepareSmartGardenProtocolManagerExecuteTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof smartGardenProtocolManagerABI,
      "executeTransaction"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: smartGardenProtocolManagerABI,
    functionName: "executeTransaction",
    ...config,
  } as UsePrepareContractWriteConfig<typeof smartGardenProtocolManagerABI, "executeTransaction">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareSmartGardenProtocolManagerRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof smartGardenProtocolManagerABI,
      "renounceOwnership"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: smartGardenProtocolManagerABI,
    functionName: "renounceOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof smartGardenProtocolManagerABI, "renounceOwnership">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `functionName` set to `"setHooks"`.
 */
export function usePrepareSmartGardenProtocolManagerSetHooks(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof smartGardenProtocolManagerABI,
      "setHooks"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: smartGardenProtocolManagerABI,
    functionName: "setHooks",
    ...config,
  } as UsePrepareContractWriteConfig<typeof smartGardenProtocolManagerABI, "setHooks">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `functionName` set to `"setRegistry"`.
 */
export function usePrepareSmartGardenProtocolManagerSetRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof smartGardenProtocolManagerABI,
      "setRegistry"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: smartGardenProtocolManagerABI,
    functionName: "setRegistry",
    ...config,
  } as UsePrepareContractWriteConfig<typeof smartGardenProtocolManagerABI, "setRegistry">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareSmartGardenProtocolManagerTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof smartGardenProtocolManagerABI,
      "transferOwnership"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: smartGardenProtocolManagerABI,
    functionName: "transferOwnership",
    ...config,
  } as UsePrepareContractWriteConfig<typeof smartGardenProtocolManagerABI, "transferOwnership">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__.
 */
export function useSmartGardenProtocolManagerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof smartGardenProtocolManagerABI, TEventName>,
    "abi"
  > = {} as any,
) {
  return useContractEvent({
    abi: smartGardenProtocolManagerABI,
    ...config,
  } as UseContractEventConfig<typeof smartGardenProtocolManagerABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `eventName` set to `"ActionsExecuted"`.
 */
export function useSmartGardenProtocolManagerActionsExecutedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof smartGardenProtocolManagerABI,
      "ActionsExecuted"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: smartGardenProtocolManagerABI,
    eventName: "ActionsExecuted",
    ...config,
  } as UseContractEventConfig<typeof smartGardenProtocolManagerABI, "ActionsExecuted">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `eventName` set to `"HooksChanged"`.
 */
export function useSmartGardenProtocolManagerHooksChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof smartGardenProtocolManagerABI,
      "HooksChanged"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: smartGardenProtocolManagerABI,
    eventName: "HooksChanged",
    ...config,
  } as UseContractEventConfig<typeof smartGardenProtocolManagerABI, "HooksChanged">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `eventName` set to `"OwnershipTransferStarted"`.
 */
export function useSmartGardenProtocolManagerOwnershipTransferStartedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof smartGardenProtocolManagerABI,
      "OwnershipTransferStarted"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: smartGardenProtocolManagerABI,
    eventName: "OwnershipTransferStarted",
    ...config,
  } as UseContractEventConfig<typeof smartGardenProtocolManagerABI, "OwnershipTransferStarted">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useSmartGardenProtocolManagerOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof smartGardenProtocolManagerABI,
      "OwnershipTransferred"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: smartGardenProtocolManagerABI,
    eventName: "OwnershipTransferred",
    ...config,
  } as UseContractEventConfig<typeof smartGardenProtocolManagerABI, "OwnershipTransferred">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `eventName` set to `"PluginDisabled"`.
 */
export function useSmartGardenProtocolManagerPluginDisabledEvent(
  config: Omit<
    UseContractEventConfig<
      typeof smartGardenProtocolManagerABI,
      "PluginDisabled"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: smartGardenProtocolManagerABI,
    eventName: "PluginDisabled",
    ...config,
  } as UseContractEventConfig<typeof smartGardenProtocolManagerABI, "PluginDisabled">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `eventName` set to `"PluginEnabled"`.
 */
export function useSmartGardenProtocolManagerPluginEnabledEvent(
  config: Omit<
    UseContractEventConfig<
      typeof smartGardenProtocolManagerABI,
      "PluginEnabled"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: smartGardenProtocolManagerABI,
    eventName: "PluginEnabled",
    ...config,
  } as UseContractEventConfig<typeof smartGardenProtocolManagerABI, "PluginEnabled">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `eventName` set to `"RegistryChanged"`.
 */
export function useSmartGardenProtocolManagerRegistryChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof smartGardenProtocolManagerABI,
      "RegistryChanged"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: smartGardenProtocolManagerABI,
    eventName: "RegistryChanged",
    ...config,
  } as UseContractEventConfig<typeof smartGardenProtocolManagerABI, "RegistryChanged">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link smartGardenProtocolManagerABI}__ and `eventName` set to `"RootAccessActionExecuted"`.
 */
export function useSmartGardenProtocolManagerRootAccessActionExecutedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof smartGardenProtocolManagerABI,
      "RootAccessActionExecuted"
    >,
    "abi" | "eventName"
  > = {} as any,
) {
  return useContractEvent({
    abi: smartGardenProtocolManagerABI,
    eventName: "RootAccessActionExecuted",
    ...config,
  } as UseContractEventConfig<typeof smartGardenProtocolManagerABI, "RootAccessActionExecuted">);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link storageAccessibleABI}__.
 */
export function useStorageAccessibleRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof storageAccessibleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof storageAccessibleABI,
      TFunctionName,
      TSelectData
    >,
    "abi"
  > = {} as any,
) {
  return useContractRead({
    abi: storageAccessibleABI,
    ...config,
  } as UseContractReadConfig<typeof storageAccessibleABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link storageAccessibleABI}__ and `functionName` set to `"getStorageAt"`.
 */
export function useStorageAccessibleGetStorageAt<
  TFunctionName extends "getStorageAt",
  TSelectData = ReadContractResult<typeof storageAccessibleABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof storageAccessibleABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return useContractRead({
    abi: storageAccessibleABI,
    functionName: "getStorageAt",
    ...config,
  } as UseContractReadConfig<typeof storageAccessibleABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link storageAccessibleABI}__.
 */
export function useStorageAccessibleWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof storageAccessibleABI,
          string
        >["request"]["abi"],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof storageAccessibleABI,
        TFunctionName,
        TMode
      > & {
        abi?: never;
      } = {} as any,
) {
  return useContractWrite<typeof storageAccessibleABI, TFunctionName, TMode>({
    abi: storageAccessibleABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link storageAccessibleABI}__ and `functionName` set to `"simulateAndRevert"`.
 */
export function useStorageAccessibleSimulateAndRevert<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof storageAccessibleABI,
          "simulateAndRevert"
        >["request"]["abi"],
        "simulateAndRevert",
        TMode
      > & { functionName?: "simulateAndRevert" }
    : UseContractWriteConfig<
        typeof storageAccessibleABI,
        "simulateAndRevert",
        TMode
      > & {
        abi?: never;
        functionName?: "simulateAndRevert";
      } = {} as any,
) {
  return useContractWrite<
    typeof storageAccessibleABI,
    "simulateAndRevert",
    TMode
  >({
    abi: storageAccessibleABI,
    functionName: "simulateAndRevert",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link storageAccessibleABI}__.
 */
export function usePrepareStorageAccessibleWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof storageAccessibleABI, TFunctionName>,
    "abi"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: storageAccessibleABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof storageAccessibleABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link storageAccessibleABI}__ and `functionName` set to `"simulateAndRevert"`.
 */
export function usePrepareStorageAccessibleSimulateAndRevert(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof storageAccessibleABI,
      "simulateAndRevert"
    >,
    "abi" | "functionName"
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: storageAccessibleABI,
    functionName: "simulateAndRevert",
    ...config,
  } as UsePrepareContractWriteConfig<typeof storageAccessibleABI, "simulateAndRevert">);
}
